{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/OITIC/GITHUB/Merchandising-front/merchandising-nts15/src/app/%28main%29/banco/BancoContext.tsx"],"sourcesContent":["import React, {\r\n  useState,\r\n  Dispatch,\r\n  SetStateAction,\r\n  createContext,\r\n} from \"react\";\r\n\r\nimport { Interfaces } from \"@/types\";\r\n\r\nexport interface BancoContextProps {\r\n  banco: Interfaces.IBanco;\r\n  setBanco: Dispatch<SetStateAction<Interfaces.IBanco>>;\r\n}\r\n\r\ninterface BancoProviderProps {\r\n  children: React.ReactNode;\r\n}\r\n\r\nexport const BancoContext = createContext({} as BancoContextProps);\r\n\r\nexport const BancoProvider = (props: BancoProviderProps) => {\r\n  const defaultValues = {\r\n    idBanco: \"\",\r\n    nombre: \"\",\r\n  };\r\n\r\n  const [banco, setBanco] = useState<Interfaces.IBanco>(defaultValues);\r\n  const value = {\r\n    banco,\r\n    setBanco,\r\n  };\r\n\r\n  return <BancoContext.Provider value={value}>{props.children}</BancoContext.Provider>;\r\n};\r\n"],"names":[],"mappings":";;;;;AAAA;;;AAkBO,MAAM,6BAAe,CAAA,GAAA,qMAAA,CAAA,gBAAa,AAAD,EAAE,CAAC;AAEpC,MAAM,gBAAgB,CAAC;IAC5B,MAAM,gBAAgB;QACpB,SAAS;QACT,QAAQ;IACV;IAEA,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,qMAAA,CAAA,WAAQ,AAAD,EAAqB;IACtD,MAAM,QAAQ;QACZ;QACA;IACF;IAEA,qBAAO,8OAAC,aAAa,QAAQ;QAAC,OAAO;kBAAQ,MAAM,QAAQ;;;;;;AAC7D"}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 41, "column": 0}, "map": {"version":3,"sources":["file://C%3A/OITIC/GITHUB/Merchandising-front/merchandising-nts15/src/app/%28main%29/banco/Banco.tsx"],"sourcesContent":["import React, {\r\n  useRef,\r\n  useEffect,\r\n  useState,\r\n  useContext,\r\n  FormEvent,\r\n} from \"react\";\r\n\r\nimport { Dialog } from \"primereact/dialog\";\r\nimport { Button } from \"primereact/button\";\r\nimport { InputText, InputTextProps } from \"primereact/inputtext\";\r\nimport { DataTable } from \"primereact/datatable\";\r\nimport { Toolbar } from \"primereact/toolbar\";\r\nimport { Column } from \"primereact/column\";\r\nimport { Toast } from \"primereact/toast\";\r\n//import \"moment-timezone\";\r\nimport { classNames } from \"primereact/utils\";\r\n//import BancoService from \"@/service/BancoService\";\r\nimport { BancoContext } from \"./BancoContext\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { useForm, Controller, FieldErrors } from \"react-hook-form\";\r\nimport { Interfaces } from \"@/types\";\r\n\r\nconst Banco = () => {\r\n  const [showMessage, setShowMessage] = useState(false);\r\n  const [lstBanco, setLstBanco] = useState<Interfaces.IBanco[]>([]);\r\n  const [dlgBanco, setDlgBanco] = useState(false);\r\n  const { banco, setBanco } = useContext(BancoContext);\r\n  const { t } = useTranslation([\"translation\", \"banco\"]);\r\n  //const bancoService = new BancoService();\r\n  const criterioRef = useRef<HTMLInputElement>(null);\r\n\r\n\r\n  const toast = useRef<Toast>(null);\r\n\r\n  const defaultValues = {\r\n    idBanco: \"\",\r\n    nombre: \"\",\r\n  };\r\n\r\n\r\n\r\n  /* const obtenerBanco = (event : React.KeyboardEvent<HTMLInputElement>) => {\r\n    if (event.key  === 'Enter') {\r\n      listaBanco(event.currentTarget.value);\r\n    }\r\n  };\r\n\r\n  const listaBanco = (pCriterio: string | undefined) => {\r\n    bancoService.obtenerBanco(pCriterio).then((data: Interfaces.IBanco[]) =>\r\n        setLstBanco(data)\r\n    );\r\n  };\r\n\r\n  const seleccionaBanco = (pBanco: Interfaces.IBanco) => {\r\n    reset(defaultValues);\r\n    bancoService.seleccionaBanco(pBanco).then((data: Interfaces.IBanco) => {\r\n      setBanco(data);\r\n      setDlgBanco(true);\r\n    });\r\n  }; */\r\n\r\n  const headerBanco = (\r\n    <div className=\"inline-flex align-items-center justify-content-center gap-2\">\r\n      {banco.idBanco\r\n        ? t(\"banco:rotulo.actualizar\")\r\n        : t(\"banco:rotulo.agregar\").concat(\" \") + banco.nombre}\r\n    </div>\r\n  );\r\n\r\n  /* const agregaBanco = (pBanco : Interfaces.IBanco) => {\r\n    bancoService\r\n      .agregaBanco(pBanco)\r\n      .then((data: Interfaces.IBanco) => {\r\n        setBanco(data);\r\n        setDlgBanco(false);\r\n        listaBanco(criterioRef.current?.value);\r\n        toast.current?.show({\r\n          severity: \"success\",\r\n          summary: \"Éxito\",\r\n          detail: \"El banco se agregó correctamente\",\r\n          life: 3000,\r\n        });\r\n      })\r\n      .catch(() => {\r\n        toast.current?.show({\r\n          severity: \"error\",\r\n          summary: \"Error\",\r\n          detail:\r\n            \"No se ha agregado correctamente. Por favor, inténtalo de nuevo.\",\r\n          life: 3000,\r\n        });\r\n      });\r\n  }; */\r\n\r\n  /* const actualizaBanco = (pBanco: Interfaces.IBanco) => {\r\n    bancoService\r\n      .actualizaBanco(pBanco)\r\n      .then((data: Interfaces.IBanco ) => {\r\n        setDlgBanco(false);\r\n        setBanco(data);\r\n        listaBanco(criterioRef.current?.value);\r\n        toast.current?.show({\r\n          severity: \"success\",\r\n          summary: \"Éxito\",\r\n          detail: \"El banco se actualizó correctamente\",\r\n          life: 3000,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        toast.current?.show({\r\n          severity: \"error\",\r\n          summary: \"Error\",\r\n          detail:\r\n            \"No se ha actualizado correctamente. Por favor, inténtalo de nuevo.\",\r\n          life: 3000,\r\n        });\r\n      });\r\n  };\r\n */\r\n  const iniciaBanco = () => {\r\n    setBanco(defaultValues);\r\n    setDlgBanco(true);\r\n  };\r\n\r\n\r\n  const {\r\n    control,\r\n    formState: { errors },\r\n    handleSubmit,\r\n    reset,\r\n    clearErrors,\r\n    trigger,\r\n  } = useForm<Interfaces.IBanco>({\r\n    defaultValues: defaultValues,\r\n  });\r\n\r\n  useEffect(() => {\r\n    reset(banco);\r\n  }, [banco]);\r\n\r\n\r\n\r\n  const actionTemplate = (rowData: Interfaces.IBanco) => {\r\n    return (\r\n      <>\r\n        <Button\r\n          type=\"button\"\r\n          icon=\"pi pi-pencil\"\r\n          className=\"p-button-rounded\"\r\n          onClick={() => {\r\n            //seleccionaBanco(rowData);\r\n          }}\r\n        ></Button>\r\n      </>\r\n    );\r\n  };\r\n\r\n  const rightFooter = (\r\n    <div className=\"p-grid p-fluid\">\r\n      <div className=\"p-col-12\">\r\n        <div className=\"p-inputgroup\">\r\n          {banco.idBanco && (\r\n            <Button\r\n              tooltip={t(\"boton.actualizar\")}\r\n              tooltipOptions={{\r\n                position: \"bottom\",\r\n                mouseTrack: false,\r\n                mouseTrackTop: 15,\r\n              }}\r\n              icon=\"pi pi-undo\"\r\n              className=\"p-button-rounded\"\r\n              form=\"banco-form\"\r\n              onClick={handleSubmit((data) =>\r\n                onAgregarSubmit(data)\r\n              )}\r\n            ></Button>\r\n          )}\r\n          {!banco.idBanco && (\r\n            <Button\r\n              tooltip={t(\"boton.agregar\")}\r\n              tooltipOptions={{\r\n                position: \"bottom\",\r\n                mouseTrack: false,\r\n                mouseTrackTop: 15,\r\n              }}\r\n              icon=\"pi pi-check\"\r\n              className=\"p-button-rounded\"\r\n              form=\"banco-form\"\r\n              onClick={handleSubmit((data) =>\r\n                onAgregarSubmit(data)\r\n              )}\r\n            ></Button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const rightFooterCancelar = (\r\n    <div className=\"p-grid p-fluid\">\r\n      <div className=\"p-col-12\">\r\n        <div className=\"p-inputgroup\">\r\n          <Button\r\n            tooltip={t(\"boton.cancelar\")}\r\n            tooltipOptions={{\r\n              position: \"bottom\",\r\n              mouseTrack: false,\r\n              mouseTrackTop: 15,\r\n            }}\r\n            icon=\"pi pi-ban\"\r\n            className=\"p-button-rounded\"\r\n            onClick={(event) => {\r\n              event.preventDefault();\r\n              setDlgBanco(false);\r\n            }}\r\n          ></Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  const dlgFooter = (\r\n    <Toolbar end={rightFooter} start={rightFooterCancelar}></Toolbar>\r\n  );\r\n\r\n  const getFormErrorMessage = (name: string) => {\r\n    return (\r\n      errors[name] && <small className=\"p-error\">{errors[name].message}</small>\r\n    );\r\n  };\r\n\r\n  const onAgregarSubmit = (data: Interfaces.IBanco) => {\r\n//    event.preventDefault();\r\n    let bancoCopy = Object.assign({}, data);\r\n    //agregaBanco(bancoCopy);\r\n    reset(defaultValues);\r\n  };\r\n\r\n\r\n  const dialogFooter = (\r\n    <div className=\"p-d-flex p-jc-center\">\r\n      <Button\r\n        label=\"OK\"\r\n        className=\"p-button-text\"\r\n        autoFocus\r\n        onClick={() => setShowMessage(false)}\r\n      />\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      <Toast ref={toast} />\r\n      <div className=\"p-grid p-fluid\">\r\n        <div className=\" p-col-12 md:col-12\">\r\n          <div className=\"p-inputgroup\">\r\n            <InputText\r\n              placeholder={t(\"placeholder.criterio\")}\r\n              tooltip={t(\"placeholder.criterio\")}\r\n              tooltipOptions={{\r\n                position: \"bottom\",\r\n                mouseTrack: true,\r\n                mouseTrackTop: 15,\r\n              }}\r\n              ref={criterioRef}\r\n              //onKeyDown={(e) => obtenerBanco(e)}\r\n            ></InputText>\r\n            <Button\r\n              tooltip={t(\"boton.agregar\")}\r\n              tooltipOptions={{\r\n                position: \"bottom\",\r\n                mouseTrack: false,\r\n                mouseTrackTop: 15,\r\n              }}\r\n              icon=\"pi pi-plus-circle\"\r\n              onClick={iniciaBanco}\r\n            ></Button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <DataTable\r\n        value={lstBanco}\r\n        paginator={true}\r\n        rows={10}\r\n        emptyMessage={t(\"rotulo.vacio\")}\r\n      >\r\n        <Column\r\n          field=\"nombre\"\r\n          header={t(\"banco:label.nombre\")}\r\n          sortable={true}\r\n        ></Column>\r\n        <Column body={actionTemplate} header={t(\"rotulo.editar\")}></Column>\r\n      </DataTable>\r\n      <Dialog\r\n        header={headerBanco}\r\n        visible={dlgBanco}\r\n        modal={true}\r\n        onHide={() => {\r\n          clearErrors();\r\n          setDlgBanco(false);\r\n        }}\r\n        blockScroll={false}\r\n        className=\"p-fluid\"\r\n      >\r\n        {/* {banco && */}\r\n        <div className=\"p-d-flex\">\r\n          <div className=\"card\">\r\n            <div className=\"p-fluid p-grid\">\r\n              <form id=\"banco-form\" className=\"fluid formgrid grid\">\r\n                {/* IDBANCO */}\r\n                <div className=\"field col-12 md:col-6\">\r\n                  <Controller\r\n                    name=\"idBanco\"\r\n                    control={control}\r\n                    rules={{\r\n                      required: t(\"banco:required.idBanco\"),\r\n                    }}\r\n                    render={({ field, fieldState }) => (\r\n                      <>\r\n                        <label\r\n                          htmlFor={field.name}\r\n                          className={classNames({\r\n                            \"p-error\": errors.value,\r\n                          })}\r\n                        ></label>\r\n                        <span className=\"p-float-label\">\r\n                          <InputText\r\n                            id={field.name}\r\n                            value={field.value}\r\n                            className={classNames({\r\n                              \"p-invalid\": fieldState.invalid,\r\n                            })}\r\n                            onKeyDown={(event) => {\r\n                              if (event.key === \"Enter\") {\r\n                                event.preventDefault();\r\n                                trigger(field.name);\r\n                              }\r\n                            }}\r\n                            onChange={(e) => {\r\n                              field.onChange(e.target.value);\r\n                            }}\r\n                          />\r\n                          <label htmlFor={field.name}>\r\n                            {t(\"banco:label.idBanco\")}\r\n                          </label>\r\n                        </span>\r\n                        {getFormErrorMessage(field.name)}\r\n                      </>\r\n                    )}\r\n                  ></Controller>\r\n                </div>\r\n\r\n                <div className=\"field col-12 md:col-6\">\r\n                  <Controller\r\n                    name=\"nombre\"\r\n                    control={control}\r\n                    rules={{ required: t(\"banco:required.nombre\") }}\r\n                    render={({ field, fieldState }) => (\r\n                      <>\r\n                        <label\r\n                          htmlFor={field.name}\r\n                          className={classNames({ \"p-error\": errors.value })}\r\n                        ></label>\r\n                        <span className=\"p-float-label\">\r\n                          <InputText\r\n                            id={field.name}\r\n                            value={field.value}\r\n                            className={classNames({\r\n                              \"p-invalid\": fieldState.invalid,\r\n                            })}\r\n                            onKeyDown={(event) => {\r\n                              if (event.key === \"Enter\") {\r\n                                event.preventDefault();\r\n                                trigger(field.name);\r\n                              }\r\n                            }}\r\n                            onChange={(e) => field.onChange(e.target.value)}\r\n                          />\r\n                          <label htmlFor=\"nombre\">\r\n                            {t(\"banco:label.nombre\")}\r\n                          </label>\r\n                        </span>\r\n                        {getFormErrorMessage(field.name)}\r\n                      </>\r\n                    )}\r\n                  ></Controller>\r\n                </div>\r\n                <div className=\"field  col-12 \">{dlgFooter}</div>\r\n              </form>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Dialog>\r\n      <Dialog\r\n        showHeader={false}\r\n        visible={showMessage}\r\n        modal={true}\r\n        onHide={() => setShowMessage(false)}\r\n        position=\"top\"\r\n        footer={dialogFooter}\r\n      >\r\n        <div className=\"m-0\">\r\n          <i\r\n            className=\"pi pi-check-circle\"\r\n            style={{\r\n              fontSize: \"5rem\",\r\n              color: \"var(--green-500)\",\r\n            }}\r\n          />\r\n          <h5>Registro satisfactorio</h5>\r\n          <p>\r\n            banco registrado correctamente <b>Valor</b>\r\n          </p>\r\n        </div>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\nexport default Banco;\r\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 669, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 675, "column": 0}, "map": {"version":3,"sources":["file://C%3A/OITIC/GITHUB/Merchandising-front/merchandising-nts15/src/app/%28main%29/banco/page.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport React from \"react\";\r\nimport { useTranslation } from \"react-i18next\";\r\nimport { BancoProvider } from './BancoContext';\r\nimport Banco from './Banco';\r\n\r\n\r\nconst Index = () => {\r\nreturn (\r\n<><BancoProvider><Banco /></BancoProvider></>\r\n);\r\n\r\n}\r\nexport default Index;\r\n"],"names":[],"mappings":";;;;AAIA;AACA;AALA;;;;AAQA,MAAM,QAAQ;IACd,qBACA;kBAAE,cAAA,8OAAC,gJAAA,CAAA,gBAAa;sBAAC,cAAA,8OAAC,yIAAA,CAAA,UAAK;;;;;;;;;;;AAGvB;uCACe"}},
    {"offset": {"line": 701, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}