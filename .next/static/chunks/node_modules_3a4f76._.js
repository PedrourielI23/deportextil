(globalThis.TURBOPACK = globalThis.TURBOPACK || []).push(["static/chunks/node_modules_3a4f76._.js", {

"[project]/node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * @license React
 * react-jsx-dev-runtime.development.js
 *
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */ var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
"use strict";
"production" !== ("TURBOPACK compile-time value", "development") && function() {
    function getComponentNameFromType(type) {
        if (null == type) return null;
        if ("function" === typeof type) return type.$$typeof === REACT_CLIENT_REFERENCE$2 ? null : type.displayName || type.name || null;
        if ("string" === typeof type) return type;
        switch(type){
            case REACT_FRAGMENT_TYPE:
                return "Fragment";
            case REACT_PORTAL_TYPE:
                return "Portal";
            case REACT_PROFILER_TYPE:
                return "Profiler";
            case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
            case REACT_SUSPENSE_TYPE:
                return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
        }
        if ("object" === typeof type) switch("number" === typeof type.tag && console.error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue."), type.$$typeof){
            case REACT_CONTEXT_TYPE:
                return (type.displayName || "Context") + ".Provider";
            case REACT_CONSUMER_TYPE:
                return (type._context.displayName || "Context") + ".Consumer";
            case REACT_FORWARD_REF_TYPE:
                var innerType = type.render;
                type = type.displayName;
                type || (type = innerType.displayName || innerType.name || "", type = "" !== type ? "ForwardRef(" + type + ")" : "ForwardRef");
                return type;
            case REACT_MEMO_TYPE:
                return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || "Memo";
            case REACT_LAZY_TYPE:
                innerType = type._payload;
                type = type._init;
                try {
                    return getComponentNameFromType(type(innerType));
                } catch (x) {}
        }
        return null;
    }
    function testStringCoercion(value) {
        return "" + value;
    }
    function checkKeyStringCoercion(value) {
        try {
            testStringCoercion(value);
            var JSCompiler_inline_result = !1;
        } catch (e) {
            JSCompiler_inline_result = !0;
        }
        if (JSCompiler_inline_result) {
            JSCompiler_inline_result = console;
            var JSCompiler_temp_const = JSCompiler_inline_result.error;
            var JSCompiler_inline_result$jscomp$0 = "function" === typeof Symbol && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            JSCompiler_temp_const.call(JSCompiler_inline_result, "The provided key is an unsupported type %s. This value must be coerced to a string before using it here.", JSCompiler_inline_result$jscomp$0);
            return testStringCoercion(value);
        }
    }
    function disabledLog() {}
    function disableLogs() {
        if (0 === disabledDepth) {
            prevLog = console.log;
            prevInfo = console.info;
            prevWarn = console.warn;
            prevError = console.error;
            prevGroup = console.group;
            prevGroupCollapsed = console.groupCollapsed;
            prevGroupEnd = console.groupEnd;
            var props = {
                configurable: !0,
                enumerable: !0,
                value: disabledLog,
                writable: !0
            };
            Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
            });
        }
        disabledDepth++;
    }
    function reenableLogs() {
        disabledDepth--;
        if (0 === disabledDepth) {
            var props = {
                configurable: !0,
                enumerable: !0,
                writable: !0
            };
            Object.defineProperties(console, {
                log: assign({}, props, {
                    value: prevLog
                }),
                info: assign({}, props, {
                    value: prevInfo
                }),
                warn: assign({}, props, {
                    value: prevWarn
                }),
                error: assign({}, props, {
                    value: prevError
                }),
                group: assign({}, props, {
                    value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                    value: prevGroupEnd
                })
            });
        }
        0 > disabledDepth && console.error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
    }
    function describeBuiltInComponentFrame(name) {
        if (void 0 === prefix) try {
            throw Error();
        } catch (x) {
            var match = x.stack.trim().match(/\n( *(at )?)/);
            prefix = match && match[1] || "";
            suffix = -1 < x.stack.indexOf("\n    at") ? " (<anonymous>)" : -1 < x.stack.indexOf("@") ? "@unknown:0:0" : "";
        }
        return "\n" + prefix + name + suffix;
    }
    function describeNativeComponentFrame(fn, construct) {
        if (!fn || reentry) return "";
        var frame = componentFrameCache.get(fn);
        if (void 0 !== frame) return frame;
        reentry = !0;
        frame = Error.prepareStackTrace;
        Error.prepareStackTrace = void 0;
        var previousDispatcher = null;
        previousDispatcher = ReactSharedInternals.H;
        ReactSharedInternals.H = null;
        disableLogs();
        try {
            var RunInRootFrame = {
                DetermineComponentFrameRoot: function() {
                    try {
                        if (construct) {
                            var Fake = function() {
                                throw Error();
                            };
                            Object.defineProperty(Fake.prototype, "props", {
                                set: function() {
                                    throw Error();
                                }
                            });
                            if ("object" === typeof Reflect && Reflect.construct) {
                                try {
                                    Reflect.construct(Fake, []);
                                } catch (x) {
                                    var control = x;
                                }
                                Reflect.construct(fn, [], Fake);
                            } else {
                                try {
                                    Fake.call();
                                } catch (x$0) {
                                    control = x$0;
                                }
                                fn.call(Fake.prototype);
                            }
                        } else {
                            try {
                                throw Error();
                            } catch (x$1) {
                                control = x$1;
                            }
                            (Fake = fn()) && "function" === typeof Fake.catch && Fake.catch(function() {});
                        }
                    } catch (sample) {
                        if (sample && control && "string" === typeof sample.stack) return [
                            sample.stack,
                            control.stack
                        ];
                    }
                    return [
                        null,
                        null
                    ];
                }
            };
            RunInRootFrame.DetermineComponentFrameRoot.displayName = "DetermineComponentFrameRoot";
            var namePropDescriptor = Object.getOwnPropertyDescriptor(RunInRootFrame.DetermineComponentFrameRoot, "name");
            namePropDescriptor && namePropDescriptor.configurable && Object.defineProperty(RunInRootFrame.DetermineComponentFrameRoot, "name", {
                value: "DetermineComponentFrameRoot"
            });
            var _RunInRootFrame$Deter = RunInRootFrame.DetermineComponentFrameRoot(), sampleStack = _RunInRootFrame$Deter[0], controlStack = _RunInRootFrame$Deter[1];
            if (sampleStack && controlStack) {
                var sampleLines = sampleStack.split("\n"), controlLines = controlStack.split("\n");
                for(_RunInRootFrame$Deter = namePropDescriptor = 0; namePropDescriptor < sampleLines.length && !sampleLines[namePropDescriptor].includes("DetermineComponentFrameRoot");)namePropDescriptor++;
                for(; _RunInRootFrame$Deter < controlLines.length && !controlLines[_RunInRootFrame$Deter].includes("DetermineComponentFrameRoot");)_RunInRootFrame$Deter++;
                if (namePropDescriptor === sampleLines.length || _RunInRootFrame$Deter === controlLines.length) for(namePropDescriptor = sampleLines.length - 1, _RunInRootFrame$Deter = controlLines.length - 1; 1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter && sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter];)_RunInRootFrame$Deter--;
                for(; 1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter; namePropDescriptor--, _RunInRootFrame$Deter--)if (sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter]) {
                    if (1 !== namePropDescriptor || 1 !== _RunInRootFrame$Deter) {
                        do if (namePropDescriptor--, _RunInRootFrame$Deter--, 0 > _RunInRootFrame$Deter || sampleLines[namePropDescriptor] !== controlLines[_RunInRootFrame$Deter]) {
                            var _frame = "\n" + sampleLines[namePropDescriptor].replace(" at new ", " at ");
                            fn.displayName && _frame.includes("<anonymous>") && (_frame = _frame.replace("<anonymous>", fn.displayName));
                            "function" === typeof fn && componentFrameCache.set(fn, _frame);
                            return _frame;
                        }
                        while (1 <= namePropDescriptor && 0 <= _RunInRootFrame$Deter)
                    }
                    break;
                }
            }
        } finally{
            reentry = !1, ReactSharedInternals.H = previousDispatcher, reenableLogs(), Error.prepareStackTrace = frame;
        }
        sampleLines = (sampleLines = fn ? fn.displayName || fn.name : "") ? describeBuiltInComponentFrame(sampleLines) : "";
        "function" === typeof fn && componentFrameCache.set(fn, sampleLines);
        return sampleLines;
    }
    function describeUnknownElementTypeFrameInDEV(type) {
        if (null == type) return "";
        if ("function" === typeof type) {
            var prototype = type.prototype;
            return describeNativeComponentFrame(type, !(!prototype || !prototype.isReactComponent));
        }
        if ("string" === typeof type) return describeBuiltInComponentFrame(type);
        switch(type){
            case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
        }
        if ("object" === typeof type) switch(type.$$typeof){
            case REACT_FORWARD_REF_TYPE:
                return type = describeNativeComponentFrame(type.render, !1), type;
            case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type);
            case REACT_LAZY_TYPE:
                prototype = type._payload;
                type = type._init;
                try {
                    return describeUnknownElementTypeFrameInDEV(type(prototype));
                } catch (x) {}
        }
        return "";
    }
    function getOwner() {
        var dispatcher = ReactSharedInternals.A;
        return null === dispatcher ? null : dispatcher.getOwner();
    }
    function hasValidKey(config) {
        if (hasOwnProperty.call(config, "key")) {
            var getter = Object.getOwnPropertyDescriptor(config, "key").get;
            if (getter && getter.isReactWarning) return !1;
        }
        return void 0 !== config.key;
    }
    function defineKeyPropWarningGetter(props, displayName) {
        function warnAboutAccessingKey() {
            specialPropKeyWarningShown || (specialPropKeyWarningShown = !0, console.error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)", displayName));
        }
        warnAboutAccessingKey.isReactWarning = !0;
        Object.defineProperty(props, "key", {
            get: warnAboutAccessingKey,
            configurable: !0
        });
    }
    function elementRefGetterWithDeprecationWarning() {
        var componentName = getComponentNameFromType(this.type);
        didWarnAboutElementRef[componentName] || (didWarnAboutElementRef[componentName] = !0, console.error("Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release."));
        componentName = this.props.ref;
        return void 0 !== componentName ? componentName : null;
    }
    function ReactElement(type, key, self, source, owner, props) {
        self = props.ref;
        type = {
            $$typeof: REACT_ELEMENT_TYPE,
            type: type,
            key: key,
            props: props,
            _owner: owner
        };
        null !== (void 0 !== self ? self : null) ? Object.defineProperty(type, "ref", {
            enumerable: !1,
            get: elementRefGetterWithDeprecationWarning
        }) : Object.defineProperty(type, "ref", {
            enumerable: !1,
            value: null
        });
        type._store = {};
        Object.defineProperty(type._store, "validated", {
            configurable: !1,
            enumerable: !1,
            writable: !0,
            value: 0
        });
        Object.defineProperty(type, "_debugInfo", {
            configurable: !1,
            enumerable: !1,
            writable: !0,
            value: null
        });
        Object.freeze && (Object.freeze(type.props), Object.freeze(type));
        return type;
    }
    function jsxDEVImpl(type, config, maybeKey, isStaticChildren, source, self) {
        if ("string" === typeof type || "function" === typeof type || type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || type === REACT_OFFSCREEN_TYPE || "object" === typeof type && null !== type && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_CONSUMER_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_CLIENT_REFERENCE$1 || void 0 !== type.getModuleId)) {
            var children = config.children;
            if (void 0 !== children) if (isStaticChildren) if (isArrayImpl(children)) {
                for(isStaticChildren = 0; isStaticChildren < children.length; isStaticChildren++)validateChildKeys(children[isStaticChildren], type);
                Object.freeze && Object.freeze(children);
            } else console.error("React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.");
            else validateChildKeys(children, type);
        } else {
            children = "";
            if (void 0 === type || "object" === typeof type && null !== type && 0 === Object.keys(type).length) children += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
            null === type ? isStaticChildren = "null" : isArrayImpl(type) ? isStaticChildren = "array" : void 0 !== type && type.$$typeof === REACT_ELEMENT_TYPE ? (isStaticChildren = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />", children = " Did you accidentally export a JSX literal instead of a component?") : isStaticChildren = typeof type;
            console.error("React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", isStaticChildren, children);
        }
        if (hasOwnProperty.call(config, "key")) {
            children = getComponentNameFromType(type);
            var keys = Object.keys(config).filter(function(k) {
                return "key" !== k;
            });
            isStaticChildren = 0 < keys.length ? "{key: someKey, " + keys.join(": ..., ") + ": ...}" : "{key: someKey}";
            didWarnAboutKeySpread[children + isStaticChildren] || (keys = 0 < keys.length ? "{" + keys.join(": ..., ") + ": ...}" : "{}", console.error('A props object containing a "key" prop is being spread into JSX:\n  let props = %s;\n  <%s {...props} />\nReact keys must be passed directly to JSX without using spread:\n  let props = %s;\n  <%s key={someKey} {...props} />', isStaticChildren, children, keys, children), didWarnAboutKeySpread[children + isStaticChildren] = !0);
        }
        children = null;
        void 0 !== maybeKey && (checkKeyStringCoercion(maybeKey), children = "" + maybeKey);
        hasValidKey(config) && (checkKeyStringCoercion(config.key), children = "" + config.key);
        if ("key" in config) {
            maybeKey = {};
            for(var propName in config)"key" !== propName && (maybeKey[propName] = config[propName]);
        } else maybeKey = config;
        children && defineKeyPropWarningGetter(maybeKey, "function" === typeof type ? type.displayName || type.name || "Unknown" : type);
        return ReactElement(type, children, self, source, getOwner(), maybeKey);
    }
    function validateChildKeys(node, parentType) {
        if ("object" === typeof node && node && node.$$typeof !== REACT_CLIENT_REFERENCE) {
            if (isArrayImpl(node)) for(var i = 0; i < node.length; i++){
                var child = node[i];
                isValidElement(child) && validateExplicitKey(child, parentType);
            }
            else if (isValidElement(node)) node._store && (node._store.validated = 1);
            else if (null === node || "object" !== typeof node ? i = null : (i = MAYBE_ITERATOR_SYMBOL && node[MAYBE_ITERATOR_SYMBOL] || node["@@iterator"], i = "function" === typeof i ? i : null), "function" === typeof i && i !== node.entries && (i = i.call(node), i !== node)) for(; !(node = i.next()).done;)isValidElement(node.value) && validateExplicitKey(node.value, parentType);
        }
    }
    function isValidElement(object) {
        return "object" === typeof object && null !== object && object.$$typeof === REACT_ELEMENT_TYPE;
    }
    function validateExplicitKey(element, parentType) {
        if (element._store && !element._store.validated && null == element.key && (element._store.validated = 1, parentType = getCurrentComponentErrorInfo(parentType), !ownerHasKeyUseWarning[parentType])) {
            ownerHasKeyUseWarning[parentType] = !0;
            var childOwner = "";
            element && null != element._owner && element._owner !== getOwner() && (childOwner = null, "number" === typeof element._owner.tag ? childOwner = getComponentNameFromType(element._owner.type) : "string" === typeof element._owner.name && (childOwner = element._owner.name), childOwner = " It was passed a child from " + childOwner + ".");
            var prevGetCurrentStack = ReactSharedInternals.getCurrentStack;
            ReactSharedInternals.getCurrentStack = function() {
                var stack = describeUnknownElementTypeFrameInDEV(element.type);
                prevGetCurrentStack && (stack += prevGetCurrentStack() || "");
                return stack;
            };
            console.error('Each child in a list should have a unique "key" prop.%s%s See https://react.dev/link/warning-keys for more information.', parentType, childOwner);
            ReactSharedInternals.getCurrentStack = prevGetCurrentStack;
        }
    }
    function getCurrentComponentErrorInfo(parentType) {
        var info = "", owner = getOwner();
        owner && (owner = getComponentNameFromType(owner.type)) && (info = "\n\nCheck the render method of `" + owner + "`.");
        info || (parentType = getComponentNameFromType(parentType)) && (info = "\n\nCheck the top-level render call using <" + parentType + ">.");
        return info;
    }
    var React = __turbopack_require__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)"), REACT_ELEMENT_TYPE = Symbol.for("react.transitional.element"), REACT_PORTAL_TYPE = Symbol.for("react.portal"), REACT_FRAGMENT_TYPE = Symbol.for("react.fragment"), REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode"), REACT_PROFILER_TYPE = Symbol.for("react.profiler");
    Symbol.for("react.provider");
    var REACT_CONSUMER_TYPE = Symbol.for("react.consumer"), REACT_CONTEXT_TYPE = Symbol.for("react.context"), REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref"), REACT_SUSPENSE_TYPE = Symbol.for("react.suspense"), REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list"), REACT_MEMO_TYPE = Symbol.for("react.memo"), REACT_LAZY_TYPE = Symbol.for("react.lazy"), REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen"), MAYBE_ITERATOR_SYMBOL = Symbol.iterator, REACT_CLIENT_REFERENCE$2 = Symbol.for("react.client.reference"), ReactSharedInternals = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE, hasOwnProperty = Object.prototype.hasOwnProperty, assign = Object.assign, REACT_CLIENT_REFERENCE$1 = Symbol.for("react.client.reference"), isArrayImpl = Array.isArray, disabledDepth = 0, prevLog, prevInfo, prevWarn, prevError, prevGroup, prevGroupCollapsed, prevGroupEnd;
    disabledLog.__reactDisabledLog = !0;
    var prefix, suffix, reentry = !1;
    var componentFrameCache = new ("function" === typeof WeakMap ? WeakMap : Map)();
    var REACT_CLIENT_REFERENCE = Symbol.for("react.client.reference"), specialPropKeyWarningShown;
    var didWarnAboutElementRef = {};
    var didWarnAboutKeySpread = {}, ownerHasKeyUseWarning = {};
    exports.Fragment = REACT_FRAGMENT_TYPE;
    exports.jsxDEV = function(type, config, maybeKey, isStaticChildren, source, self) {
        return jsxDEVImpl(type, config, maybeKey, isStaticChildren, source, self);
    };
}();
}}),
"[project]/node_modules/next/dist/compiled/react/jsx-dev-runtime.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
'use strict';
if ("TURBOPACK compile-time falsy", 0) {
    "TURBOPACK unreachable";
} else {
    module.exports = __turbopack_require__("[project]/node_modules/next/dist/compiled/react/cjs/react-jsx-dev-runtime.development.js [app-client] (ecmascript)");
}
}}),
"[project]/node_modules/next/dist/client/components/noop-head.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return NoopHead;
    }
});
function NoopHead() {
    return null;
}
if ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {
    Object.defineProperty(exports.default, '__esModule', {
        value: true
    });
    Object.assign(exports.default, exports);
    module.exports = exports.default;
} //# sourceMappingURL=noop-head.js.map
}}),
"[project]/node_modules/primereact/utils/utils.esm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "DomHandler": (()=>DomHandler),
    "EventBus": (()=>EventBus),
    "IconUtils": (()=>IconUtils),
    "ObjectUtils": (()=>ObjectUtils),
    "UniqueComponentId": (()=>UniqueComponentId),
    "ZIndexUtils": (()=>ZIndexUtils),
    "classNames": (()=>classNames),
    "mask": (()=>mask),
    "mergeProps": (()=>mergeProps)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
'use client';
;
function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}
function _iterableToArrayLimit(r, l) {
    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t) {
        var e, n, i, u, a = [], f = !0, o = !1;
        try {
            if (i = (t = t.call(r)).next, 0 === l) {
                if (Object(t) !== t) return;
                f = !1;
            } else for(; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
        } catch (r) {
            o = !0, n = r;
        } finally{
            try {
                if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
            } finally{
                if (o) throw n;
            }
        }
        return a;
    }
}
function _arrayLikeToArray$2(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _unsupportedIterableToArray$2(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$2(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$2(o, minLen);
}
function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray$2(arr, i) || _nonIterableRest();
}
function _typeof(o) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o) {
        return typeof o;
    } : function(o) {
        return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, _typeof(o);
}
function classNames() {
    for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++){
        args[_key] = arguments[_key];
    }
    if (args) {
        var classes = [];
        for(var i = 0; i < args.length; i++){
            var className = args[i];
            if (!className) {
                continue;
            }
            var type = _typeof(className);
            if (type === 'string' || type === 'number') {
                classes.push(className);
            } else if (type === 'object') {
                var _classes = Array.isArray(className) ? className : Object.entries(className).map(function(_ref) {
                    var _ref2 = _slicedToArray(_ref, 2), key = _ref2[0], value = _ref2[1];
                    return value ? key : null;
                });
                classes = _classes.length ? classes.concat(_classes.filter(function(c) {
                    return !!c;
                })) : classes;
            }
        }
        return classes.join(' ').trim();
    }
    return undefined;
}
function _arrayWithoutHoles(arr) {
    if (Array.isArray(arr)) return _arrayLikeToArray$2(arr);
}
function _iterableToArray(iter) {
    if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _nonIterableSpread() {
    throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _toConsumableArray(arr) {
    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray$2(arr) || _nonIterableSpread();
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _toPrimitive(input, hint) {
    if (_typeof(input) !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return _typeof(key) === "symbol" ? key : String(key);
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor;
}
function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _createForOfIteratorHelper$1(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F() {};
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
        s: function s() {
            it = it.call(o);
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it["return"] != null) it["return"]();
            } finally{
                if (didErr) throw err;
            }
        }
    };
}
function _unsupportedIterableToArray$1(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);
}
function _arrayLikeToArray$1(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
var DomHandler = /*#__PURE__*/ function() {
    function DomHandler() {
        _classCallCheck(this, DomHandler);
    }
    return _createClass(DomHandler, null, [
        {
            key: "innerWidth",
            value: function innerWidth(el) {
                if (el) {
                    var width = el.offsetWidth;
                    var style = getComputedStyle(el);
                    width = width + (parseFloat(style.paddingLeft) + parseFloat(style.paddingRight));
                    return width;
                }
                return 0;
            }
        },
        {
            key: "width",
            value: function width(el) {
                if (el) {
                    var _width = el.offsetWidth;
                    var style = getComputedStyle(el);
                    _width = _width - (parseFloat(style.paddingLeft) + parseFloat(style.paddingRight));
                    return _width;
                }
                return 0;
            }
        },
        {
            key: "getBrowserLanguage",
            value: function getBrowserLanguage() {
                return navigator.userLanguage || navigator.languages && navigator.languages.length && navigator.languages[0] || navigator.language || navigator.browserLanguage || navigator.systemLanguage || 'en';
            }
        },
        {
            key: "getWindowScrollTop",
            value: function getWindowScrollTop() {
                var doc = document.documentElement;
                return (window.pageYOffset || doc.scrollTop) - (doc.clientTop || 0);
            }
        },
        {
            key: "getWindowScrollLeft",
            value: function getWindowScrollLeft() {
                var doc = document.documentElement;
                return (window.pageXOffset || doc.scrollLeft) - (doc.clientLeft || 0);
            }
        },
        {
            key: "getOuterWidth",
            value: function getOuterWidth(el, margin) {
                if (el) {
                    var width = el.getBoundingClientRect().width || el.offsetWidth;
                    if (margin) {
                        var style = getComputedStyle(el);
                        width = width + (parseFloat(style.marginLeft) + parseFloat(style.marginRight));
                    }
                    return width;
                }
                return 0;
            }
        },
        {
            key: "getOuterHeight",
            value: function getOuterHeight(el, margin) {
                if (el) {
                    var height = el.getBoundingClientRect().height || el.offsetHeight;
                    if (margin) {
                        var style = getComputedStyle(el);
                        height = height + (parseFloat(style.marginTop) + parseFloat(style.marginBottom));
                    }
                    return height;
                }
                return 0;
            }
        },
        {
            key: "getClientHeight",
            value: function getClientHeight(el, margin) {
                if (el) {
                    var height = el.clientHeight;
                    if (margin) {
                        var style = getComputedStyle(el);
                        height = height + (parseFloat(style.marginTop) + parseFloat(style.marginBottom));
                    }
                    return height;
                }
                return 0;
            }
        },
        {
            key: "getClientWidth",
            value: function getClientWidth(el, margin) {
                if (el) {
                    var width = el.clientWidth;
                    if (margin) {
                        var style = getComputedStyle(el);
                        width = width + (parseFloat(style.marginLeft) + parseFloat(style.marginRight));
                    }
                    return width;
                }
                return 0;
            }
        },
        {
            key: "getViewport",
            value: function getViewport() {
                var win = window;
                var d = document;
                var e = d.documentElement;
                var g = d.getElementsByTagName('body')[0];
                var w = win.innerWidth || e.clientWidth || g.clientWidth;
                var h = win.innerHeight || e.clientHeight || g.clientHeight;
                return {
                    width: w,
                    height: h
                };
            }
        },
        {
            key: "getOffset",
            value: function getOffset(el) {
                if (el) {
                    var rect = el.getBoundingClientRect();
                    return {
                        top: rect.top + (window.pageYOffset || document.documentElement.scrollTop || document.body.scrollTop || 0),
                        left: rect.left + (window.pageXOffset || document.documentElement.scrollLeft || document.body.scrollLeft || 0)
                    };
                }
                return {
                    top: 'auto',
                    left: 'auto'
                };
            }
        },
        {
            key: "index",
            value: function index(element) {
                if (element) {
                    var children = element.parentNode.childNodes;
                    var num = 0;
                    for(var i = 0; i < children.length; i++){
                        if (children[i] === element) {
                            return num;
                        }
                        if (children[i].nodeType === 1) {
                            num++;
                        }
                    }
                }
                return -1;
            }
        },
        {
            key: "addMultipleClasses",
            value: function addMultipleClasses(element, className) {
                if (element && className) {
                    if (element.classList) {
                        var styles = className.split(' ');
                        for(var i = 0; i < styles.length; i++){
                            element.classList.add(styles[i]);
                        }
                    } else {
                        var _styles = className.split(' ');
                        for(var _i = 0; _i < _styles.length; _i++){
                            element.className = element.className + (' ' + _styles[_i]);
                        }
                    }
                }
            }
        },
        {
            key: "removeMultipleClasses",
            value: function removeMultipleClasses(element, className) {
                if (element && className) {
                    if (element.classList) {
                        var styles = className.split(' ');
                        for(var i = 0; i < styles.length; i++){
                            element.classList.remove(styles[i]);
                        }
                    } else {
                        var _styles2 = className.split(' ');
                        for(var _i2 = 0; _i2 < _styles2.length; _i2++){
                            element.className = element.className.replace(new RegExp('(^|\\b)' + _styles2[_i2].split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
                        }
                    }
                }
            }
        },
        {
            key: "addClass",
            value: function addClass(element, className) {
                if (element && className) {
                    if (element.classList) {
                        element.classList.add(className);
                    } else {
                        element.className = element.className + (' ' + className);
                    }
                }
            }
        },
        {
            key: "removeClass",
            value: function removeClass(element, className) {
                if (element && className) {
                    if (element.classList) {
                        element.classList.remove(className);
                    } else {
                        element.className = element.className.replace(new RegExp('(^|\\b)' + className.split(' ').join('|') + '(\\b|$)', 'gi'), ' ');
                    }
                }
            }
        },
        {
            key: "hasClass",
            value: function hasClass(element, className) {
                if (element) {
                    if (element.classList) {
                        return element.classList.contains(className);
                    }
                    return new RegExp('(^| )' + className + '( |$)', 'gi').test(element.className);
                }
                return false;
            }
        },
        {
            key: "addStyles",
            value: function addStyles(element) {
                var styles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                if (element) {
                    Object.entries(styles).forEach(function(_ref) {
                        var _ref2 = _slicedToArray(_ref, 2), key = _ref2[0], value = _ref2[1];
                        return element.style[key] = value;
                    });
                }
            }
        },
        {
            key: "find",
            value: function find(element, selector) {
                return element ? Array.from(element.querySelectorAll(selector)) : [];
            }
        },
        {
            key: "findSingle",
            value: function findSingle(element, selector) {
                if (element) {
                    return element.querySelector(selector);
                }
                return null;
            }
        },
        {
            key: "setAttributes",
            value: function setAttributes(element) {
                var _this = this;
                var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                if (element) {
                    var _computedStyles = function computedStyles(rule, value) {
                        var _element$$attrs, _element$$attrs2;
                        var styles = element !== null && element !== void 0 && (_element$$attrs = element.$attrs) !== null && _element$$attrs !== void 0 && _element$$attrs[rule] ? [
                            element === null || element === void 0 || (_element$$attrs2 = element.$attrs) === null || _element$$attrs2 === void 0 ? void 0 : _element$$attrs2[rule]
                        ] : [];
                        return [
                            value
                        ].flat().reduce(function(cv, v) {
                            if (v !== null && v !== undefined) {
                                var type = _typeof(v);
                                if (type === 'string' || type === 'number') {
                                    cv.push(v);
                                } else if (type === 'object') {
                                    var _cv = Array.isArray(v) ? _computedStyles(rule, v) : Object.entries(v).map(function(_ref3) {
                                        var _ref4 = _slicedToArray(_ref3, 2), _k = _ref4[0], _v = _ref4[1];
                                        return rule === 'style' && (!!_v || _v === 0) ? "".concat(_k.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase(), ":").concat(_v) : _v ? _k : undefined;
                                    });
                                    cv = _cv.length ? cv.concat(_cv.filter(function(c) {
                                        return !!c;
                                    })) : cv;
                                }
                            }
                            return cv;
                        }, styles);
                    };
                    Object.entries(attributes).forEach(function(_ref5) {
                        var _ref6 = _slicedToArray(_ref5, 2), key = _ref6[0], value = _ref6[1];
                        if (value !== undefined && value !== null) {
                            var matchedEvent = key.match(/^on(.+)/);
                            if (matchedEvent) {
                                element.addEventListener(matchedEvent[1].toLowerCase(), value);
                            } else if (key === 'p-bind') {
                                _this.setAttributes(element, value);
                            } else {
                                value = key === 'class' ? _toConsumableArray(new Set(_computedStyles('class', value))).join(' ').trim() : key === 'style' ? _computedStyles('style', value).join(';').trim() : value;
                                (element.$attrs = element.$attrs || {}) && (element.$attrs[key] = value);
                                element.setAttribute(key, value);
                            }
                        }
                    });
                }
            }
        },
        {
            key: "getAttribute",
            value: function getAttribute(element, name) {
                if (element) {
                    var value = element.getAttribute(name);
                    if (!isNaN(value)) {
                        return +value;
                    }
                    if (value === 'true' || value === 'false') {
                        return value === 'true';
                    }
                    return value;
                }
                return undefined;
            }
        },
        {
            key: "isAttributeEquals",
            value: function isAttributeEquals(element, name, value) {
                return element ? this.getAttribute(element, name) === value : false;
            }
        },
        {
            key: "isAttributeNotEquals",
            value: function isAttributeNotEquals(element, name, value) {
                return !this.isAttributeEquals(element, name, value);
            }
        },
        {
            key: "getHeight",
            value: function getHeight(el) {
                if (el) {
                    var height = el.offsetHeight;
                    var style = getComputedStyle(el);
                    height = height - (parseFloat(style.paddingTop) + parseFloat(style.paddingBottom) + parseFloat(style.borderTopWidth) + parseFloat(style.borderBottomWidth));
                    return height;
                }
                return 0;
            }
        },
        {
            key: "getWidth",
            value: function getWidth(el) {
                if (el) {
                    var width = el.offsetWidth;
                    var style = getComputedStyle(el);
                    width = width - (parseFloat(style.paddingLeft) + parseFloat(style.paddingRight) + parseFloat(style.borderLeftWidth) + parseFloat(style.borderRightWidth));
                    return width;
                }
                return 0;
            }
        },
        {
            key: "alignOverlay",
            value: function alignOverlay(overlay, target, appendTo) {
                var calculateMinWidth = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;
                if (overlay && target) {
                    if (appendTo === 'self') {
                        this.relativePosition(overlay, target);
                    } else {
                        calculateMinWidth && (overlay.style.minWidth = DomHandler.getOuterWidth(target) + 'px');
                        this.absolutePosition(overlay, target);
                    }
                }
            }
        },
        {
            key: "absolutePosition",
            value: function absolutePosition(element, target) {
                var align = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'left';
                if (element && target) {
                    var elementDimensions = element.offsetParent ? {
                        width: element.offsetWidth,
                        height: element.offsetHeight
                    } : this.getHiddenElementDimensions(element);
                    var elementOuterHeight = elementDimensions.height;
                    var elementOuterWidth = elementDimensions.width;
                    var targetOuterHeight = target.offsetHeight;
                    var targetOuterWidth = target.offsetWidth;
                    var targetOffset = target.getBoundingClientRect();
                    var windowScrollTop = this.getWindowScrollTop();
                    var windowScrollLeft = this.getWindowScrollLeft();
                    var viewport = this.getViewport();
                    var top;
                    var left;
                    if (targetOffset.top + targetOuterHeight + elementOuterHeight > viewport.height) {
                        top = targetOffset.top + windowScrollTop - elementOuterHeight;
                        if (top < 0) {
                            top = windowScrollTop;
                        }
                        element.style.transformOrigin = 'bottom';
                    } else {
                        top = targetOuterHeight + targetOffset.top + windowScrollTop;
                        element.style.transformOrigin = 'top';
                    }
                    var targetOffsetPx = targetOffset.left;
                    var alignOffset = align === 'left' ? 0 : elementOuterWidth - targetOuterWidth;
                    if (targetOffsetPx + targetOuterWidth + elementOuterWidth > viewport.width) {
                        left = Math.max(0, targetOffsetPx + windowScrollLeft + targetOuterWidth - elementOuterWidth);
                    } else {
                        left = targetOffsetPx - alignOffset + windowScrollLeft;
                    }
                    element.style.top = top + 'px';
                    element.style.left = left + 'px';
                }
            }
        },
        {
            key: "relativePosition",
            value: function relativePosition(element, target) {
                if (element && target) {
                    var elementDimensions = element.offsetParent ? {
                        width: element.offsetWidth,
                        height: element.offsetHeight
                    } : this.getHiddenElementDimensions(element);
                    var targetHeight = target.offsetHeight;
                    var targetOffset = target.getBoundingClientRect();
                    var viewport = this.getViewport();
                    var top;
                    var left;
                    if (targetOffset.top + targetHeight + elementDimensions.height > viewport.height) {
                        top = -1 * elementDimensions.height;
                        if (targetOffset.top + top < 0) {
                            top = -1 * targetOffset.top;
                        }
                        element.style.transformOrigin = 'bottom';
                    } else {
                        top = targetHeight;
                        element.style.transformOrigin = 'top';
                    }
                    if (elementDimensions.width > viewport.width) {
                        // element wider then viewport and cannot fit on screen (align at left side of viewport)
                        left = targetOffset.left * -1;
                    } else if (targetOffset.left + elementDimensions.width > viewport.width) {
                        // element wider then viewport but can be fit on screen (align at right side of viewport)
                        left = (targetOffset.left + elementDimensions.width - viewport.width) * -1;
                    } else {
                        // element fits on screen (align with target)
                        left = 0;
                    }
                    element.style.top = top + 'px';
                    element.style.left = left + 'px';
                }
            }
        },
        {
            key: "flipfitCollision",
            value: function flipfitCollision(element, target) {
                var _this2 = this;
                var my = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'left top';
                var at = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'left bottom';
                var callback = arguments.length > 4 ? arguments[4] : undefined;
                if (element && target) {
                    var targetOffset = target.getBoundingClientRect();
                    var viewport = this.getViewport();
                    var myArr = my.split(' ');
                    var atArr = at.split(' ');
                    var getPositionValue = function getPositionValue(arr, isOffset) {
                        return isOffset ? +arr.substring(arr.search(/(\+|-)/g)) || 0 : arr.substring(0, arr.search(/(\+|-)/g)) || arr;
                    };
                    var position = {
                        my: {
                            x: getPositionValue(myArr[0]),
                            y: getPositionValue(myArr[1] || myArr[0]),
                            offsetX: getPositionValue(myArr[0], true),
                            offsetY: getPositionValue(myArr[1] || myArr[0], true)
                        },
                        at: {
                            x: getPositionValue(atArr[0]),
                            y: getPositionValue(atArr[1] || atArr[0]),
                            offsetX: getPositionValue(atArr[0], true),
                            offsetY: getPositionValue(atArr[1] || atArr[0], true)
                        }
                    };
                    var myOffset = {
                        left: function left() {
                            var totalOffset = position.my.offsetX + position.at.offsetX;
                            return totalOffset + targetOffset.left + (position.my.x === 'left' ? 0 : -1 * (position.my.x === 'center' ? _this2.getOuterWidth(element) / 2 : _this2.getOuterWidth(element)));
                        },
                        top: function top() {
                            var totalOffset = position.my.offsetY + position.at.offsetY;
                            return totalOffset + targetOffset.top + (position.my.y === 'top' ? 0 : -1 * (position.my.y === 'center' ? _this2.getOuterHeight(element) / 2 : _this2.getOuterHeight(element)));
                        }
                    };
                    var alignWithAt = {
                        count: {
                            x: 0,
                            y: 0
                        },
                        left: function left() {
                            var left = myOffset.left();
                            var scrollLeft = DomHandler.getWindowScrollLeft();
                            element.style.left = left + scrollLeft + 'px';
                            if (this.count.x === 2) {
                                element.style.left = scrollLeft + 'px';
                                this.count.x = 0;
                            } else if (left < 0) {
                                this.count.x++;
                                position.my.x = 'left';
                                position.at.x = 'right';
                                position.my.offsetX *= -1;
                                position.at.offsetX *= -1;
                                this.right();
                            }
                        },
                        right: function right() {
                            var left = myOffset.left() + DomHandler.getOuterWidth(target);
                            var scrollLeft = DomHandler.getWindowScrollLeft();
                            element.style.left = left + scrollLeft + 'px';
                            if (this.count.x === 2) {
                                element.style.left = viewport.width - DomHandler.getOuterWidth(element) + scrollLeft + 'px';
                                this.count.x = 0;
                            } else if (left + DomHandler.getOuterWidth(element) > viewport.width) {
                                this.count.x++;
                                position.my.x = 'right';
                                position.at.x = 'left';
                                position.my.offsetX *= -1;
                                position.at.offsetX *= -1;
                                this.left();
                            }
                        },
                        top: function top() {
                            var top = myOffset.top();
                            var scrollTop = DomHandler.getWindowScrollTop();
                            element.style.top = top + scrollTop + 'px';
                            if (this.count.y === 2) {
                                element.style.left = scrollTop + 'px';
                                this.count.y = 0;
                            } else if (top < 0) {
                                this.count.y++;
                                position.my.y = 'top';
                                position.at.y = 'bottom';
                                position.my.offsetY *= -1;
                                position.at.offsetY *= -1;
                                this.bottom();
                            }
                        },
                        bottom: function bottom() {
                            var top = myOffset.top() + DomHandler.getOuterHeight(target);
                            var scrollTop = DomHandler.getWindowScrollTop();
                            element.style.top = top + scrollTop + 'px';
                            if (this.count.y === 2) {
                                element.style.left = viewport.height - DomHandler.getOuterHeight(element) + scrollTop + 'px';
                                this.count.y = 0;
                            } else if (top + DomHandler.getOuterHeight(target) > viewport.height) {
                                this.count.y++;
                                position.my.y = 'bottom';
                                position.at.y = 'top';
                                position.my.offsetY *= -1;
                                position.at.offsetY *= -1;
                                this.top();
                            }
                        },
                        center: function center(axis) {
                            if (axis === 'y') {
                                var top = myOffset.top() + DomHandler.getOuterHeight(target) / 2;
                                element.style.top = top + DomHandler.getWindowScrollTop() + 'px';
                                if (top < 0) {
                                    this.bottom();
                                } else if (top + DomHandler.getOuterHeight(target) > viewport.height) {
                                    this.top();
                                }
                            } else {
                                var left = myOffset.left() + DomHandler.getOuterWidth(target) / 2;
                                element.style.left = left + DomHandler.getWindowScrollLeft() + 'px';
                                if (left < 0) {
                                    this.left();
                                } else if (left + DomHandler.getOuterWidth(element) > viewport.width) {
                                    this.right();
                                }
                            }
                        }
                    };
                    alignWithAt[position.at.x]('x');
                    alignWithAt[position.at.y]('y');
                    if (this.isFunction(callback)) {
                        callback(position);
                    }
                }
            }
        },
        {
            key: "findCollisionPosition",
            value: function findCollisionPosition(position) {
                if (position) {
                    var isAxisY = position === 'top' || position === 'bottom';
                    var myXPosition = position === 'left' ? 'right' : 'left';
                    var myYPosition = position === 'top' ? 'bottom' : 'top';
                    if (isAxisY) {
                        return {
                            axis: 'y',
                            my: "center ".concat(myYPosition),
                            at: "center ".concat(position)
                        };
                    }
                    return {
                        axis: 'x',
                        my: "".concat(myXPosition, " center"),
                        at: "".concat(position, " center")
                    };
                }
            }
        },
        {
            key: "getParents",
            value: function getParents(element) {
                var parents = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
                return element.parentNode === null ? parents : this.getParents(element.parentNode, parents.concat([
                    element.parentNode
                ]));
            }
        },
        {
            key: "getScrollableParents",
            value: function getScrollableParents(element) {
                var hideOverlaysOnDocumentScrolling = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
                var scrollableParents = [];
                if (element) {
                    var parents = this.getParents(element);
                    var overflowRegex = /(auto|scroll)/;
                    var overflowCheck = function overflowCheck(node) {
                        var styleDeclaration = node ? getComputedStyle(node) : null;
                        return styleDeclaration && (overflowRegex.test(styleDeclaration.getPropertyValue('overflow')) || overflowRegex.test(styleDeclaration.getPropertyValue('overflow-x')) || overflowRegex.test(styleDeclaration.getPropertyValue('overflow-y')));
                    };
                    var addScrollableParent = function addScrollableParent(node) {
                        if (hideOverlaysOnDocumentScrolling) {
                            // nodeType 9 is for document element
                            scrollableParents.push(node.nodeName === 'BODY' || node.nodeName === 'HTML' || node.nodeType === 9 ? window : node);
                        } else {
                            scrollableParents.push(node);
                        }
                    };
                    var _iterator = _createForOfIteratorHelper$1(parents), _step;
                    try {
                        for(_iterator.s(); !(_step = _iterator.n()).done;){
                            var parent = _step.value;
                            var scrollSelectors = parent.nodeType === 1 && parent.dataset.scrollselectors;
                            if (scrollSelectors) {
                                var selectors = scrollSelectors.split(',');
                                var _iterator2 = _createForOfIteratorHelper$1(selectors), _step2;
                                try {
                                    for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
                                        var selector = _step2.value;
                                        var el = this.findSingle(parent, selector);
                                        if (el && overflowCheck(el)) {
                                            addScrollableParent(el);
                                        }
                                    }
                                } catch (err) {
                                    _iterator2.e(err);
                                } finally{
                                    _iterator2.f();
                                }
                            }
                            // BODY
                            if (parent.nodeType === 1 && overflowCheck(parent)) {
                                addScrollableParent(parent);
                            }
                        }
                    } catch (err) {
                        _iterator.e(err);
                    } finally{
                        _iterator.f();
                    }
                }
                // we should always at least have the body or window
                if (!scrollableParents.some(function(node) {
                    return node === document.body || node === window;
                })) {
                    scrollableParents.push(window);
                }
                return scrollableParents;
            }
        },
        {
            key: "getHiddenElementOuterHeight",
            value: function getHiddenElementOuterHeight(element) {
                if (element) {
                    element.style.visibility = 'hidden';
                    element.style.display = 'block';
                    var elementHeight = element.offsetHeight;
                    element.style.display = 'none';
                    element.style.visibility = 'visible';
                    return elementHeight;
                }
                return 0;
            }
        },
        {
            key: "getHiddenElementOuterWidth",
            value: function getHiddenElementOuterWidth(element) {
                if (element) {
                    element.style.visibility = 'hidden';
                    element.style.display = 'block';
                    var elementWidth = element.offsetWidth;
                    element.style.display = 'none';
                    element.style.visibility = 'visible';
                    return elementWidth;
                }
                return 0;
            }
        },
        {
            key: "getHiddenElementDimensions",
            value: function getHiddenElementDimensions(element) {
                var dimensions = {};
                if (element) {
                    element.style.visibility = 'hidden';
                    element.style.display = 'block';
                    dimensions.width = element.offsetWidth;
                    dimensions.height = element.offsetHeight;
                    element.style.display = 'none';
                    element.style.visibility = 'visible';
                }
                return dimensions;
            }
        },
        {
            key: "fadeIn",
            value: function fadeIn(element, duration) {
                if (element) {
                    element.style.opacity = 0;
                    var last = +new Date();
                    var opacity = 0;
                    var _tick = function tick() {
                        opacity = +element.style.opacity + (new Date().getTime() - last) / duration;
                        element.style.opacity = opacity;
                        last = +new Date();
                        if (+opacity < 1) {
                            window.requestAnimationFrame && requestAnimationFrame(_tick) || setTimeout(_tick, 16);
                        }
                    };
                    _tick();
                }
            }
        },
        {
            key: "fadeOut",
            value: function fadeOut(element, duration) {
                if (element) {
                    var opacity = 1;
                    var interval = 50;
                    var gap = interval / duration;
                    var fading = setInterval(function() {
                        opacity = opacity - gap;
                        if (opacity <= 0) {
                            opacity = 0;
                            clearInterval(fading);
                        }
                        element.style.opacity = opacity;
                    }, interval);
                }
            }
        },
        {
            key: "getUserAgent",
            value: function getUserAgent() {
                return navigator.userAgent;
            }
        },
        {
            key: "isIOS",
            value: function isIOS() {
                return /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
            }
        },
        {
            key: "isAndroid",
            value: function isAndroid() {
                return /(android)/i.test(navigator.userAgent);
            }
        },
        {
            key: "isChrome",
            value: function isChrome() {
                return /(chrome)/i.test(navigator.userAgent);
            }
        },
        {
            key: "isClient",
            value: function isClient() {
                return !!(typeof window !== 'undefined' && window.document && window.document.createElement);
            }
        },
        {
            key: "isTouchDevice",
            value: function isTouchDevice() {
                return 'ontouchstart' in window || navigator.maxTouchPoints > 0 || navigator.msMaxTouchPoints > 0;
            }
        },
        {
            key: "isFunction",
            value: function isFunction(obj) {
                return !!(obj && obj.constructor && obj.call && obj.apply);
            }
        },
        {
            key: "appendChild",
            value: function appendChild(element, target) {
                if (this.isElement(target)) {
                    target.appendChild(element);
                } else if (target.el && target.el.nativeElement) {
                    target.el.nativeElement.appendChild(element);
                } else {
                    throw new Error('Cannot append ' + target + ' to ' + element);
                }
            }
        },
        {
            key: "removeChild",
            value: function removeChild(element, target) {
                if (this.isElement(target)) {
                    target.removeChild(element);
                } else if (target.el && target.el.nativeElement) {
                    target.el.nativeElement.removeChild(element);
                } else {
                    throw new Error('Cannot remove ' + element + ' from ' + target);
                }
            }
        },
        {
            key: "isElement",
            value: function isElement(obj) {
                return (typeof HTMLElement === "undefined" ? "undefined" : _typeof(HTMLElement)) === 'object' ? obj instanceof HTMLElement : obj && _typeof(obj) === 'object' && obj !== null && obj.nodeType === 1 && typeof obj.nodeName === 'string';
            }
        },
        {
            key: "scrollInView",
            value: function scrollInView(container, item) {
                var borderTopValue = getComputedStyle(container).getPropertyValue('border-top-width');
                var borderTop = borderTopValue ? parseFloat(borderTopValue) : 0;
                var paddingTopValue = getComputedStyle(container).getPropertyValue('padding-top');
                var paddingTop = paddingTopValue ? parseFloat(paddingTopValue) : 0;
                var containerRect = container.getBoundingClientRect();
                var itemRect = item.getBoundingClientRect();
                var offset = itemRect.top + document.body.scrollTop - (containerRect.top + document.body.scrollTop) - borderTop - paddingTop;
                var scroll = container.scrollTop;
                var elementHeight = container.clientHeight;
                var itemHeight = this.getOuterHeight(item);
                if (offset < 0) {
                    container.scrollTop = scroll + offset;
                } else if (offset + itemHeight > elementHeight) {
                    container.scrollTop = scroll + offset - elementHeight + itemHeight;
                }
            }
        },
        {
            key: "clearSelection",
            value: function clearSelection() {
                if (window.getSelection) {
                    if (window.getSelection().empty) {
                        window.getSelection().empty();
                    } else if (window.getSelection().removeAllRanges && window.getSelection().rangeCount > 0 && window.getSelection().getRangeAt(0).getClientRects().length > 0) {
                        window.getSelection().removeAllRanges();
                    }
                } else if (document.selection && document.selection.empty) {
                    try {
                        document.selection.empty();
                    } catch (error) {
                    //ignore IE bug
                    }
                }
            }
        },
        {
            key: "calculateScrollbarWidth",
            value: function calculateScrollbarWidth(el) {
                if (el) {
                    var style = getComputedStyle(el);
                    return el.offsetWidth - el.clientWidth - parseFloat(style.borderLeftWidth) - parseFloat(style.borderRightWidth);
                }
                if (this.calculatedScrollbarWidth != null) {
                    return this.calculatedScrollbarWidth;
                }
                var scrollDiv = document.createElement('div');
                scrollDiv.className = 'p-scrollbar-measure';
                document.body.appendChild(scrollDiv);
                var scrollbarWidth = scrollDiv.offsetWidth - scrollDiv.clientWidth;
                document.body.removeChild(scrollDiv);
                this.calculatedScrollbarWidth = scrollbarWidth;
                return scrollbarWidth;
            }
        },
        {
            key: "calculateBodyScrollbarWidth",
            value: function calculateBodyScrollbarWidth() {
                return window.innerWidth - document.documentElement.offsetWidth;
            }
        },
        {
            key: "getBrowser",
            value: function getBrowser() {
                if (!this.browser) {
                    var matched = this.resolveUserAgent();
                    this.browser = {};
                    if (matched.browser) {
                        this.browser[matched.browser] = true;
                        this.browser.version = matched.version;
                    }
                    if (this.browser.chrome) {
                        this.browser.webkit = true;
                    } else if (this.browser.webkit) {
                        this.browser.safari = true;
                    }
                }
                return this.browser;
            }
        },
        {
            key: "resolveUserAgent",
            value: function resolveUserAgent() {
                var ua = navigator.userAgent.toLowerCase();
                var match = /(chrome)[ ]([\w.]+)/.exec(ua) || /(webkit)[ ]([\w.]+)/.exec(ua) || /(opera)(?:.*version|)[ ]([\w.]+)/.exec(ua) || /(msie) ([\w.]+)/.exec(ua) || ua.indexOf('compatible') < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec(ua) || [];
                return {
                    browser: match[1] || '',
                    version: match[2] || '0'
                };
            }
        },
        {
            key: "blockBodyScroll",
            value: function blockBodyScroll() {
                var className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'p-overflow-hidden';
                /* PR Ref: https://github.com/primefaces/primereact/pull/4976
       * @todo This method is called several times after this PR. Refactors will be made to prevent this in future releases.
       */ var hasScrollbarWidth = !!document.body.style.getPropertyValue('--scrollbar-width');
                !hasScrollbarWidth && document.body.style.setProperty('--scrollbar-width', this.calculateBodyScrollbarWidth() + 'px');
                this.addClass(document.body, className);
            }
        },
        {
            key: "unblockBodyScroll",
            value: function unblockBodyScroll() {
                var className = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'p-overflow-hidden';
                document.body.style.removeProperty('--scrollbar-width');
                this.removeClass(document.body, className);
            }
        },
        {
            key: "isVisible",
            value: function isVisible(element) {
                // https://stackoverflow.com/a/59096915/502366 (in future use IntersectionObserver)
                return element && (element.clientHeight !== 0 || element.getClientRects().length !== 0 || getComputedStyle(element).display !== 'none');
            }
        },
        {
            key: "isExist",
            value: function isExist(element) {
                return !!(element !== null && typeof element !== 'undefined' && element.nodeName && element.parentNode);
            }
        },
        {
            key: "getFocusableElements",
            value: function getFocusableElements(element) {
                var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
                var focusableElements = DomHandler.find(element, "button:not([tabindex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden])".concat(selector, ",\n                [href][clientHeight][clientWidth]:not([tabindex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden])").concat(selector, ",\n                input:not([tabindex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden])").concat(selector, ",\n                select:not([tabindex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden])").concat(selector, ",\n                textarea:not([tabindex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden])").concat(selector, ",\n                [tabIndex]:not([tabIndex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden])").concat(selector, ",\n                [contenteditable]:not([tabIndex = \"-1\"]):not([disabled]):not([style*=\"display:none\"]):not([hidden])").concat(selector));
                var visibleFocusableElements = [];
                var _iterator3 = _createForOfIteratorHelper$1(focusableElements), _step3;
                try {
                    for(_iterator3.s(); !(_step3 = _iterator3.n()).done;){
                        var focusableElement = _step3.value;
                        if (getComputedStyle(focusableElement).display !== 'none' && getComputedStyle(focusableElement).visibility !== 'hidden') {
                            visibleFocusableElements.push(focusableElement);
                        }
                    }
                } catch (err) {
                    _iterator3.e(err);
                } finally{
                    _iterator3.f();
                }
                return visibleFocusableElements;
            }
        },
        {
            key: "getFirstFocusableElement",
            value: function getFirstFocusableElement(element, selector) {
                var focusableElements = DomHandler.getFocusableElements(element, selector);
                return focusableElements.length > 0 ? focusableElements[0] : null;
            }
        },
        {
            key: "getLastFocusableElement",
            value: function getLastFocusableElement(element, selector) {
                var focusableElements = DomHandler.getFocusableElements(element, selector);
                return focusableElements.length > 0 ? focusableElements[focusableElements.length - 1] : null;
            }
        },
        {
            key: "focus",
            value: function focus(el, scrollTo) {
                var preventScroll = scrollTo === undefined ? true : !scrollTo;
                el && document.activeElement !== el && el.focus({
                    preventScroll: preventScroll
                });
            }
        },
        {
            key: "focusFirstElement",
            value: function focusFirstElement(el, scrollTo) {
                if (!el) {
                    return;
                }
                var firstFocusableElement = DomHandler.getFirstFocusableElement(el);
                firstFocusableElement && DomHandler.focus(firstFocusableElement, scrollTo);
                return firstFocusableElement;
            }
        },
        {
            key: "getCursorOffset",
            value: function getCursorOffset(el, prevText, nextText, currentText) {
                if (el) {
                    var style = getComputedStyle(el);
                    var ghostDiv = document.createElement('div');
                    ghostDiv.style.position = 'absolute';
                    ghostDiv.style.top = '0px';
                    ghostDiv.style.left = '0px';
                    ghostDiv.style.visibility = 'hidden';
                    ghostDiv.style.pointerEvents = 'none';
                    ghostDiv.style.overflow = style.overflow;
                    ghostDiv.style.width = style.width;
                    ghostDiv.style.height = style.height;
                    ghostDiv.style.padding = style.padding;
                    ghostDiv.style.border = style.border;
                    ghostDiv.style.overflowWrap = style.overflowWrap;
                    ghostDiv.style.whiteSpace = style.whiteSpace;
                    ghostDiv.style.lineHeight = style.lineHeight;
                    ghostDiv.innerHTML = prevText.replace(/\r\n|\r|\n/g, '<br />');
                    var ghostSpan = document.createElement('span');
                    ghostSpan.textContent = currentText;
                    ghostDiv.appendChild(ghostSpan);
                    var text = document.createTextNode(nextText);
                    ghostDiv.appendChild(text);
                    document.body.appendChild(ghostDiv);
                    var offsetLeft = ghostSpan.offsetLeft, offsetTop = ghostSpan.offsetTop, clientHeight = ghostSpan.clientHeight;
                    document.body.removeChild(ghostDiv);
                    return {
                        left: Math.abs(offsetLeft - el.scrollLeft),
                        top: Math.abs(offsetTop - el.scrollTop) + clientHeight
                    };
                }
                return {
                    top: 'auto',
                    left: 'auto'
                };
            }
        },
        {
            key: "invokeElementMethod",
            value: function invokeElementMethod(element, methodName, args) {
                element[methodName].apply(element, args);
            }
        },
        {
            key: "isClickable",
            value: function isClickable(element) {
                var targetNode = element.nodeName;
                var parentNode = element.parentElement && element.parentElement.nodeName;
                return targetNode === 'INPUT' || targetNode === 'TEXTAREA' || targetNode === 'BUTTON' || targetNode === 'A' || parentNode === 'INPUT' || parentNode === 'TEXTAREA' || parentNode === 'BUTTON' || parentNode === 'A' || this.hasClass(element, 'p-button') || this.hasClass(element.parentElement, 'p-button') || this.hasClass(element.parentElement, 'p-checkbox') || this.hasClass(element.parentElement, 'p-radiobutton');
            }
        },
        {
            key: "applyStyle",
            value: function applyStyle(element, style) {
                if (typeof style === 'string') {
                    element.style.cssText = style;
                } else {
                    for(var prop in style){
                        element.style[prop] = style[prop];
                    }
                }
            }
        },
        {
            key: "exportCSV",
            value: function exportCSV(csv, filename) {
                var blob = new Blob([
                    csv
                ], {
                    type: 'application/csv;charset=utf-8;'
                });
                if (window.navigator.msSaveOrOpenBlob) {
                    navigator.msSaveOrOpenBlob(blob, filename + '.csv');
                } else {
                    var isDownloaded = DomHandler.saveAs({
                        name: filename + '.csv',
                        src: URL.createObjectURL(blob)
                    });
                    if (!isDownloaded) {
                        csv = 'data:text/csv;charset=utf-8,' + csv;
                        window.open(encodeURI(csv));
                    }
                }
            }
        },
        {
            key: "saveAs",
            value: function saveAs(file) {
                if (file) {
                    var link = document.createElement('a');
                    if (link.download !== undefined) {
                        var name = file.name, src = file.src;
                        link.setAttribute('href', src);
                        link.setAttribute('download', name);
                        link.style.display = 'none';
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);
                        return true;
                    }
                }
                return false;
            }
        },
        {
            key: "createInlineStyle",
            value: function createInlineStyle(nonce, styleContainer) {
                var styleElement = document.createElement('style');
                DomHandler.addNonce(styleElement, nonce);
                if (!styleContainer) {
                    styleContainer = document.head;
                }
                styleContainer.appendChild(styleElement);
                return styleElement;
            }
        },
        {
            key: "removeInlineStyle",
            value: function removeInlineStyle(styleElement) {
                if (this.isExist(styleElement)) {
                    try {
                        styleElement.parentNode.removeChild(styleElement);
                    } catch (error) {
                    // style element may have already been removed in a fast refresh
                    }
                    styleElement = null;
                }
                return styleElement;
            }
        },
        {
            key: "addNonce",
            value: function addNonce(styleElement, nonce) {
                try {
                    if (!nonce) {
                        nonce = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].env.REACT_APP_CSS_NONCE;
                    }
                } catch (error) {
                // NOOP
                }
                nonce && styleElement.setAttribute('nonce', nonce);
            }
        },
        {
            key: "getTargetElement",
            value: function getTargetElement(target) {
                if (!target) {
                    return null;
                }
                if (target === 'document') {
                    return document;
                } else if (target === 'window') {
                    return window;
                } else if (_typeof(target) === 'object' && target.hasOwnProperty('current')) {
                    return this.isExist(target.current) ? target.current : null;
                }
                var isFunction = function isFunction(obj) {
                    return !!(obj && obj.constructor && obj.call && obj.apply);
                };
                var element = isFunction(target) ? target() : target;
                return element && element.nodeType === 9 || this.isExist(element) ? element : null;
            }
        },
        {
            key: "getAttributeNames",
            value: function getAttributeNames(node) {
                var index;
                var rv;
                var attrs;
                rv = [];
                attrs = node.attributes;
                for(index = 0; index < attrs.length; ++index){
                    rv.push(attrs[index].nodeName);
                }
                rv.sort();
                return rv;
            }
        },
        {
            key: "isEqualElement",
            value: function isEqualElement(elm1, elm2) {
                var attrs1;
                var attrs2;
                var name;
                var node1;
                var node2;
                // Compare attributes without order sensitivity
                attrs1 = DomHandler.getAttributeNames(elm1);
                attrs2 = DomHandler.getAttributeNames(elm2);
                if (attrs1.join(',') !== attrs2.join(',')) {
                    // console.log("Found nodes with different sets of attributes; not equiv");
                    return false;
                }
                // ...and values
                // unless you want to compare DOM0 event handlers
                // (onclick="...")
                for(var index = 0; index < attrs1.length; ++index){
                    name = attrs1[index];
                    if (name === 'style') {
                        var astyle = elm1.style;
                        var bstyle = elm2.style;
                        var rexDigitsOnly = /^\d+$/;
                        for(var _i3 = 0, _Object$keys = Object.keys(astyle); _i3 < _Object$keys.length; _i3++){
                            var key = _Object$keys[_i3];
                            if (!rexDigitsOnly.test(key) && astyle[key] !== bstyle[key]) {
                                // Not equivalent, stop
                                //console.log("Found nodes with mis-matched values for attribute '" + name + "'; not equiv");
                                return false;
                            }
                        }
                    } else if (elm1.getAttribute(name) !== elm2.getAttribute(name)) {
                        // console.log("Found nodes with mis-matched values for attribute '" + name + "'; not equiv");
                        return false;
                    }
                }
                // Walk the children
                for(node1 = elm1.firstChild, node2 = elm2.firstChild; node1 && node2; node1 = node1.nextSibling, node2 = node2.nextSibling){
                    if (node1.nodeType !== node2.nodeType) {
                        // display("Found nodes of different types; not equiv");
                        return false;
                    }
                    if (node1.nodeType === 1) {
                        // Element
                        if (!DomHandler.isEqualElement(node1, node2)) {
                            return false;
                        }
                    } else if (node1.nodeValue !== node2.nodeValue) {
                        // console.log("Found nodes with mis-matched nodeValues; not equiv");
                        return false;
                    }
                }
                if (node1 || node2) {
                    // One of the elements had more nodes than the other
                    // console.log("Found more children of one element than the other; not equivalent");
                    return false;
                }
                // Seem the same
                return true;
            }
        },
        {
            key: "hasCSSAnimation",
            value: function hasCSSAnimation(element) {
                if (element) {
                    var style = getComputedStyle(element);
                    var animationDuration = parseFloat(style.getPropertyValue('animation-duration') || '0');
                    return animationDuration > 0;
                }
                return false;
            }
        },
        {
            key: "hasCSSTransition",
            value: function hasCSSTransition(element) {
                if (element) {
                    var style = getComputedStyle(element);
                    var transitionDuration = parseFloat(style.getPropertyValue('transition-duration') || '0');
                    return transitionDuration > 0;
                }
                return false;
            }
        }
    ]);
}();
/**
 * All data- properties like data-test-id
 */ _defineProperty(DomHandler, "DATA_PROPS", [
    'data-'
]);
/**
 * All ARIA properties like aria-label and focus-target for https://www.npmjs.com/package/@q42/floating-focus-a11y
 */ _defineProperty(DomHandler, "ARIA_PROPS", [
    'aria',
    'focus-target'
]);
function EventBus() {
    var allHandlers = new Map();
    return {
        on: function on(type, handler) {
            var handlers = allHandlers.get(type);
            if (!handlers) {
                handlers = [
                    handler
                ];
            } else {
                handlers.push(handler);
            }
            allHandlers.set(type, handlers);
        },
        off: function off(type, handler) {
            var handlers = allHandlers.get(type);
            handlers && handlers.splice(handlers.indexOf(handler) >>> 0, 1);
        },
        emit: function emit(type, evt) {
            var handlers = allHandlers.get(type);
            handlers && handlers.slice().forEach(function(handler) {
                return handler(evt);
            });
        }
    };
}
function _extends() {
    _extends = ("TURBOPACK compile-time truthy", 1) ? Object.assign.bind() : ("TURBOPACK unreachable", undefined);
    return _extends.apply(this, arguments);
}
function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F() {};
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
        s: function s() {
            it = it.call(o);
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it["return"] != null) it["return"]();
            } finally{
                if (didErr) throw err;
            }
        }
    };
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
var ObjectUtils = /*#__PURE__*/ function() {
    function ObjectUtils() {
        _classCallCheck(this, ObjectUtils);
    }
    return _createClass(ObjectUtils, null, [
        {
            key: "equals",
            value: function equals(obj1, obj2, field) {
                if (field && obj1 && _typeof(obj1) === 'object' && obj2 && _typeof(obj2) === 'object') {
                    return this.deepEquals(this.resolveFieldData(obj1, field), this.resolveFieldData(obj2, field));
                }
                return this.deepEquals(obj1, obj2);
            }
        },
        {
            key: "deepEquals",
            value: function deepEquals(a, b) {
                if (a === b) {
                    return true;
                }
                if (a && b && _typeof(a) === 'object' && _typeof(b) === 'object') {
                    var arrA = Array.isArray(a);
                    var arrB = Array.isArray(b);
                    var i;
                    var length;
                    var key;
                    if (arrA && arrB) {
                        length = a.length;
                        if (length !== b.length) {
                            return false;
                        }
                        for(i = length; i-- !== 0;){
                            if (!this.deepEquals(a[i], b[i])) {
                                return false;
                            }
                        }
                        return true;
                    }
                    if (arrA !== arrB) {
                        return false;
                    }
                    var dateA = a instanceof Date;
                    var dateB = b instanceof Date;
                    if (dateA !== dateB) {
                        return false;
                    }
                    if (dateA && dateB) {
                        return a.getTime() === b.getTime();
                    }
                    var regexpA = a instanceof RegExp;
                    var regexpB = b instanceof RegExp;
                    if (regexpA !== regexpB) {
                        return false;
                    }
                    if (regexpA && regexpB) {
                        return a.toString() === b.toString();
                    }
                    var keys = Object.keys(a);
                    length = keys.length;
                    if (length !== Object.keys(b).length) {
                        return false;
                    }
                    for(i = length; i-- !== 0;){
                        if (!Object.prototype.hasOwnProperty.call(b, keys[i])) {
                            return false;
                        }
                    }
                    for(i = length; i-- !== 0;){
                        key = keys[i];
                        if (!this.deepEquals(a[key], b[key])) {
                            return false;
                        }
                    }
                    return true;
                }
                /*eslint no-self-compare: "off"*/ return a !== a && b !== b;
            }
        },
        {
            key: "resolveFieldData",
            value: function resolveFieldData(data, field) {
                if (!data || !field) {
                    // short circuit if there is nothing to resolve
                    return null;
                }
                try {
                    var value = data[field];
                    if (this.isNotEmpty(value)) {
                        return value;
                    }
                } catch (_unused) {
                // Performance optimization: https://github.com/primefaces/primereact/issues/4797
                // do nothing and continue to other methods to resolve field data
                }
                if (Object.keys(data).length) {
                    if (this.isFunction(field)) {
                        return field(data);
                    } else if (this.isNotEmpty(data[field])) {
                        return data[field];
                    } else if (field.indexOf('.') === -1) {
                        return data[field];
                    }
                    var fields = field.split('.');
                    var _value = data;
                    for(var i = 0, len = fields.length; i < len; ++i){
                        if (_value == null) {
                            return null;
                        }
                        _value = _value[fields[i]];
                    }
                    return _value;
                }
                return null;
            }
        },
        {
            key: "findDiffKeys",
            value: function findDiffKeys(obj1, obj2) {
                if (!obj1 || !obj2) {
                    return {};
                }
                return Object.keys(obj1).filter(function(key) {
                    return !obj2.hasOwnProperty(key);
                }).reduce(function(result, current) {
                    result[current] = obj1[current];
                    return result;
                }, {});
            }
        },
        {
            key: "reduceKeys",
            value: function reduceKeys(obj, startsWiths) {
                var result = {};
                if (!obj || !startsWiths || startsWiths.length === 0) {
                    return result;
                }
                Object.keys(obj).filter(function(key) {
                    return startsWiths.some(function(value) {
                        return key.startsWith(value);
                    });
                }).forEach(function(key) {
                    result[key] = obj[key];
                    delete obj[key];
                });
                return result;
            }
        },
        {
            key: "reorderArray",
            value: function reorderArray(value, from, to) {
                if (value && from !== to) {
                    if (to >= value.length) {
                        to = to % value.length;
                        from = from % value.length;
                    }
                    value.splice(to, 0, value.splice(from, 1)[0]);
                }
            }
        },
        {
            key: "findIndexInList",
            value: function findIndexInList(value, list, dataKey) {
                var _this = this;
                if (list) {
                    return dataKey ? list.findIndex(function(item) {
                        return _this.equals(item, value, dataKey);
                    }) : list.findIndex(function(item) {
                        return item === value;
                    });
                }
                return -1;
            }
        },
        {
            key: "getJSXElement",
            value: function getJSXElement(obj) {
                for(var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){
                    params[_key - 1] = arguments[_key];
                }
                return this.isFunction(obj) ? obj.apply(void 0, params) : obj;
            }
        },
        {
            key: "getItemValue",
            value: function getItemValue(obj) {
                for(var _len2 = arguments.length, params = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++){
                    params[_key2 - 1] = arguments[_key2];
                }
                return this.isFunction(obj) ? obj.apply(void 0, params) : obj;
            }
        },
        {
            key: "getProp",
            value: function getProp(props) {
                var prop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
                var defaultProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                var value = props ? props[prop] : undefined;
                return value === undefined ? defaultProps[prop] : value;
            }
        },
        {
            key: "getPropCaseInsensitive",
            value: function getPropCaseInsensitive(props, prop) {
                var defaultProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                var fkey = this.toFlatCase(prop);
                for(var key in props){
                    if (props.hasOwnProperty(key) && this.toFlatCase(key) === fkey) {
                        return props[key];
                    }
                }
                for(var _key3 in defaultProps){
                    if (defaultProps.hasOwnProperty(_key3) && this.toFlatCase(_key3) === fkey) {
                        return defaultProps[_key3];
                    }
                }
                return undefined; // Property not found
            }
        },
        {
            key: "getMergedProps",
            value: function getMergedProps(props, defaultProps) {
                return Object.assign({}, defaultProps, props);
            }
        },
        {
            key: "getDiffProps",
            value: function getDiffProps(props, defaultProps) {
                return this.findDiffKeys(props, defaultProps);
            }
        },
        {
            key: "getPropValue",
            value: function getPropValue(obj) {
                for(var _len3 = arguments.length, params = new Array(_len3 > 1 ? _len3 - 1 : 0), _key4 = 1; _key4 < _len3; _key4++){
                    params[_key4 - 1] = arguments[_key4];
                }
                return this.isFunction(obj) ? obj.apply(void 0, params) : obj;
            }
        },
        {
            key: "getComponentProp",
            value: function getComponentProp(component) {
                var prop = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
                var defaultProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                return this.isNotEmpty(component) ? this.getProp(component.props, prop, defaultProps) : undefined;
            }
        },
        {
            key: "getComponentProps",
            value: function getComponentProps(component, defaultProps) {
                return this.isNotEmpty(component) ? this.getMergedProps(component.props, defaultProps) : undefined;
            }
        },
        {
            key: "getComponentDiffProps",
            value: function getComponentDiffProps(component, defaultProps) {
                return this.isNotEmpty(component) ? this.getDiffProps(component.props, defaultProps) : undefined;
            }
        },
        {
            key: "isValidChild",
            value: function isValidChild(child, type, validTypes) {
                /* eslint-disable */ if (child) {
                    var _child$type;
                    var childType = this.getComponentProp(child, '__TYPE') || (child.type ? child.type.displayName : undefined);
                    // for App Router in Next.js ^14,
                    if (!childType && child !== null && child !== void 0 && (_child$type = child.type) !== null && _child$type !== void 0 && (_child$type = _child$type._payload) !== null && _child$type !== void 0 && _child$type.value) {
                        childType = child.type._payload.value.find(function(v) {
                            return v === type;
                        });
                    }
                    var isValid = childType === type;
                    try {
                        var messageTypes;
                        if ("production" !== 'production' && !isValid) ;
                    } catch (error) {
                    // NOOP
                    }
                    return isValid;
                }
                return false;
            /* eslint-enable */ }
        },
        {
            key: "getRefElement",
            value: function getRefElement(ref) {
                if (ref) {
                    return _typeof(ref) === 'object' && ref.hasOwnProperty('current') ? ref.current : ref;
                }
                return null;
            }
        },
        {
            key: "combinedRefs",
            value: function combinedRefs(innerRef, forwardRef) {
                if (innerRef && forwardRef) {
                    if (typeof forwardRef === 'function') {
                        forwardRef(innerRef.current);
                    } else {
                        forwardRef.current = innerRef.current;
                    }
                }
            }
        },
        {
            key: "removeAccents",
            value: function removeAccents(str) {
                if (str && str.search(/[\xC0-\xFF]/g) > -1) {
                    str = str.replace(/[\xC0-\xC5]/g, 'A').replace(/[\xC6]/g, 'AE').replace(/[\xC7]/g, 'C').replace(/[\xC8-\xCB]/g, 'E').replace(/[\xCC-\xCF]/g, 'I').replace(/[\xD0]/g, 'D').replace(/[\xD1]/g, 'N').replace(/[\xD2-\xD6\xD8]/g, 'O').replace(/[\xD9-\xDC]/g, 'U').replace(/[\xDD]/g, 'Y').replace(/[\xDE]/g, 'P').replace(/[\xE0-\xE5]/g, 'a').replace(/[\xE6]/g, 'ae').replace(/[\xE7]/g, 'c').replace(/[\xE8-\xEB]/g, 'e').replace(/[\xEC-\xEF]/g, 'i').replace(/[\xF1]/g, 'n').replace(/[\xF2-\xF6\xF8]/g, 'o').replace(/[\xF9-\xFC]/g, 'u').replace(/[\xFE]/g, 'p').replace(/[\xFD\xFF]/g, 'y');
                }
                return str;
            }
        },
        {
            key: "toFlatCase",
            value: function toFlatCase(str) {
                // convert snake, kebab, camel and pascal cases to flat case
                return this.isNotEmpty(str) && this.isString(str) ? str.replace(/(-|_)/g, '').toLowerCase() : str;
            }
        },
        {
            key: "toCapitalCase",
            value: function toCapitalCase(str) {
                return this.isNotEmpty(str) && this.isString(str) ? str[0].toUpperCase() + str.slice(1) : str;
            }
        },
        {
            key: "trim",
            value: function trim(value) {
                // trim only if the value is actually a string
                return this.isNotEmpty(value) && this.isString(value) ? value.trim() : value;
            }
        },
        {
            key: "isEmpty",
            value: function isEmpty(value) {
                return value === null || value === undefined || value === '' || Array.isArray(value) && value.length === 0 || !(value instanceof Date) && _typeof(value) === 'object' && Object.keys(value).length === 0;
            }
        },
        {
            key: "isNotEmpty",
            value: function isNotEmpty(value) {
                return !this.isEmpty(value);
            }
        },
        {
            key: "isFunction",
            value: function isFunction(value) {
                return !!(value && value.constructor && value.call && value.apply);
            }
        },
        {
            key: "isObject",
            value: function isObject(value) {
                return value !== null && value instanceof Object && value.constructor === Object;
            }
        },
        {
            key: "isDate",
            value: function isDate(value) {
                return value !== null && value instanceof Date && value.constructor === Date;
            }
        },
        {
            key: "isArray",
            value: function isArray(value) {
                return value !== null && Array.isArray(value);
            }
        },
        {
            key: "isString",
            value: function isString(value) {
                return value !== null && typeof value === 'string';
            }
        },
        {
            key: "isPrintableCharacter",
            value: function isPrintableCharacter() {
                var _char = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
                return this.isNotEmpty(_char) && _char.length === 1 && _char.match(/\S| /);
            }
        },
        {
            key: "isLetter",
            value: function isLetter(_char2) {
                return /^[a-zA-Z\u00C0-\u017F]$/.test(_char2);
            }
        },
        {
            key: "isScalar",
            value: function isScalar(value) {
                return value != null && (typeof value === 'string' || typeof value === 'number' || typeof value === 'bigint' || typeof value === 'boolean');
            }
        },
        {
            key: "findLast",
            value: function findLast(arr, callback) {
                var item;
                if (this.isNotEmpty(arr)) {
                    try {
                        item = arr.findLast(callback);
                    } catch (_unused2) {
                        item = _toConsumableArray(arr).reverse().find(callback);
                    }
                }
                return item;
            }
        },
        {
            key: "findLastIndex",
            value: function findLastIndex(arr, callback) {
                var index = -1;
                if (this.isNotEmpty(arr)) {
                    try {
                        index = arr.findLastIndex(callback);
                    } catch (_unused3) {
                        index = arr.lastIndexOf(_toConsumableArray(arr).reverse().find(callback));
                    }
                }
                return index;
            }
        },
        {
            key: "sort",
            value: function sort(value1, value2) {
                var order = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 1;
                var comparator = arguments.length > 3 ? arguments[3] : undefined;
                var nullSortOrder = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;
                var result = this.compare(value1, value2, comparator, order);
                var finalSortOrder = order;
                // nullSortOrder == 1 means Excel like sort nulls at bottom
                if (this.isEmpty(value1) || this.isEmpty(value2)) {
                    finalSortOrder = nullSortOrder === 1 ? order : nullSortOrder;
                }
                return finalSortOrder * result;
            }
        },
        {
            key: "compare",
            value: function compare(value1, value2, comparator) {
                var order = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 1;
                var result = -1;
                var emptyValue1 = this.isEmpty(value1);
                var emptyValue2 = this.isEmpty(value2);
                if (emptyValue1 && emptyValue2) {
                    result = 0;
                } else if (emptyValue1) {
                    result = order;
                } else if (emptyValue2) {
                    result = -order;
                } else if (typeof value1 === 'string' && typeof value2 === 'string') {
                    result = comparator(value1, value2);
                } else {
                    result = value1 < value2 ? -1 : value1 > value2 ? 1 : 0;
                }
                return result;
            }
        },
        {
            key: "localeComparator",
            value: function localeComparator(locale) {
                //performance gain using Int.Collator. It is not recommended to use localeCompare against large arrays.
                return new Intl.Collator(locale, {
                    numeric: true
                }).compare;
            }
        },
        {
            key: "findChildrenByKey",
            value: function findChildrenByKey(data, key) {
                var _iterator = _createForOfIteratorHelper(data), _step;
                try {
                    for(_iterator.s(); !(_step = _iterator.n()).done;){
                        var item = _step.value;
                        if (item.key === key) {
                            return item.children || [];
                        } else if (item.children) {
                            var result = this.findChildrenByKey(item.children, key);
                            if (result.length > 0) {
                                return result;
                            }
                        }
                    }
                } catch (err) {
                    _iterator.e(err);
                } finally{
                    _iterator.f();
                }
                return [];
            }
        },
        {
            key: "mutateFieldData",
            value: function mutateFieldData(data, field, value) {
                if (_typeof(data) !== 'object' || typeof field !== 'string') {
                    // short circuit if there is nothing to resolve
                    return;
                }
                var fields = field.split('.');
                var obj = data;
                for(var i = 0, len = fields.length; i < len; ++i){
                    // Check if we are on the last field
                    if (i + 1 - len === 0) {
                        obj[fields[i]] = value;
                        break;
                    }
                    if (!obj[fields[i]]) {
                        obj[fields[i]] = {};
                    }
                    obj = obj[fields[i]];
                }
            }
        }
    ]);
}();
var lastId = 0;
function UniqueComponentId() {
    var prefix = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'pr_id_';
    lastId++;
    return "".concat(prefix).concat(lastId);
}
function ownKeys$2(e, r) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e);
        r && (o = o.filter(function(r) {
            return Object.getOwnPropertyDescriptor(e, r).enumerable;
        })), t.push.apply(t, o);
    }
    return t;
}
function _objectSpread$2(e) {
    for(var r = 1; r < arguments.length; r++){
        var t = null != arguments[r] ? arguments[r] : {};
        r % 2 ? ownKeys$2(Object(t), !0).forEach(function(r) {
            _defineProperty(e, r, t[r]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$2(Object(t)).forEach(function(r) {
            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
        });
    }
    return e;
}
var IconUtils = /*#__PURE__*/ function() {
    function IconUtils() {
        _classCallCheck(this, IconUtils);
    }
    return _createClass(IconUtils, null, [
        {
            key: "getJSXIcon",
            value: function getJSXIcon(icon) {
                var iconProps = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
                var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
                var content = null;
                if (icon !== null) {
                    var iconType = _typeof(icon);
                    var className = classNames(iconProps.className, iconType === 'string' && icon);
                    content = /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__.createElement("span", _extends({}, iconProps, {
                        className: className,
                        key: UniqueComponentId('icon')
                    }));
                    if (iconType !== 'string') {
                        var defaultContentOptions = _objectSpread$2({
                            iconProps: iconProps,
                            element: content
                        }, options);
                        return ObjectUtils.getJSXElement(icon, defaultContentOptions);
                    }
                }
                return content;
            }
        }
    ]);
}();
function ownKeys$1(e, r) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e);
        r && (o = o.filter(function(r) {
            return Object.getOwnPropertyDescriptor(e, r).enumerable;
        })), t.push.apply(t, o);
    }
    return t;
}
function _objectSpread$1(e) {
    for(var r = 1; r < arguments.length; r++){
        var t = null != arguments[r] ? arguments[r] : {};
        r % 2 ? ownKeys$1(Object(t), !0).forEach(function(r) {
            _defineProperty(e, r, t[r]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function(r) {
            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
        });
    }
    return e;
}
function mask(el, options) {
    var defaultOptions = {
        mask: null,
        slotChar: '_',
        autoClear: true,
        unmask: false,
        readOnly: false,
        onComplete: null,
        onChange: null,
        onFocus: null,
        onBlur: null
    };
    options = _objectSpread$1(_objectSpread$1({}, defaultOptions), options);
    var tests;
    var partialPosition;
    var len;
    var firstNonMaskPos;
    var defs;
    var androidChrome;
    var lastRequiredNonMaskPos;
    var oldVal;
    var focusText;
    var caretTimeoutId;
    var buffer;
    var defaultBuffer;
    var caret = function caret(first, last) {
        var range;
        var begin;
        var end;
        if (!el.offsetParent || el !== document.activeElement) {
            return;
        }
        if (typeof first === 'number') {
            begin = first;
            end = typeof last === 'number' ? last : begin;
            if (el.setSelectionRange) {
                el.setSelectionRange(begin, end);
            } else if (el.createTextRange) {
                range = el.createTextRange();
                range.collapse(true);
                range.moveEnd('character', end);
                range.moveStart('character', begin);
                range.select();
            }
        } else {
            if (el.setSelectionRange) {
                begin = el.selectionStart;
                end = el.selectionEnd;
            } else if (document.selection && document.selection.createRange) {
                range = document.selection.createRange();
                begin = 0 - range.duplicate().moveStart('character', -100000);
                end = begin + range.text.length;
            }
            return {
                begin: begin,
                end: end
            };
        }
    };
    var isCompleted = function isCompleted() {
        for(var i = firstNonMaskPos; i <= lastRequiredNonMaskPos; i++){
            if (tests[i] && buffer[i] === getPlaceholder(i)) {
                return false;
            }
        }
        return true;
    };
    var getPlaceholder = function getPlaceholder(i) {
        if (i < options.slotChar.length) {
            return options.slotChar.charAt(i);
        }
        return options.slotChar.charAt(0);
    };
    var getValue = function getValue() {
        return options.unmask ? getUnmaskedValue() : el && el.value;
    };
    var seekNext = function seekNext(pos) {
        while(++pos < len && !tests[pos]){}
        return pos;
    };
    var seekPrev = function seekPrev(pos) {
        while(--pos >= 0 && !tests[pos]){}
        return pos;
    };
    var shiftL = function shiftL(begin, end) {
        var i;
        var j;
        if (begin < 0) {
            return;
        }
        for(i = begin, j = seekNext(end); i < len; i++){
            if (tests[i]) {
                if (j < len && tests[i].test(buffer[j])) {
                    buffer[i] = buffer[j];
                    buffer[j] = getPlaceholder(j);
                } else {
                    break;
                }
                j = seekNext(j);
            }
        }
        writeBuffer();
        caret(Math.max(firstNonMaskPos, begin));
    };
    var shiftR = function shiftR(pos) {
        var i;
        var c;
        var j;
        var t;
        for(i = pos, c = getPlaceholder(pos); i < len; i++){
            if (tests[i]) {
                j = seekNext(i);
                t = buffer[i];
                buffer[i] = c;
                if (j < len && tests[j].test(t)) {
                    c = t;
                } else {
                    break;
                }
            }
        }
    };
    var handleAndroidInput = function handleAndroidInput(e) {
        var curVal = el.value;
        var pos = caret();
        if (oldVal && oldVal.length && oldVal.length > curVal.length) {
            // a deletion or backspace happened
            checkVal(true);
            while(pos.begin > 0 && !tests[pos.begin - 1]){
                pos.begin--;
            }
            if (pos.begin === 0) {
                while(pos.begin < firstNonMaskPos && !tests[pos.begin]){
                    pos.begin++;
                }
            }
            caret(pos.begin, pos.begin);
        } else {
            checkVal(true);
            while(pos.begin < len && !tests[pos.begin]){
                pos.begin++;
            }
            caret(pos.begin, pos.begin);
        }
        if (options.onComplete && isCompleted()) {
            options.onComplete({
                originalEvent: e,
                value: getValue()
            });
        }
    };
    var onBlur = function onBlur(e) {
        checkVal();
        options.onBlur && options.onBlur(e);
        updateModel(e);
        if (el.value !== focusText) {
            var event = document.createEvent('HTMLEvents');
            event.initEvent('change', true, false);
            el.dispatchEvent(event);
        }
    };
    var onKeyDown = function onKeyDown(e) {
        if (options.readOnly) {
            return;
        }
        var k = e.which || e.keyCode;
        var pos;
        var begin;
        var end;
        oldVal = el.value;
        //backspace, delete, and escape get special treatment
        if (k === 8 || k === 46 || DomHandler.isIOS() && k === 127) {
            pos = caret();
            begin = pos.begin;
            end = pos.end;
            if (end - begin === 0) {
                begin = k !== 46 ? seekPrev(begin) : end = seekNext(begin - 1);
                end = k === 46 ? seekNext(end) : end;
            }
            clearBuffer(begin, end);
            shiftL(begin, end - 1);
            updateModel(e);
            e.preventDefault();
        } else if (k === 13) {
            // enter
            onBlur(e);
            updateModel(e);
        } else if (k === 27) {
            // escape
            el.value = focusText;
            caret(0, checkVal());
            updateModel(e);
            e.preventDefault();
        }
    };
    var onKeyPress = function onKeyPress(e) {
        if (options.readOnly) {
            return;
        }
        var k = e.which || e.keyCode;
        var pos = caret();
        var p;
        var c;
        var next;
        var completed;
        if (e.ctrlKey || e.altKey || e.metaKey || k < 32) {
            //Ignore
            return;
        } else if (k && k !== 13) {
            if (pos.end - pos.begin !== 0) {
                clearBuffer(pos.begin, pos.end);
                shiftL(pos.begin, pos.end - 1);
            }
            p = seekNext(pos.begin - 1);
            if (p < len) {
                c = String.fromCharCode(k);
                if (tests[p].test(c)) {
                    shiftR(p);
                    buffer[p] = c;
                    writeBuffer();
                    next = seekNext(p);
                    if (DomHandler.isAndroid()) {
                        //Path for CSP Violation on FireFox OS 1.1
                        var proxy = function proxy() {
                            caret(next);
                        };
                        setTimeout(proxy, 0);
                    } else {
                        caret(next);
                    }
                    if (pos.begin <= lastRequiredNonMaskPos) {
                        completed = isCompleted();
                    }
                }
            }
            e.preventDefault();
        }
        updateModel(e);
        if (options.onComplete && completed) {
            options.onComplete({
                originalEvent: e,
                value: getValue()
            });
        }
    };
    var clearBuffer = function clearBuffer(start, end) {
        var i;
        for(i = start; i < end && i < len; i++){
            if (tests[i]) {
                buffer[i] = getPlaceholder(i);
            }
        }
    };
    var writeBuffer = function writeBuffer() {
        el.value = buffer.join('');
    };
    var checkVal = function checkVal(allow) {
        //try to place characters where they belong
        var test = el.value;
        var lastMatch = -1;
        var i;
        var c;
        var pos;
        for(i = 0, pos = 0; i < len; i++){
            if (tests[i]) {
                buffer[i] = getPlaceholder(i);
                while(pos++ < test.length){
                    c = test.charAt(pos - 1);
                    if (tests[i].test(c)) {
                        buffer[i] = c;
                        lastMatch = i;
                        break;
                    }
                }
                if (pos > test.length) {
                    clearBuffer(i + 1, len);
                    break;
                }
            } else {
                if (buffer[i] === test.charAt(pos)) {
                    pos++;
                }
                if (i < partialPosition) {
                    lastMatch = i;
                }
            }
        }
        if (allow) {
            writeBuffer();
        } else if (lastMatch + 1 < partialPosition) {
            if (options.autoClear || buffer.join('') === defaultBuffer) {
                // Invalid value. Remove it and replace it with the
                // mask, which is the default behavior.
                if (el.value) {
                    el.value = '';
                }
                clearBuffer(0, len);
            } else {
                // Invalid value, but we opt to show the value to the
                // user and allow them to correct their mistake.
                writeBuffer();
            }
        } else {
            writeBuffer();
            el.value = el.value.substring(0, lastMatch + 1);
        }
        return partialPosition ? i : firstNonMaskPos;
    };
    var onFocus = function onFocus(e) {
        if (options.readOnly) {
            return;
        }
        clearTimeout(caretTimeoutId);
        var pos;
        focusText = el.value;
        pos = checkVal();
        caretTimeoutId = setTimeout(function() {
            if (el !== document.activeElement) {
                return;
            }
            writeBuffer();
            if (pos === options.mask.replace('?', '').length) {
                caret(0, pos);
            } else {
                caret(pos);
            }
        }, 100);
        if (options.onFocus) {
            options.onFocus(e);
        }
    };
    var onInput = function onInput(event) {
        if (androidChrome) {
            handleAndroidInput(event);
        } else {
            handleInputChange(event);
        }
    };
    var handleInputChange = function handleInputChange(e) {
        if (options.readOnly) {
            return;
        }
        var pos = checkVal(true);
        caret(pos);
        updateModel(e);
        if (options.onComplete && isCompleted()) {
            options.onComplete({
                originalEvent: e,
                value: getValue()
            });
        }
    };
    var getUnmaskedValue = function getUnmaskedValue() {
        var unmaskedBuffer = [];
        for(var i = 0; i < buffer.length; i++){
            var c = buffer[i];
            if (tests[i] && c !== getPlaceholder(i)) {
                unmaskedBuffer.push(c);
            }
        }
        return unmaskedBuffer.join('');
    };
    var updateModel = function updateModel(e) {
        if (options.onChange) {
            var val = getValue();
            options.onChange({
                originalEvent: e,
                value: defaultBuffer !== val ? val : '',
                stopPropagation: function stopPropagation() {
                    e.stopPropagation();
                },
                preventDefault: function preventDefault() {
                    e.preventDefault();
                },
                target: {
                    value: defaultBuffer !== val ? val : ''
                }
            });
        }
    };
    var bindEvents = function bindEvents() {
        el.addEventListener('focus', onFocus);
        el.addEventListener('blur', onBlur);
        el.addEventListener('keydown', onKeyDown);
        el.addEventListener('keypress', onKeyPress);
        el.addEventListener('input', onInput);
        el.addEventListener('paste', handleInputChange);
    };
    var unbindEvents = function unbindEvents() {
        el.removeEventListener('focus', onFocus);
        el.removeEventListener('blur', onBlur);
        el.removeEventListener('keydown', onKeyDown);
        el.removeEventListener('keypress', onKeyPress);
        el.removeEventListener('input', onInput);
        el.removeEventListener('paste', handleInputChange);
    };
    var init = function init() {
        tests = [];
        partialPosition = options.mask.length;
        len = options.mask.length;
        firstNonMaskPos = null;
        defs = {
            9: '[0-9]',
            a: '[A-Za-z]',
            '*': '[A-Za-z0-9]'
        };
        androidChrome = DomHandler.isChrome() && DomHandler.isAndroid();
        var maskTokens = options.mask.split('');
        for(var i = 0; i < maskTokens.length; i++){
            var c = maskTokens[i];
            if (c === '?') {
                len--;
                partialPosition = i;
            } else if (defs[c]) {
                tests.push(new RegExp(defs[c]));
                if (firstNonMaskPos === null) {
                    firstNonMaskPos = tests.length - 1;
                }
                if (i < partialPosition) {
                    lastRequiredNonMaskPos = tests.length - 1;
                }
            } else {
                tests.push(null);
            }
        }
        buffer = [];
        for(var _i = 0; _i < maskTokens.length; _i++){
            var _c = maskTokens[_i];
            if (_c !== '?') {
                if (defs[_c]) {
                    buffer.push(getPlaceholder(_i));
                } else {
                    buffer.push(_c);
                }
            }
        }
        defaultBuffer = buffer.join('');
    };
    if (el && options.mask) {
        init();
        bindEvents();
    }
    return {
        init: init,
        bindEvents: bindEvents,
        unbindEvents: unbindEvents,
        updateModel: updateModel,
        getValue: getValue
    };
}
function ownKeys(e, r) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e);
        r && (o = o.filter(function(r) {
            return Object.getOwnPropertyDescriptor(e, r).enumerable;
        })), t.push.apply(t, o);
    }
    return t;
}
function _objectSpread(e) {
    for(var r = 1; r < arguments.length; r++){
        var t = null != arguments[r] ? arguments[r] : {};
        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {
            _defineProperty(e, r, t[r]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {
            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
        });
    }
    return e;
}
/**
 * Merges properties together taking an Array of props and merging into one single set of
 * properties. The options can contain a "classNameMergeFunction" which can be something
 * like Tailwind Merge for properly merging Tailwind classes.
 *
 * @param {object[]} props the array of object properties to merge
 * @param {*} options either empty or could contain a custom merge function like TailwindMerge
 * @returns the single properties value after merging
 */ function mergeProps(props) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    if (!props) {
        return undefined;
    }
    var isFunction = function isFunction(obj) {
        return typeof obj === 'function';
    };
    var classNameMergeFunction = options.classNameMergeFunction;
    var hasMergeFunction = isFunction(classNameMergeFunction);
    return props.reduce(function(merged, ps) {
        if (!ps) {
            return merged;
        }
        var _loop = function _loop() {
            var value = ps[key];
            if (key === 'style') {
                merged.style = _objectSpread(_objectSpread({}, merged.style), ps.style);
            } else if (key === 'className') {
                var newClassName = '';
                if (hasMergeFunction) {
                    newClassName = classNameMergeFunction(merged.className, ps.className);
                } else {
                    newClassName = [
                        merged.className,
                        ps.className
                    ].join(' ').trim();
                }
                merged.className = newClassName || undefined;
            } else if (isFunction(value)) {
                var existingFn = merged[key];
                merged[key] = existingFn ? function() {
                    existingFn.apply(void 0, arguments);
                    value.apply(void 0, arguments);
                } : value;
            } else {
                merged[key] = value;
            }
        };
        for(var key in ps){
            _loop();
        }
        return merged;
    }, {});
}
function handler() {
    var zIndexes = [];
    var generateZIndex = function generateZIndex(key, autoZIndex) {
        var baseZIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 999;
        var lastZIndex = getLastZIndex(key, autoZIndex, baseZIndex);
        var newZIndex = lastZIndex.value + (lastZIndex.key === key ? 0 : baseZIndex) + 1;
        zIndexes.push({
            key: key,
            value: newZIndex
        });
        return newZIndex;
    };
    var revertZIndex = function revertZIndex(zIndex) {
        zIndexes = zIndexes.filter(function(obj) {
            return obj.value !== zIndex;
        });
    };
    var getCurrentZIndex = function getCurrentZIndex(key, autoZIndex) {
        return getLastZIndex(key, autoZIndex).value;
    };
    var getLastZIndex = function getLastZIndex(key, autoZIndex) {
        var baseZIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;
        return _toConsumableArray(zIndexes).reverse().find(function(obj) {
            return autoZIndex ? true : obj.key === key;
        }) || {
            key: key,
            value: baseZIndex
        };
    };
    var getZIndex = function getZIndex(el) {
        return el ? parseInt(el.style.zIndex, 10) || 0 : 0;
    };
    return {
        get: getZIndex,
        set: function set(key, el, autoZIndex, baseZIndex) {
            if (el) {
                el.style.zIndex = String(generateZIndex(key, autoZIndex, baseZIndex));
            }
        },
        clear: function clear(el) {
            if (el) {
                revertZIndex(ZIndexUtils.get(el));
                el.style.zIndex = '';
            }
        },
        getCurrent: function getCurrent(key, autoZIndex) {
            return getCurrentZIndex(key, autoZIndex);
        }
    };
}
var ZIndexUtils = handler();
;
}}),
"[project]/node_modules/primereact/api/api.esm.js [app-client] (ecmascript)": ((__turbopack_context__) => {
"use strict";

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, z: __turbopack_require_stub__ } = __turbopack_context__;
{
__turbopack_esm__({
    "FilterMatchMode": (()=>FilterMatchMode),
    "FilterOperator": (()=>FilterOperator),
    "FilterService": (()=>FilterService),
    "MessageSeverity": (()=>MessageSeverity),
    "PrimeIcons": (()=>PrimeIcons),
    "PrimeReactContext": (()=>PrimeReactContext),
    "PrimeReactProvider": (()=>PrimeReactProvider),
    "SortOrder": (()=>SortOrder),
    "addLocale": (()=>addLocale),
    "ariaLabel": (()=>ariaLabel),
    "default": (()=>PrimeReact),
    "locale": (()=>locale),
    "localeOption": (()=>localeOption),
    "localeOptions": (()=>localeOptions),
    "updateLocaleOption": (()=>updateLocaleOption),
    "updateLocaleOptions": (()=>updateLocaleOptions)
});
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)");
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$primereact$2f$utils$2f$utils$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/primereact/utils/utils.esm.js [app-client] (ecmascript)");
'use client';
;
;
var FilterMatchMode = Object.freeze({
    STARTS_WITH: 'startsWith',
    CONTAINS: 'contains',
    NOT_CONTAINS: 'notContains',
    ENDS_WITH: 'endsWith',
    EQUALS: 'equals',
    NOT_EQUALS: 'notEquals',
    IN: 'in',
    LESS_THAN: 'lt',
    LESS_THAN_OR_EQUAL_TO: 'lte',
    GREATER_THAN: 'gt',
    GREATER_THAN_OR_EQUAL_TO: 'gte',
    BETWEEN: 'between',
    DATE_IS: 'dateIs',
    DATE_IS_NOT: 'dateIsNot',
    DATE_BEFORE: 'dateBefore',
    DATE_AFTER: 'dateAfter',
    CUSTOM: 'custom'
});
var FilterOperator = Object.freeze({
    AND: 'and',
    OR: 'or'
});
function _createForOfIteratorHelper(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (!it) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray$1(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F() {};
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
        s: function s() {
            it = it.call(o);
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it["return"] != null) it["return"]();
            } finally{
                if (didErr) throw err;
            }
        }
    };
}
function _unsupportedIterableToArray$1(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray$1(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray$1(o, minLen);
}
function _arrayLikeToArray$1(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
var FilterService = {
    filter: function filter(value, fields, filterValue, filterMatchMode, filterLocale) {
        var filteredItems = [];
        if (!value) {
            return filteredItems;
        }
        var _iterator = _createForOfIteratorHelper(value), _step;
        try {
            for(_iterator.s(); !(_step = _iterator.n()).done;){
                var item = _step.value;
                if (typeof item === 'string') {
                    if (this.filters[filterMatchMode](item, filterValue, filterLocale)) {
                        filteredItems.push(item);
                        continue;
                    }
                } else {
                    var _iterator2 = _createForOfIteratorHelper(fields), _step2;
                    try {
                        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
                            var field = _step2.value;
                            var fieldValue = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$primereact$2f$utils$2f$utils$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ObjectUtils"].resolveFieldData(item, field);
                            if (this.filters[filterMatchMode](fieldValue, filterValue, filterLocale)) {
                                filteredItems.push(item);
                                break;
                            }
                        }
                    } catch (err) {
                        _iterator2.e(err);
                    } finally{
                        _iterator2.f();
                    }
                }
            }
        } catch (err) {
            _iterator.e(err);
        } finally{
            _iterator.f();
        }
        return filteredItems;
    },
    filters: {
        startsWith: function startsWith(value, filter, filterLocale) {
            if (filter === undefined || filter === null || filter.trim() === '') {
                return true;
            }
            if (value === undefined || value === null) {
                return false;
            }
            var filterValue = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$primereact$2f$utils$2f$utils$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ObjectUtils"].removeAccents(filter.toString()).toLocaleLowerCase(filterLocale);
            var stringValue = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$primereact$2f$utils$2f$utils$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ObjectUtils"].removeAccents(value.toString()).toLocaleLowerCase(filterLocale);
            return stringValue.slice(0, filterValue.length) === filterValue;
        },
        contains: function contains(value, filter, filterLocale) {
            if (filter === undefined || filter === null || typeof filter === 'string' && filter.trim() === '') {
                return true;
            }
            if (value === undefined || value === null) {
                return false;
            }
            var filterValue = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$primereact$2f$utils$2f$utils$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ObjectUtils"].removeAccents(filter.toString()).toLocaleLowerCase(filterLocale);
            var stringValue = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$primereact$2f$utils$2f$utils$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ObjectUtils"].removeAccents(value.toString()).toLocaleLowerCase(filterLocale);
            return stringValue.indexOf(filterValue) !== -1;
        },
        notContains: function notContains(value, filter, filterLocale) {
            if (filter === undefined || filter === null || typeof filter === 'string' && filter.trim() === '') {
                return true;
            }
            if (value === undefined || value === null) {
                return false;
            }
            var filterValue = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$primereact$2f$utils$2f$utils$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ObjectUtils"].removeAccents(filter.toString()).toLocaleLowerCase(filterLocale);
            var stringValue = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$primereact$2f$utils$2f$utils$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ObjectUtils"].removeAccents(value.toString()).toLocaleLowerCase(filterLocale);
            return stringValue.indexOf(filterValue) === -1;
        },
        endsWith: function endsWith(value, filter, filterLocale) {
            if (filter === undefined || filter === null || filter.trim() === '') {
                return true;
            }
            if (value === undefined || value === null) {
                return false;
            }
            var filterValue = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$primereact$2f$utils$2f$utils$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ObjectUtils"].removeAccents(filter.toString()).toLocaleLowerCase(filterLocale);
            var stringValue = __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$primereact$2f$utils$2f$utils$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ObjectUtils"].removeAccents(value.toString()).toLocaleLowerCase(filterLocale);
            return stringValue.indexOf(filterValue, stringValue.length - filterValue.length) !== -1;
        },
        equals: function equals(value, filter, filterLocale) {
            if (filter === undefined || filter === null || typeof filter === 'string' && filter.trim() === '') {
                return true;
            }
            if (value === undefined || value === null) {
                return false;
            }
            if (value.getTime && filter.getTime) {
                return value.getTime() === filter.getTime();
            }
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$primereact$2f$utils$2f$utils$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ObjectUtils"].removeAccents(value.toString()).toLocaleLowerCase(filterLocale) === __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$primereact$2f$utils$2f$utils$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ObjectUtils"].removeAccents(filter.toString()).toLocaleLowerCase(filterLocale);
        },
        notEquals: function notEquals(value, filter, filterLocale) {
            if (filter === undefined || filter === null || typeof filter === 'string' && filter.trim() === '') {
                return true;
            }
            if (value === undefined || value === null) {
                return true;
            }
            if (value.getTime && filter.getTime) {
                return value.getTime() !== filter.getTime();
            }
            return __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$primereact$2f$utils$2f$utils$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ObjectUtils"].removeAccents(value.toString()).toLocaleLowerCase(filterLocale) !== __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$primereact$2f$utils$2f$utils$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ObjectUtils"].removeAccents(filter.toString()).toLocaleLowerCase(filterLocale);
        },
        "in": function _in(value, filter) {
            if (filter === undefined || filter === null || filter.length === 0) {
                return true;
            }
            for(var i = 0; i < filter.length; i++){
                if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$primereact$2f$utils$2f$utils$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ObjectUtils"].equals(value, filter[i])) {
                    return true;
                }
            }
            return false;
        },
        notIn: function notIn(value, filter) {
            if (filter === undefined || filter === null || filter.length === 0) {
                return true;
            }
            for(var i = 0; i < filter.length; i++){
                if (__TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$primereact$2f$utils$2f$utils$2e$esm$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["ObjectUtils"].equals(value, filter[i])) {
                    return false;
                }
            }
            return true;
        },
        between: function between(value, filter) {
            if (filter == null || filter[0] == null || filter[1] == null) {
                return true;
            }
            if (value === undefined || value === null) {
                return false;
            }
            if (value.getTime) {
                return filter[0].getTime() <= value.getTime() && value.getTime() <= filter[1].getTime();
            }
            return filter[0] <= value && value <= filter[1];
        },
        lt: function lt(value, filter) {
            if (filter === undefined || filter === null) {
                return true;
            }
            if (value === undefined || value === null) {
                return false;
            }
            if (value.getTime && filter.getTime) {
                return value.getTime() < filter.getTime();
            }
            return value < filter;
        },
        lte: function lte(value, filter) {
            if (filter === undefined || filter === null) {
                return true;
            }
            if (value === undefined || value === null) {
                return false;
            }
            if (value.getTime && filter.getTime) {
                return value.getTime() <= filter.getTime();
            }
            return value <= filter;
        },
        gt: function gt(value, filter) {
            if (filter === undefined || filter === null) {
                return true;
            }
            if (value === undefined || value === null) {
                return false;
            }
            if (value.getTime && filter.getTime) {
                return value.getTime() > filter.getTime();
            }
            return value > filter;
        },
        gte: function gte(value, filter) {
            if (filter === undefined || filter === null) {
                return true;
            }
            if (value === undefined || value === null) {
                return false;
            }
            if (value.getTime && filter.getTime) {
                return value.getTime() >= filter.getTime();
            }
            return value >= filter;
        },
        dateIs: function dateIs(value, filter) {
            if (filter === undefined || filter === null) {
                return true;
            }
            if (value === undefined || value === null) {
                return false;
            }
            return value.toDateString() === filter.toDateString();
        },
        dateIsNot: function dateIsNot(value, filter) {
            if (filter === undefined || filter === null) {
                return true;
            }
            if (value === undefined || value === null) {
                return false;
            }
            return value.toDateString() !== filter.toDateString();
        },
        dateBefore: function dateBefore(value, filter) {
            if (filter === undefined || filter === null) {
                return true;
            }
            if (value === undefined || value === null) {
                return false;
            }
            return value.getTime() < filter.getTime();
        },
        dateAfter: function dateAfter(value, filter) {
            if (filter === undefined || filter === null) {
                return true;
            }
            if (value === undefined || value === null) {
                return false;
            }
            return value.getTime() > filter.getTime();
        }
    },
    register: function register(rule, fn) {
        this.filters[rule] = fn;
    }
};
function _typeof(o) {
    "@babel/helpers - typeof";
    return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o) {
        return typeof o;
    } : function(o) {
        return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o;
    }, _typeof(o);
}
function _toPrimitive(input, hint) {
    if (_typeof(input) !== "object" || input === null) return input;
    var prim = input[Symbol.toPrimitive];
    if (prim !== undefined) {
        var res = prim.call(input, hint || "default");
        if (_typeof(res) !== "object") return res;
        throw new TypeError("@@toPrimitive must return a primitive value.");
    }
    return (hint === "string" ? String : Number)(input);
}
function _toPropertyKey(arg) {
    var key = _toPrimitive(arg, "string");
    return _typeof(key) === "symbol" ? key : String(key);
}
function _defineProperty(obj, key, value) {
    key = _toPropertyKey(key);
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    Object.defineProperty(Constructor, "prototype", {
        writable: false
    });
    return Constructor;
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
/**
 * @deprecated please use PrimeReactContext
 */ var PrimeReact$1 = /*#__PURE__*/ _createClass(function PrimeReact() {
    _classCallCheck(this, PrimeReact);
});
_defineProperty(PrimeReact$1, "ripple", false);
_defineProperty(PrimeReact$1, "inputStyle", 'outlined');
_defineProperty(PrimeReact$1, "locale", 'en');
_defineProperty(PrimeReact$1, "appendTo", null);
_defineProperty(PrimeReact$1, "cssTransition", true);
_defineProperty(PrimeReact$1, "autoZIndex", true);
_defineProperty(PrimeReact$1, "hideOverlaysOnDocumentScrolling", false);
_defineProperty(PrimeReact$1, "nonce", null);
_defineProperty(PrimeReact$1, "nullSortOrder", 1);
_defineProperty(PrimeReact$1, "zIndex", {
    modal: 1100,
    overlay: 1000,
    menu: 1000,
    tooltip: 1100,
    toast: 1200
});
_defineProperty(PrimeReact$1, "pt", undefined);
_defineProperty(PrimeReact$1, "filterMatchModeOptions", {
    text: [
        FilterMatchMode.STARTS_WITH,
        FilterMatchMode.CONTAINS,
        FilterMatchMode.NOT_CONTAINS,
        FilterMatchMode.ENDS_WITH,
        FilterMatchMode.EQUALS,
        FilterMatchMode.NOT_EQUALS
    ],
    numeric: [
        FilterMatchMode.EQUALS,
        FilterMatchMode.NOT_EQUALS,
        FilterMatchMode.LESS_THAN,
        FilterMatchMode.LESS_THAN_OR_EQUAL_TO,
        FilterMatchMode.GREATER_THAN,
        FilterMatchMode.GREATER_THAN_OR_EQUAL_TO
    ],
    date: [
        FilterMatchMode.DATE_IS,
        FilterMatchMode.DATE_IS_NOT,
        FilterMatchMode.DATE_BEFORE,
        FilterMatchMode.DATE_AFTER
    ]
});
_defineProperty(PrimeReact$1, "changeTheme", function(currentTheme, newTheme, linkElementId, callback) {
    var _linkElement$parentNo;
    var linkElement = document.getElementById(linkElementId);
    if (!linkElement) {
        throw Error("Element with id ".concat(linkElementId, " not found."));
    }
    var newThemeUrl = linkElement.getAttribute('href').replace(currentTheme, newTheme);
    var newLinkElement = document.createElement('link');
    newLinkElement.setAttribute('rel', 'stylesheet');
    newLinkElement.setAttribute('id', linkElementId);
    newLinkElement.setAttribute('href', newThemeUrl);
    newLinkElement.addEventListener('load', function() {
        if (callback) {
            callback();
        }
    });
    (_linkElement$parentNo = linkElement.parentNode) === null || _linkElement$parentNo === void 0 || _linkElement$parentNo.replaceChild(newLinkElement, linkElement);
});
function ownKeys(e, r) {
    var t = Object.keys(e);
    if (Object.getOwnPropertySymbols) {
        var o = Object.getOwnPropertySymbols(e);
        r && (o = o.filter(function(r) {
            return Object.getOwnPropertyDescriptor(e, r).enumerable;
        })), t.push.apply(t, o);
    }
    return t;
}
function _objectSpread(e) {
    for(var r = 1; r < arguments.length; r++){
        var t = null != arguments[r] ? arguments[r] : {};
        r % 2 ? ownKeys(Object(t), !0).forEach(function(r) {
            _defineProperty(e, r, t[r]);
        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r) {
            Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));
        });
    }
    return e;
}
var locales = {
    en: {
        accept: 'Yes',
        addRule: 'Add Rule',
        am: 'AM',
        apply: 'Apply',
        cancel: 'Cancel',
        choose: 'Choose',
        chooseDate: 'Choose Date',
        chooseMonth: 'Choose Month',
        chooseYear: 'Choose Year',
        clear: 'Clear',
        completed: 'Completed',
        contains: 'Contains',
        custom: 'Custom',
        dateAfter: 'Date is after',
        dateBefore: 'Date is before',
        dateFormat: 'mm/dd/yy',
        dateIs: 'Date is',
        dateIsNot: 'Date is not',
        dayNames: [
            'Sunday',
            'Monday',
            'Tuesday',
            'Wednesday',
            'Thursday',
            'Friday',
            'Saturday'
        ],
        dayNamesMin: [
            'Su',
            'Mo',
            'Tu',
            'We',
            'Th',
            'Fr',
            'Sa'
        ],
        dayNamesShort: [
            'Sun',
            'Mon',
            'Tue',
            'Wed',
            'Thu',
            'Fri',
            'Sat'
        ],
        emptyFilterMessage: 'No results found',
        emptyMessage: 'No available options',
        emptySearchMessage: 'No results found',
        emptySelectionMessage: 'No selected item',
        endsWith: 'Ends with',
        equals: 'Equals',
        fileSizeTypes: [
            'B',
            'KB',
            'MB',
            'GB',
            'TB',
            'PB',
            'EB',
            'ZB',
            'YB'
        ],
        filter: 'Filter',
        firstDayOfWeek: 0,
        gt: 'Greater than',
        gte: 'Greater than or equal to',
        lt: 'Less than',
        lte: 'Less than or equal to',
        matchAll: 'Match All',
        matchAny: 'Match Any',
        medium: 'Medium',
        monthNames: [
            'January',
            'February',
            'March',
            'April',
            'May',
            'June',
            'July',
            'August',
            'September',
            'October',
            'November',
            'December'
        ],
        monthNamesShort: [
            'Jan',
            'Feb',
            'Mar',
            'Apr',
            'May',
            'Jun',
            'Jul',
            'Aug',
            'Sep',
            'Oct',
            'Nov',
            'Dec'
        ],
        nextDecade: 'Next Decade',
        nextHour: 'Next Hour',
        nextMinute: 'Next Minute',
        nextMonth: 'Next Month',
        nextSecond: 'Next Second',
        nextYear: 'Next Year',
        noFilter: 'No Filter',
        notContains: 'Not contains',
        notEquals: 'Not equals',
        now: 'Now',
        passwordPrompt: 'Enter a password',
        pending: 'Pending',
        pm: 'PM',
        prevDecade: 'Previous Decade',
        prevHour: 'Previous Hour',
        prevMinute: 'Previous Minute',
        prevMonth: 'Previous Month',
        prevSecond: 'Previous Second',
        prevYear: 'Previous Year',
        reject: 'No',
        removeRule: 'Remove Rule',
        searchMessage: '{0} results are available',
        selectionMessage: '{0} items selected',
        showMonthAfterYear: false,
        startsWith: 'Starts with',
        strong: 'Strong',
        today: 'Today',
        upload: 'Upload',
        weak: 'Weak',
        weekHeader: 'Wk',
        aria: {
            cancelEdit: 'Cancel Edit',
            close: 'Close',
            collapseRow: 'Row Collapsed',
            editRow: 'Edit Row',
            expandRow: 'Row Expanded',
            falseLabel: 'False',
            filterConstraint: 'Filter Constraint',
            filterOperator: 'Filter Operator',
            firstPageLabel: 'First Page',
            gridView: 'Grid View',
            hideFilterMenu: 'Hide Filter Menu',
            jumpToPageDropdownLabel: 'Jump to Page Dropdown',
            jumpToPageInputLabel: 'Jump to Page Input',
            lastPageLabel: 'Last Page',
            listView: 'List View',
            moveAllToSource: 'Move All to Source',
            moveAllToTarget: 'Move All to Target',
            moveBottom: 'Move Bottom',
            moveDown: 'Move Down',
            moveToSource: 'Move to Source',
            moveToTarget: 'Move to Target',
            moveTop: 'Move Top',
            moveUp: 'Move Up',
            navigation: 'Navigation',
            next: 'Next',
            nextPageLabel: 'Next Page',
            nullLabel: 'Not Selected',
            pageLabel: 'Page {page}',
            otpLabel: 'Please enter one time password character {0}',
            passwordHide: 'Hide Password',
            passwordShow: 'Show Password',
            previous: 'Previous',
            previousPageLabel: 'Previous Page',
            rotateLeft: 'Rotate Left',
            rotateRight: 'Rotate Right',
            rowsPerPageLabel: 'Rows per page',
            saveEdit: 'Save Edit',
            scrollTop: 'Scroll Top',
            selectAll: 'All items selected',
            selectRow: 'Row Selected',
            showFilterMenu: 'Show Filter Menu',
            slide: 'Slide',
            slideNumber: '{slideNumber}',
            star: '1 star',
            stars: '{star} stars',
            trueLabel: 'True',
            unselectAll: 'All items unselected',
            unselectRow: 'Row Unselected',
            zoomImage: 'Zoom Image',
            zoomIn: 'Zoom In',
            zoomOut: 'Zoom Out'
        }
    }
};
function locale(locale) {
    locale && (PrimeReact$1.locale = locale);
    return {
        locale: PrimeReact$1.locale,
        options: locales[PrimeReact$1.locale]
    };
}
function addLocale(locale, options) {
    if (locale.includes('__proto__') || locale.includes('prototype')) {
        throw new Error('Unsafe locale detected');
    }
    locales[locale] = _objectSpread(_objectSpread({}, locales.en), options);
}
function updateLocaleOption(key, value, locale) {
    if (key.includes('__proto__') || key.includes('prototype')) {
        throw new Error('Unsafe key detected');
    }
    localeOptions(locale)[key] = value;
}
function updateLocaleOptions(options, locale) {
    if (locale.includes('__proto__') || locale.includes('prototype')) {
        throw new Error('Unsafe locale detected');
    }
    var _locale = locale || PrimeReact$1.locale;
    locales[_locale] = _objectSpread(_objectSpread({}, locales[_locale]), options);
}
function localeOption(key, locale) {
    if (key.includes('__proto__') || key.includes('prototype')) {
        throw new Error('Unsafe key detected');
    }
    var _locale = locale || PrimeReact$1.locale;
    try {
        return localeOptions(_locale)[key];
    } catch (error) {
        throw new Error("The ".concat(key, " option is not found in the current locale('").concat(_locale, "')."));
    }
}
/**
 * Find an ARIA label in the locale by key.  If options are passed it will replace all options:
 * ```ts
 * const ariaValue = "Page {page}, User {user}, Role {role}";
 * const options = { page: 2, user: "John", role: "Admin" };
 * const result = ariaLabel('yourLabel', { page: 2, user: "John", role: "Admin" })
 * console.log(result); // Output: Page 2, User John, Role Admin
 * ```
 * @param {string} ariaKey key of the ARIA label to look up in locale.
 * @param {any} options JSON options like { page: 2, user: "John", role: "Admin" }
 * @returns the ARIA label with replaced values
 */ function ariaLabel(ariaKey, options) {
    if (ariaKey.includes('__proto__') || ariaKey.includes('prototype')) {
        throw new Error('Unsafe ariaKey detected');
    }
    var _locale = PrimeReact$1.locale;
    try {
        var _ariaLabel = localeOptions(_locale).aria[ariaKey];
        if (_ariaLabel) {
            for(var key in options){
                if (options.hasOwnProperty(key)) {
                    _ariaLabel = _ariaLabel.replace("{".concat(key, "}"), options[key]);
                }
            }
        }
        return _ariaLabel;
    } catch (error) {
        throw new Error("The ".concat(ariaKey, " option is not found in the current locale('").concat(_locale, "')."));
    }
}
function localeOptions(locale) {
    var _locale = locale || PrimeReact$1.locale;
    if (_locale.includes('__proto__') || _locale.includes('prototype')) {
        throw new Error('Unsafe locale detected');
    }
    return locales[_locale];
}
var MessageSeverity = Object.freeze({
    SUCCESS: 'success',
    INFO: 'info',
    WARN: 'warn',
    ERROR: 'error',
    SECONDARY: 'secondary',
    CONTRAST: 'contrast'
});
var PrimeIcons = Object.freeze({
    ADDRESS_BOOK: 'pi pi-address-book',
    ALIGN_CENTER: 'pi pi-align-center',
    ALIGN_JUSTIFY: 'pi pi-align-justify',
    ALIGN_LEFT: 'pi pi-align-left',
    ALIGN_RIGHT: 'pi pi-align-right',
    AMAZON: 'pi pi-amazon',
    ANDROID: 'pi pi-android',
    ANGLE_DOUBLE_DOWN: 'pi pi-angle-double-down',
    ANGLE_DOUBLE_LEFT: 'pi pi-angle-double-left',
    ANGLE_DOUBLE_RIGHT: 'pi pi-angle-double-right',
    ANGLE_DOUBLE_UP: 'pi pi-angle-double-up',
    ANGLE_DOWN: 'pi pi-angle-down',
    ANGLE_LEFT: 'pi pi-angle-left',
    ANGLE_RIGHT: 'pi pi-angle-right',
    ANGLE_UP: 'pi pi-angle-up',
    APPLE: 'pi pi-apple',
    ARROW_CIRCLE_DOWN: 'pi pi-arrow-circle-down',
    ARROW_CIRCLE_LEFT: 'pi pi-arrow-circle-left',
    ARROW_CIRCLE_RIGHT: 'pi pi-arrow-circle-right',
    ARROW_CIRCLE_UP: 'pi pi-arrow-circle-up',
    ARROW_DOWN_LEFT_AND_ARROW_UP_RIGHT_TO_CENTER: 'pi pi-arrow-down-left-and-arrow-up-right-to-center',
    ARROW_DOWN_LEFT: 'pi pi-arrow-down-left',
    ARROW_DOWN_RIGHT: 'pi pi-arrow-down-right',
    ARROW_DOWN: 'pi pi-arrow-down',
    ARROW_LEFT: 'pi pi-arrow-left',
    ARROW_RIGHT_ARROW_LEFT: 'pi pi-arrow-right-arrow-left',
    ARROW_RIGHT: 'pi pi-arrow-right',
    ARROW_UP_LEFT: 'pi pi-arrow-up-left',
    ARROW_UP_RIGHT_AND_ARROW_DOWN_LEFT_FROM_CENTER: 'pi pi-arrow-up-right-and-arrow-down-left-from-center',
    ARROW_UP_RIGHT: 'pi pi-arrow-up-right',
    ARROW_UP: 'pi pi-arrow-up',
    ARROWS_ALT: 'pi pi-arrows-alt',
    ARROWS_H: 'pi pi-arrows-h',
    ARROWS_V: 'pi pi-arrows-v',
    ASTERISK: 'pi pi-asterisk',
    AT: 'pi pi-at',
    BACKWARD: 'pi pi-backward',
    BAN: 'pi pi-ban',
    BARCODE: 'pi pi-barcode',
    BARS: 'pi pi-bars',
    BELL_SLASH: 'pi pi-bell-slash',
    BELL: 'pi pi-bell',
    BITCOIN: 'pi pi-bitcoin',
    BOLT: 'pi pi-bolt',
    BOOK: 'pi pi-book',
    BOOKMARK_FILL: 'pi pi-bookmark-fill',
    BOOKMARK: 'pi pi-bookmark',
    BOX: 'pi pi-box',
    BRIEFCASE: 'pi pi-briefcase',
    BUILDING_COLUMNS: 'pi pi-building-columns',
    BUILDING: 'pi pi-building',
    BULLSEYE: 'pi pi-bullseye',
    CALCULATOR: 'pi pi-calculator',
    CALENDAR_CLOCK: 'pi pi-calendar-clock',
    CALENDAR_MINUS: 'pi pi-calendar-minus',
    CALENDAR_PLUS: 'pi pi-calendar-plus',
    CALENDAR_TIMES: 'pi pi-calendar-times',
    CALENDAR: 'pi pi-calendar',
    CAMERA: 'pi pi-camera',
    CAR: 'pi pi-car',
    CARET_DOWN: 'pi pi-caret-down',
    CARET_LEFT: 'pi pi-caret-left',
    CARET_RIGHT: 'pi pi-caret-right',
    CARET_UP: 'pi pi-caret-up',
    CART_ARROW_DOWN: 'pi pi-cart-arrow-down',
    CART_MINUS: 'pi pi-cart-minus',
    CART_PLUS: 'pi pi-cart-plus',
    CHART_BAR: 'pi pi-chart-bar',
    CHART_LINE: 'pi pi-chart-line',
    CHART_PIE: 'pi pi-chart-pie',
    CHART_SCATTER: 'pi pi-chart-scatter',
    CHECK_CIRCLE: 'pi pi-check-circle',
    CHECK_SQUARE: 'pi pi-check-square',
    CHECK: 'pi pi-check',
    CHEVRON_CIRCLE_DOWN: 'pi pi-chevron-circle-down',
    CHEVRON_CIRCLE_LEFT: 'pi pi-chevron-circle-left',
    CHEVRON_CIRCLE_RIGHT: 'pi pi-chevron-circle-right',
    CHEVRON_CIRCLE_UP: 'pi pi-chevron-circle-up',
    CHEVRON_DOWN: 'pi pi-chevron-down',
    CHEVRON_LEFT: 'pi pi-chevron-left',
    CHEVRON_RIGHT: 'pi pi-chevron-right',
    CHEVRON_UP: 'pi pi-chevron-up',
    CIRCLE_FILL: 'pi pi-circle-fill',
    CIRCLE_OFF: 'pi pi-circle-off',
    CIRCLE_ON: 'pi pi-circle-on',
    CIRCLE: 'pi pi-circle',
    CLIPBOARD: 'pi pi-clipboard',
    CLOCK: 'pi pi-clock',
    CLONE: 'pi pi-clone',
    CLOUD_DOWNLOAD: 'pi pi-cloud-download',
    CLOUD_UPLOAD: 'pi pi-cloud-upload',
    CLOUD: 'pi pi-cloud',
    CODE: 'pi pi-code',
    COG: 'pi pi-cog',
    COMMENT: 'pi pi-comment',
    COMMENTS: 'pi pi-comments',
    COMPASS: 'pi pi-compass',
    COPY: 'pi pi-copy',
    CREDIT_CARD: 'pi pi-credit-card',
    CROWN: 'pi pi-crown',
    DATABASE: 'pi pi-database',
    DELETE_LEFT: 'pi pi-delete-left',
    DESKTOP: 'pi pi-desktop',
    DIRECTIONS_ALT: 'pi pi-directions-alt',
    DIRECTIONS: 'pi pi-directions',
    DISCORD: 'pi pi-discord',
    DOLLAR: 'pi pi-dollar',
    DOWNLOAD: 'pi pi-download',
    EJECT: 'pi pi-eject',
    ELLIPSIS_H: 'pi pi-ellipsis-h',
    ELLIPSIS_V: 'pi pi-ellipsis-v',
    ENVELOPE: 'pi pi-envelope',
    EQUALS: 'pi pi-equals',
    ERASER: 'pi pi-eraser',
    ETHEREUM: 'pi pi-ethereum',
    EURO: 'pi pi-euro',
    EXCLAMATION_CIRCLE: 'pi pi-exclamation-circle',
    EXCLAMATION_TRIANGLE: 'pi pi-exclamation-triangle',
    EXPAND: 'pi pi-expand',
    EXTERNAL_LINK: 'pi pi-external-link',
    EYE_SLASH: 'pi pi-eye-slash',
    EYE: 'pi pi-eye',
    FACE_SMILE: 'pi pi-face-smile',
    FACEBOOK: 'pi pi-facebook',
    FAST_BACKWARD: 'pi pi-fast-backward',
    FAST_FORWARD: 'pi pi-fast-forward',
    FILE_ARROW_UP: 'pi pi-file-arrow-up',
    FILE_CHECK: 'pi pi-file-check',
    FILE_EDIT: 'pi pi-file-edit',
    FILE_EXCEL: 'pi pi-file-excel',
    FILE_EXPORT: 'pi pi-file-export',
    FILE_IMPORT: 'pi pi-file-import',
    FILE_O: 'pi pi-file-o',
    FILE_PDF: 'pi pi-file-pdf',
    FILE_PLUS: 'pi pi-file-plus',
    FILE_WORD: 'pi pi-file-word',
    FILE: 'pi pi-file',
    FILTER_FILL: 'pi pi-filter-fill',
    FILTER_SLASH: 'pi pi-filter-slash',
    FILTER: 'pi pi-filter',
    FLAG_FILL: 'pi pi-flag-fill',
    FLAG: 'pi pi-flag',
    FOLDER_OPEN: 'pi pi-folder-open',
    FOLDER_PLUS: 'pi pi-folder-plus',
    FOLDER: 'pi pi-folder',
    FORWARD: 'pi pi-forward',
    GAUGE: 'pi pi-gauge',
    GIFT: 'pi pi-gift',
    GITHUB: 'pi pi-github',
    GLOBE: 'pi pi-globe',
    GOOGLE: 'pi pi-google',
    GRADUATION_CAP: 'pi pi-graduation-cap',
    HAMMER: 'pi pi-hammer',
    HASHTAG: 'pi pi-hashtag',
    HEADPHONES: 'pi pi-headphones',
    HEART_FILL: 'pi pi-heart-fill',
    HEART: 'pi pi-heart',
    HISTORY: 'pi pi-history',
    HOME: 'pi pi-home',
    HOURGLASS: 'pi pi-hourglass',
    ID_CARD: 'pi pi-id-card',
    IMAGE: 'pi pi-image',
    IMAGES: 'pi pi-images',
    INBOX: 'pi pi-inbox',
    INDIAN_RUPEE: 'pi pi-indian-rupee',
    INFO_CIRCLE: 'pi pi-info-circle',
    INFO: 'pi pi-info',
    INSTAGRAM: 'pi pi-instagram',
    KEY: 'pi pi-key',
    LANGUAGE: 'pi pi-language',
    LIGHTBULB: 'pi pi-lightbulb',
    LINK: 'pi pi-link',
    LINKEDIN: 'pi pi-linkedin',
    LIST_CHECK: 'pi pi-list-check',
    LIST: 'pi pi-list',
    LOCK_OPEN: 'pi pi-lock-open',
    LOCK: 'pi pi-lock',
    MAP_MARKER: 'pi pi-map-marker',
    MAP: 'pi pi-map',
    MARS: 'pi pi-mars',
    MEGAPHONE: 'pi pi-megaphone',
    MICROCHIP_AI: 'pi pi-microchip-ai',
    MICROCHIP: 'pi pi-microchip',
    MICROPHONE: 'pi pi-microphone',
    MICROSOFT: 'pi pi-microsoft',
    MINUS_CIRCLE: 'pi pi-minus-circle',
    MINUS: 'pi pi-minus',
    MOBILE: 'pi pi-mobile',
    MONEY_BILL: 'pi pi-money-bill',
    MOON: 'pi pi-moon',
    OBJECTS_COLUMN: 'pi pi-objects-column',
    PALETTE: 'pi pi-palette',
    PAPERCLIP: 'pi pi-paperclip',
    PAUSE_CIRCLE: 'pi pi-pause-circle',
    PAUSE: 'pi pi-pause',
    PAYPAL: 'pi pi-paypal',
    PEN_TO_SQUARE: 'pi pi-pen-to-square',
    PENCIL: 'pi pi-pencil',
    PERCENTAGE: 'pi pi-percentage',
    PHONE: 'pi pi-phone',
    PINTEREST: 'pi pi-pinterest',
    PLAY_CIRCLE: 'pi pi-play-circle',
    PLAY: 'pi pi-play',
    PLUS_CIRCLE: 'pi pi-plus-circle',
    PLUS: 'pi pi-plus',
    POUND: 'pi pi-pound',
    POWER_OFF: 'pi pi-power-off',
    PRIME: 'pi pi-prime',
    PRINT: 'pi pi-print',
    QRCODE: 'pi pi-qrcode',
    QUESTION_CIRCLE: 'pi pi-question-circle',
    QUESTION: 'pi pi-question',
    RECEIPT: 'pi pi-receipt',
    REDDIT: 'pi pi-reddit',
    REFRESH: 'pi pi-refresh',
    REPLAY: 'pi pi-replay',
    REPLY: 'pi pi-reply',
    SAVE: 'pi pi-save',
    SEARCH_MINUS: 'pi pi-search-minus',
    SEARCH_PLUS: 'pi pi-search-plus',
    SEARCH: 'pi pi-search',
    SEND: 'pi pi-send',
    SERVER: 'pi pi-server',
    SHARE_ALT: 'pi pi-share-alt',
    SHIELD: 'pi pi-shield',
    SHOP: 'pi pi-shop',
    SHOPPING_BAG: 'pi pi-shopping-bag',
    SHOPPING_CART: 'pi pi-shopping-cart',
    SIGN_IN: 'pi pi-sign-in',
    SIGN_OUT: 'pi pi-sign-out',
    SITEMAP: 'pi pi-sitemap',
    SLACK: 'pi pi-slack',
    SLIDERS_H: 'pi pi-sliders-h',
    SLIDERS_V: 'pi pi-sliders-v',
    SORT_ALPHA_DOWN_ALT: 'pi pi-sort-alpha-down-alt',
    SORT_ALPHA_DOWN: 'pi pi-sort-alpha-down',
    SORT_ALPHA_UP_ALT: 'pi pi-sort-alpha-up-alt',
    SORT_ALPHA_UP: 'pi pi-sort-alpha-up',
    SORT_ALT_SLASH: 'pi pi-sort-alt-slash',
    SORT_ALT: 'pi pi-sort-alt',
    SORT_AMOUNT_DOWN_ALT: 'pi pi-sort-amount-down-alt',
    SORT_AMOUNT_DOWN: 'pi pi-sort-amount-down',
    SORT_AMOUNT_UP_ALT: 'pi pi-sort-amount-up-alt',
    SORT_AMOUNT_UP: 'pi pi-sort-amount-up',
    SORT_DOWN_FILL: 'pi pi-sort-down-fill',
    SORT_DOWN: 'pi pi-sort-down',
    SORT_NUMERIC_DOWN_ALT: 'pi pi-sort-numeric-down-alt',
    SORT_NUMERIC_DOWN: 'pi pi-sort-numeric-down',
    SORT_NUMERIC_UP_ALT: 'pi pi-sort-numeric-up-alt',
    SORT_NUMERIC_UP: 'pi pi-sort-numeric-up',
    SORT_UP_FILL: 'pi pi-sort-up-fill',
    SORT_UP: 'pi pi-sort-up',
    SORT: 'pi pi-sort',
    SPARKLES: 'pi pi-sparkles',
    SPINNER_DOTTED: 'pi pi-spinner-dotted',
    SPINNER: 'pi pi-spinner',
    STAR_FILL: 'pi pi-star-fill',
    STAR_HALF_FILL: 'pi pi-star-half-fill',
    STAR_HALF: 'pi pi-star-half',
    STAR: 'pi pi-star',
    STEP_BACKWARD_ALT: 'pi pi-step-backward-alt',
    STEP_BACKWARD: 'pi pi-step-backward',
    STEP_FORWARD_ALT: 'pi pi-step-forward-alt',
    STEP_FORWARD: 'pi pi-step-forward',
    STOP_CIRCLE: 'pi pi-stop-circle',
    STOP: 'pi pi-stop',
    STOPWATCH: 'pi pi-stopwatch',
    SUN: 'pi pi-sun',
    SYNC: 'pi pi-sync',
    TABLE: 'pi pi-table',
    TABLET: 'pi pi-tablet',
    TAG: 'pi pi-tag',
    TAGS: 'pi pi-tags',
    TELEGRAM: 'pi pi-telegram',
    TH_LARGE: 'pi pi-th-large',
    THUMBS_DOWN_FILL: 'pi pi-thumbs-down-fill',
    THUMBS_DOWN: 'pi pi-thumbs-down',
    THUMBS_UP_FILL: 'pi pi-thumbs-up-fill',
    THUMBS_UP: 'pi pi-thumbs-up',
    THUMBTACK: 'pi pi-thumbtack',
    TICKET: 'pi pi-ticket',
    TIKTOK: 'pi pi-tiktok',
    TIMES_CIRCLE: 'pi pi-times-circle',
    TIMES: 'pi pi-times',
    TRASH: 'pi pi-trash',
    TROPHY: 'pi pi-trophy',
    TRUCK: 'pi pi-truck',
    TURKISH_LIRA: 'pi pi-turkish-lira',
    TWITCH: 'pi pi-twitch',
    TWITTER: 'pi pi-twitter',
    UNDO: 'pi pi-undo',
    UNLOCK: 'pi pi-unlock',
    UPLOAD: 'pi pi-upload',
    USER_EDIT: 'pi pi-user-edit',
    USER_MINUS: 'pi pi-user-minus',
    USER_PLUS: 'pi pi-user-plus',
    USER: 'pi pi-user',
    USERS: 'pi pi-users',
    VENUS: 'pi pi-venus',
    VERIFIED: 'pi pi-verified',
    VIDEO: 'pi pi-video',
    VIMEO: 'pi pi-vimeo',
    VOLUME_DOWN: 'pi pi-volume-down',
    VOLUME_OFF: 'pi pi-volume-off',
    VOLUME_UP: 'pi pi-volume-up',
    WALLET: 'pi pi-wallet',
    WAREHOUSE: 'pi pi-warehouse',
    WAVE_PULSE: 'pi pi-wave-pulse',
    WHATSAPP: 'pi pi-whatsapp',
    WIFI: 'pi pi-wifi',
    WINDOW_MAXIMIZE: 'pi pi-window-maximize',
    WINDOW_MINIMIZE: 'pi pi-window-minimize',
    WRENCH: 'pi pi-wrench',
    YOUTUBE: 'pi pi-youtube'
});
var SortOrder = Object.freeze({
    DESC: -1,
    UNSORTED: 0,
    ASC: 1
});
function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
}
function _iterableToArrayLimit(r, l) {
    var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"];
    if (null != t) {
        var e, n, i, u, a = [], f = !0, o = !1;
        try {
            if (i = (t = t.call(r)).next, 0 === l) {
                if (Object(t) !== t) return;
                f = !1;
            } else for(; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);
        } catch (r) {
            o = !0, n = r;
        } finally{
            try {
                if (!f && null != t["return"] && (u = t["return"](), Object(u) !== u)) return;
            } finally{
                if (o) throw n;
            }
        }
        return a;
    }
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
var PrimeReactContext = /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].createContext();
var PrimeReactProvider = function PrimeReactProvider(props) {
    var _props$value, _propsValue$ripple, _propsValue$inputStyl, _propsValue$locale, _propsValue$appendTo, _propsValue$styleCont, _propsValue$cssTransi, _propsValue$autoZInde, _propsValue$hideOverl, _propsValue$nonce, _propsValue$nullSortO, _propsValue$zIndex, _propsValue$ptOptions, _propsValue$pt, _propsValue$unstyled, _propsValue$filterMat;
    var propsValue = (_props$value = props.value) !== null && _props$value !== void 0 ? _props$value : {};
    var _useState = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])((_propsValue$ripple = propsValue.ripple) !== null && _propsValue$ripple !== void 0 ? _propsValue$ripple : false), _useState2 = _slicedToArray(_useState, 2), ripple = _useState2[0], setRipple = _useState2[1];
    var _useState3 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])((_propsValue$inputStyl = propsValue.inputStyle) !== null && _propsValue$inputStyl !== void 0 ? _propsValue$inputStyl : 'outlined'), _useState4 = _slicedToArray(_useState3, 2), inputStyle = _useState4[0], setInputStyle = _useState4[1];
    var _useState5 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])((_propsValue$locale = propsValue.locale) !== null && _propsValue$locale !== void 0 ? _propsValue$locale : 'en'), _useState6 = _slicedToArray(_useState5, 2), locale = _useState6[0], setLocale = _useState6[1];
    var _useState7 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])((_propsValue$appendTo = propsValue.appendTo) !== null && _propsValue$appendTo !== void 0 ? _propsValue$appendTo : null), _useState8 = _slicedToArray(_useState7, 2), appendTo = _useState8[0], setAppendTo = _useState8[1];
    var _useState9 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])((_propsValue$styleCont = propsValue.styleContainer) !== null && _propsValue$styleCont !== void 0 ? _propsValue$styleCont : null), _useState10 = _slicedToArray(_useState9, 2), styleContainer = _useState10[0], setStyleContainer = _useState10[1];
    var _useState11 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])((_propsValue$cssTransi = propsValue.cssTransition) !== null && _propsValue$cssTransi !== void 0 ? _propsValue$cssTransi : true), _useState12 = _slicedToArray(_useState11, 2), cssTransition = _useState12[0], setCssTransition = _useState12[1];
    var _useState13 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])((_propsValue$autoZInde = propsValue.autoZIndex) !== null && _propsValue$autoZInde !== void 0 ? _propsValue$autoZInde : true), _useState14 = _slicedToArray(_useState13, 2), autoZIndex = _useState14[0], setAutoZIndex = _useState14[1];
    var _useState15 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])((_propsValue$hideOverl = propsValue.hideOverlaysOnDocumentScrolling) !== null && _propsValue$hideOverl !== void 0 ? _propsValue$hideOverl : false), _useState16 = _slicedToArray(_useState15, 2), hideOverlaysOnDocumentScrolling = _useState16[0], setHideOverlaysOnDocumentScrolling = _useState16[1];
    var _useState17 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])((_propsValue$nonce = propsValue.nonce) !== null && _propsValue$nonce !== void 0 ? _propsValue$nonce : null), _useState18 = _slicedToArray(_useState17, 2), nonce = _useState18[0], setNonce = _useState18[1];
    var _useState19 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])((_propsValue$nullSortO = propsValue.nullSortOrder) !== null && _propsValue$nullSortO !== void 0 ? _propsValue$nullSortO : 1), _useState20 = _slicedToArray(_useState19, 2), nullSortOrder = _useState20[0], setNullSortOrder = _useState20[1];
    var _useState21 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])((_propsValue$zIndex = propsValue.zIndex) !== null && _propsValue$zIndex !== void 0 ? _propsValue$zIndex : {
        modal: 1100,
        overlay: 1000,
        menu: 1000,
        tooltip: 1100,
        toast: 1200
    }), _useState22 = _slicedToArray(_useState21, 2), zIndex = _useState22[0], setZIndex = _useState22[1];
    var _useState23 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])((_propsValue$ptOptions = propsValue.ptOptions) !== null && _propsValue$ptOptions !== void 0 ? _propsValue$ptOptions : {
        mergeSections: true,
        mergeProps: true
    }), _useState24 = _slicedToArray(_useState23, 2), ptOptions = _useState24[0], setPtOptions = _useState24[1];
    var _useState25 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])((_propsValue$pt = propsValue.pt) !== null && _propsValue$pt !== void 0 ? _propsValue$pt : undefined), _useState26 = _slicedToArray(_useState25, 2), pt = _useState26[0], setPt = _useState26[1];
    var _useState27 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])((_propsValue$unstyled = propsValue.unstyled) !== null && _propsValue$unstyled !== void 0 ? _propsValue$unstyled : false), _useState28 = _slicedToArray(_useState27, 2), unstyled = _useState28[0], setUnstyled = _useState28[1];
    var _useState29 = (0, __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["useState"])((_propsValue$filterMat = propsValue.filterMatchModeOptions) !== null && _propsValue$filterMat !== void 0 ? _propsValue$filterMat : {
        text: [
            FilterMatchMode.STARTS_WITH,
            FilterMatchMode.CONTAINS,
            FilterMatchMode.NOT_CONTAINS,
            FilterMatchMode.ENDS_WITH,
            FilterMatchMode.EQUALS,
            FilterMatchMode.NOT_EQUALS
        ],
        numeric: [
            FilterMatchMode.EQUALS,
            FilterMatchMode.NOT_EQUALS,
            FilterMatchMode.LESS_THAN,
            FilterMatchMode.LESS_THAN_OR_EQUAL_TO,
            FilterMatchMode.GREATER_THAN,
            FilterMatchMode.GREATER_THAN_OR_EQUAL_TO
        ],
        date: [
            FilterMatchMode.DATE_IS,
            FilterMatchMode.DATE_IS_NOT,
            FilterMatchMode.DATE_BEFORE,
            FilterMatchMode.DATE_AFTER
        ]
    }), _useState30 = _slicedToArray(_useState29, 2), filterMatchModeOptions = _useState30[0], setFilterMatchModeOptions = _useState30[1];
    var changeTheme = function changeTheme(currentTheme, newTheme, linkElementId, callback) {
        var _linkElement$parentNo;
        var linkElement = document.getElementById(linkElementId);
        if (!linkElement) {
            throw Error("Element with id ".concat(linkElementId, " not found."));
        }
        var newThemeUrl = linkElement.getAttribute('href').replace(currentTheme, newTheme);
        var newLinkElement = document.createElement('link');
        newLinkElement.setAttribute('rel', 'stylesheet');
        newLinkElement.setAttribute('id', linkElementId);
        newLinkElement.setAttribute('href', newThemeUrl);
        newLinkElement.addEventListener('load', function() {
            if (callback) {
                callback();
            }
        });
        (_linkElement$parentNo = linkElement.parentNode) === null || _linkElement$parentNo === void 0 || _linkElement$parentNo.replaceChild(newLinkElement, linkElement);
    };
    /**
   * @deprecated
   */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].useEffect({
        "PrimeReactProvider.useEffect": function() {
            PrimeReact$1.ripple = ripple;
        }
    }["PrimeReactProvider.useEffect"], [
        ripple
    ]);
    /**
   * @deprecated
   */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].useEffect({
        "PrimeReactProvider.useEffect": function() {
            PrimeReact$1.inputStyle = inputStyle;
        }
    }["PrimeReactProvider.useEffect"], [
        inputStyle
    ]);
    /**
   * @deprecated
   */ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].useEffect({
        "PrimeReactProvider.useEffect": function() {
            PrimeReact$1.locale = locale;
        }
    }["PrimeReactProvider.useEffect"], [
        locale
    ]);
    var value = {
        changeTheme: changeTheme,
        ripple: ripple,
        setRipple: setRipple,
        inputStyle: inputStyle,
        setInputStyle: setInputStyle,
        locale: locale,
        setLocale: setLocale,
        appendTo: appendTo,
        setAppendTo: setAppendTo,
        styleContainer: styleContainer,
        setStyleContainer: setStyleContainer,
        cssTransition: cssTransition,
        setCssTransition: setCssTransition,
        autoZIndex: autoZIndex,
        setAutoZIndex: setAutoZIndex,
        hideOverlaysOnDocumentScrolling: hideOverlaysOnDocumentScrolling,
        setHideOverlaysOnDocumentScrolling: setHideOverlaysOnDocumentScrolling,
        nonce: nonce,
        setNonce: setNonce,
        nullSortOrder: nullSortOrder,
        setNullSortOrder: setNullSortOrder,
        zIndex: zIndex,
        setZIndex: setZIndex,
        ptOptions: ptOptions,
        setPtOptions: setPtOptions,
        pt: pt,
        setPt: setPt,
        filterMatchModeOptions: filterMatchModeOptions,
        setFilterMatchModeOptions: setFilterMatchModeOptions,
        unstyled: unstyled,
        setUnstyled: setUnstyled
    };
    return /*#__PURE__*/ __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$compiled$2f$react$2f$index$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].createElement(PrimeReactContext.Provider, {
        value: value
    }, props.children);
};
var PrimeReact = PrimeReact$1;
;
}}),
"[project]/node_modules/next/dist/shared/lib/router/utils/handle-smooth-scroll.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
/**
 * Run function with `scroll-behavior: auto` applied to `<html/>`.
 * This css change will be reverted after the function finishes.
 */ "use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "handleSmoothScroll", {
    enumerable: true,
    get: function() {
        return handleSmoothScroll;
    }
});
function handleSmoothScroll(fn, options) {
    if (options === void 0) options = {};
    // if only the hash is changed, we don't need to disable smooth scrolling
    // we only care to prevent smooth scrolling when navigating to a new page to avoid jarring UX
    if (options.onlyHashChange) {
        fn();
        return;
    }
    const htmlElement = document.documentElement;
    const existing = htmlElement.style.scrollBehavior;
    htmlElement.style.scrollBehavior = 'auto';
    if (!options.dontForceLayout) {
        // In Chrome-based browsers we need to force reflow before calling `scrollTo`.
        // Otherwise it will not pickup the change in scrollBehavior
        // More info here: https://github.com/vercel/next.js/issues/40719#issuecomment-1336248042
        htmlElement.getClientRects();
    }
    fn();
    htmlElement.style.scrollBehavior = existing;
} //# sourceMappingURL=handle-smooth-scroll.js.map
}}),
"[project]/node_modules/next/dist/client/components/layout-router.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, /**
 * OuterLayoutRouter handles the current segment as well as <Offscreen> rendering of other segments.
 * It can be rendered next to each other with a different `parallelRouterKey`, allowing for Parallel routes.
 */ "default", {
    enumerable: true,
    get: function() {
        return OuterLayoutRouter;
    }
});
const _interop_require_default = __turbopack_require__("[project]/node_modules/@swc/helpers/cjs/_interop_require_default.cjs [app-client] (ecmascript)");
const _interop_require_wildcard = __turbopack_require__("[project]/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs [app-client] (ecmascript)");
const _jsxruntime = __turbopack_require__("[project]/node_modules/next/dist/compiled/react/jsx-runtime.js [app-client] (ecmascript)");
const _react = /*#__PURE__*/ _interop_require_wildcard._(__turbopack_require__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)"));
const _reactdom = /*#__PURE__*/ _interop_require_default._(__turbopack_require__("[project]/node_modules/next/dist/compiled/react-dom/index.js [app-client] (ecmascript)"));
const _approutercontextsharedruntime = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/app-router-context.shared-runtime.js [app-client] (ecmascript)");
const _fetchserverresponse = __turbopack_require__("[project]/node_modules/next/dist/client/components/router-reducer/fetch-server-response.js [app-client] (ecmascript)");
const _unresolvedthenable = __turbopack_require__("[project]/node_modules/next/dist/client/components/unresolved-thenable.js [app-client] (ecmascript)");
const _errorboundary = __turbopack_require__("[project]/node_modules/next/dist/client/components/error-boundary.js [app-client] (ecmascript)");
const _matchsegments = __turbopack_require__("[project]/node_modules/next/dist/client/components/match-segments.js [app-client] (ecmascript)");
const _handlesmoothscroll = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/router/utils/handle-smooth-scroll.js [app-client] (ecmascript)");
const _redirectboundary = __turbopack_require__("[project]/node_modules/next/dist/client/components/redirect-boundary.js [app-client] (ecmascript)");
const _errorboundary1 = __turbopack_require__("[project]/node_modules/next/dist/client/components/http-access-fallback/error-boundary.js [app-client] (ecmascript)");
const _getsegmentvalue = __turbopack_require__("[project]/node_modules/next/dist/client/components/router-reducer/reducers/get-segment-value.js [app-client] (ecmascript)");
const _createroutercachekey = __turbopack_require__("[project]/node_modules/next/dist/client/components/router-reducer/create-router-cache-key.js [app-client] (ecmascript)");
const _hasinterceptionrouteincurrenttree = __turbopack_require__("[project]/node_modules/next/dist/client/components/router-reducer/reducers/has-interception-route-in-current-tree.js [app-client] (ecmascript)");
/**
 * Add refetch marker to router state at the point of the current layout segment.
 * This ensures the response returned is not further down than the current layout segment.
 */ function walkAddRefetch(segmentPathToWalk, treeToRecreate) {
    if (segmentPathToWalk) {
        const [segment, parallelRouteKey] = segmentPathToWalk;
        const isLast = segmentPathToWalk.length === 2;
        if ((0, _matchsegments.matchSegment)(treeToRecreate[0], segment)) {
            if (treeToRecreate[1].hasOwnProperty(parallelRouteKey)) {
                if (isLast) {
                    const subTree = walkAddRefetch(undefined, treeToRecreate[1][parallelRouteKey]);
                    return [
                        treeToRecreate[0],
                        {
                            ...treeToRecreate[1],
                            [parallelRouteKey]: [
                                subTree[0],
                                subTree[1],
                                subTree[2],
                                'refetch'
                            ]
                        }
                    ];
                }
                return [
                    treeToRecreate[0],
                    {
                        ...treeToRecreate[1],
                        [parallelRouteKey]: walkAddRefetch(segmentPathToWalk.slice(2), treeToRecreate[1][parallelRouteKey])
                    }
                ];
            }
        }
    }
    return treeToRecreate;
}
const __DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE = _reactdom.default.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE;
// TODO-APP: Replace with new React API for finding dom nodes without a `ref` when available
/**
 * Wraps ReactDOM.findDOMNode with additional logic to hide React Strict Mode warning
 */ function findDOMNode(instance) {
    // Tree-shake for server bundle
    if (typeof window === 'undefined') return null;
    // __DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE.findDOMNode is null during module init.
    // We need to lazily reference it.
    const internal_reactDOMfindDOMNode = __DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE.findDOMNode;
    return internal_reactDOMfindDOMNode(instance);
}
const rectProperties = [
    'bottom',
    'height',
    'left',
    'right',
    'top',
    'width',
    'x',
    'y'
];
/**
 * Check if a HTMLElement is hidden or fixed/sticky position
 */ function shouldSkipElement(element) {
    // we ignore fixed or sticky positioned elements since they'll likely pass the "in-viewport" check
    // and will result in a situation we bail on scroll because of something like a fixed nav,
    // even though the actual page content is offscreen
    if ([
        'sticky',
        'fixed'
    ].includes(getComputedStyle(element).position)) {
        if ("TURBOPACK compile-time truthy", 1) {
            console.warn('Skipping auto-scroll behavior due to `position: sticky` or `position: fixed` on element:', element);
        }
        return true;
    }
    // Uses `getBoundingClientRect` to check if the element is hidden instead of `offsetParent`
    // because `offsetParent` doesn't consider document/body
    const rect = element.getBoundingClientRect();
    return rectProperties.every((item)=>rect[item] === 0);
}
/**
 * Check if the top corner of the HTMLElement is in the viewport.
 */ function topOfElementInViewport(element, viewportHeight) {
    const rect = element.getBoundingClientRect();
    return rect.top >= 0 && rect.top <= viewportHeight;
}
/**
 * Find the DOM node for a hash fragment.
 * If `top` the page has to scroll to the top of the page. This mirrors the browser's behavior.
 * If the hash fragment is an id, the page has to scroll to the element with that id.
 * If the hash fragment is a name, the page has to scroll to the first element with that name.
 */ function getHashFragmentDomNode(hashFragment) {
    // If the hash fragment is `top` the page has to scroll to the top of the page.
    if (hashFragment === 'top') {
        return document.body;
    }
    var _document_getElementById;
    // If the hash fragment is an id, the page has to scroll to the element with that id.
    return (_document_getElementById = document.getElementById(hashFragment)) != null ? _document_getElementById : document.getElementsByName(hashFragment)[0];
}
class InnerScrollAndFocusHandler extends _react.default.Component {
    componentDidMount() {
        this.handlePotentialScroll();
    }
    componentDidUpdate() {
        // Because this property is overwritten in handlePotentialScroll it's fine to always run it when true as it'll be set to false for subsequent renders.
        if (this.props.focusAndScrollRef.apply) {
            this.handlePotentialScroll();
        }
    }
    render() {
        return this.props.children;
    }
    constructor(...args){
        super(...args), this.handlePotentialScroll = ()=>{
            // Handle scroll and focus, it's only applied once in the first useEffect that triggers that changed.
            const { focusAndScrollRef, segmentPath } = this.props;
            if (focusAndScrollRef.apply) {
                // segmentPaths is an array of segment paths that should be scrolled to
                // if the current segment path is not in the array, the scroll is not applied
                // unless the array is empty, in which case the scroll is always applied
                if (focusAndScrollRef.segmentPaths.length !== 0 && !focusAndScrollRef.segmentPaths.some((scrollRefSegmentPath)=>segmentPath.every((segment, index)=>(0, _matchsegments.matchSegment)(segment, scrollRefSegmentPath[index])))) {
                    return;
                }
                let domNode = null;
                const hashFragment = focusAndScrollRef.hashFragment;
                if (hashFragment) {
                    domNode = getHashFragmentDomNode(hashFragment);
                }
                // `findDOMNode` is tricky because it returns just the first child if the component is a fragment.
                // This already caused a bug where the first child was a <link/> in head.
                if (!domNode) {
                    domNode = findDOMNode(this);
                }
                // If there is no DOM node this layout-router level is skipped. It'll be handled higher-up in the tree.
                if (!(domNode instanceof Element)) {
                    return;
                }
                // Verify if the element is a HTMLElement and if we want to consider it for scroll behavior.
                // If the element is skipped, try to select the next sibling and try again.
                while(!(domNode instanceof HTMLElement) || shouldSkipElement(domNode)){
                    // No siblings found that match the criteria are found, so handle scroll higher up in the tree instead.
                    if (domNode.nextElementSibling === null) {
                        return;
                    }
                    domNode = domNode.nextElementSibling;
                }
                // State is mutated to ensure that the focus and scroll is applied only once.
                focusAndScrollRef.apply = false;
                focusAndScrollRef.hashFragment = null;
                focusAndScrollRef.segmentPaths = [];
                (0, _handlesmoothscroll.handleSmoothScroll)(()=>{
                    // In case of hash scroll, we only need to scroll the element into view
                    if (hashFragment) {
                        ;
                        domNode.scrollIntoView();
                        return;
                    }
                    // Store the current viewport height because reading `clientHeight` causes a reflow,
                    // and it won't change during this function.
                    const htmlElement = document.documentElement;
                    const viewportHeight = htmlElement.clientHeight;
                    // If the element's top edge is already in the viewport, exit early.
                    if (topOfElementInViewport(domNode, viewportHeight)) {
                        return;
                    }
                    // Otherwise, try scrolling go the top of the document to be backward compatible with pages
                    // scrollIntoView() called on `<html/>` element scrolls horizontally on chrome and firefox (that shouldn't happen)
                    // We could use it to scroll horizontally following RTL but that also seems to be broken - it will always scroll left
                    // scrollLeft = 0 also seems to ignore RTL and manually checking for RTL is too much hassle so we will scroll just vertically
                    htmlElement.scrollTop = 0;
                    // Scroll to domNode if domNode is not in viewport when scrolled to top of document
                    if (!topOfElementInViewport(domNode, viewportHeight)) {
                        // Scroll into view doesn't scroll horizontally by default when not needed
                        ;
                        domNode.scrollIntoView();
                    }
                }, {
                    // We will force layout by querying domNode position
                    dontForceLayout: true,
                    onlyHashChange: focusAndScrollRef.onlyHashChange
                });
                // Mutate after scrolling so that it can be read by `handleSmoothScroll`
                focusAndScrollRef.onlyHashChange = false;
                // Set focus on the element
                domNode.focus();
            }
        };
    }
}
function ScrollAndFocusHandler(param) {
    let { segmentPath, children } = param;
    const context = (0, _react.useContext)(_approutercontextsharedruntime.GlobalLayoutRouterContext);
    if (!context) {
        throw new Error('invariant global layout router not mounted');
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(InnerScrollAndFocusHandler, {
        segmentPath: segmentPath,
        focusAndScrollRef: context.focusAndScrollRef,
        children: children
    });
}
/**
 * InnerLayoutRouter handles rendering the provided segment based on the cache.
 */ function InnerLayoutRouter(param) {
    let { parallelRouterKey, url, childNodes, segmentPath, tree, // isActive,
    cacheKey } = param;
    const context = (0, _react.useContext)(_approutercontextsharedruntime.GlobalLayoutRouterContext);
    if (!context) {
        throw new Error('invariant global layout router not mounted');
    }
    const { changeByServerResponse, tree: fullTree } = context;
    // Read segment path from the parallel router cache node.
    let childNode = childNodes.get(cacheKey);
    // When data is not available during rendering client-side we need to fetch
    // it from the server.
    if (childNode === undefined) {
        const newLazyCacheNode = {
            lazyData: null,
            rsc: null,
            prefetchRsc: null,
            head: null,
            prefetchHead: null,
            parallelRoutes: new Map(),
            loading: null
        };
        /**
     * Flight data fetch kicked off during render and put into the cache.
     */ childNode = newLazyCacheNode;
        childNodes.set(cacheKey, newLazyCacheNode);
    }
    // `rsc` represents the renderable node for this segment.
    // If this segment has a `prefetchRsc`, it's the statically prefetched data.
    // We should use that on initial render instead of `rsc`. Then we'll switch
    // to `rsc` when the dynamic response streams in.
    //
    // If no prefetch data is available, then we go straight to rendering `rsc`.
    const resolvedPrefetchRsc = childNode.prefetchRsc !== null ? childNode.prefetchRsc : childNode.rsc;
    // We use `useDeferredValue` to handle switching between the prefetched and
    // final values. The second argument is returned on initial render, then it
    // re-renders with the first argument.
    //
    // @ts-expect-error The second argument to `useDeferredValue` is only
    // available in the experimental builds. When its disabled, it will always
    // return `rsc`.
    const rsc = (0, _react.useDeferredValue)(childNode.rsc, resolvedPrefetchRsc);
    // `rsc` is either a React node or a promise for a React node, except we
    // special case `null` to represent that this segment's data is missing. If
    // it's a promise, we need to unwrap it so we can determine whether or not the
    // data is missing.
    const resolvedRsc = typeof rsc === 'object' && rsc !== null && typeof rsc.then === 'function' ? (0, _react.use)(rsc) : rsc;
    if (!resolvedRsc) {
        // The data for this segment is not available, and there's no pending
        // navigation that will be able to fulfill it. We need to fetch more from
        // the server and patch the cache.
        // Check if there's already a pending request.
        let lazyData = childNode.lazyData;
        if (lazyData === null) {
            /**
       * Router state with refetch marker added
       */ // TODO-APP: remove ''
            const refetchTree = walkAddRefetch([
                '',
                ...segmentPath
            ], fullTree);
            const includeNextUrl = (0, _hasinterceptionrouteincurrenttree.hasInterceptionRouteInCurrentTree)(fullTree);
            childNode.lazyData = lazyData = (0, _fetchserverresponse.fetchServerResponse)(new URL(url, location.origin), {
                flightRouterState: refetchTree,
                nextUrl: includeNextUrl ? context.nextUrl : null
            }).then((serverResponse)=>{
                (0, _react.startTransition)(()=>{
                    changeByServerResponse({
                        previousTree: fullTree,
                        serverResponse
                    });
                });
                return serverResponse;
            });
        }
        // Suspend infinitely as `changeByServerResponse` will cause a different part of the tree to be rendered.
        // A falsey `resolvedRsc` indicates missing data -- we should not commit that branch, and we need to wait for the data to arrive.
        (0, _react.use)(_unresolvedthenable.unresolvedThenable);
    }
    // If we get to this point, then we know we have something we can render.
    const subtree = /*#__PURE__*/ (0, _jsxruntime.jsx)(_approutercontextsharedruntime.LayoutRouterContext.Provider, {
        value: {
            tree: tree[1][parallelRouterKey],
            childNodes: childNode.parallelRoutes,
            // TODO-APP: overriding of url for parallel routes
            url: url,
            loading: childNode.loading
        },
        children: resolvedRsc
    });
    // Ensure root layout is not wrapped in a div as the root layout renders `<html>`
    return subtree;
}
/**
 * Renders suspense boundary with the provided "loading" property as the fallback.
 * If no loading property is provided it renders the children without a suspense boundary.
 */ function LoadingBoundary(param) {
    let { loading, children } = param;
    // If loading is a promise, unwrap it. This happens in cases where we haven't
    // yet received the loading data from the server — which includes whether or
    // not this layout has a loading component at all.
    //
    // It's OK to suspend here instead of inside the fallback because this
    // promise will resolve simultaneously with the data for the segment itself.
    // So it will never suspend for longer than it would have if we didn't use
    // a Suspense fallback at all.
    let loadingModuleData;
    if (typeof loading === 'object' && loading !== null && typeof loading.then === 'function') {
        const promiseForLoading = loading;
        loadingModuleData = (0, _react.use)(promiseForLoading);
    } else {
        loadingModuleData = loading;
    }
    if (loadingModuleData) {
        const loadingRsc = loadingModuleData[0];
        const loadingStyles = loadingModuleData[1];
        const loadingScripts = loadingModuleData[2];
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(_react.Suspense, {
            fallback: /*#__PURE__*/ (0, _jsxruntime.jsxs)(_jsxruntime.Fragment, {
                children: [
                    loadingStyles,
                    loadingScripts,
                    loadingRsc
                ]
            }),
            children: children
        });
    }
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
        children: children
    });
}
function OuterLayoutRouter(param) {
    let { parallelRouterKey, segmentPath, error, errorStyles, errorScripts, templateStyles, templateScripts, template, notFound, forbidden, unauthorized } = param;
    const context = (0, _react.useContext)(_approutercontextsharedruntime.LayoutRouterContext);
    if (!context) {
        throw new Error('invariant expected layout router to be mounted');
    }
    const { childNodes, tree, url, loading } = context;
    // Get the current parallelRouter cache node
    let childNodesForParallelRouter = childNodes.get(parallelRouterKey);
    // If the parallel router cache node does not exist yet, create it.
    // This writes to the cache when there is no item in the cache yet. It never *overwrites* existing cache items which is why it's safe in concurrent mode.
    if (!childNodesForParallelRouter) {
        childNodesForParallelRouter = new Map();
        childNodes.set(parallelRouterKey, childNodesForParallelRouter);
    }
    // Get the active segment in the tree
    // The reason arrays are used in the data format is that these are transferred from the server to the browser so it's optimized to save bytes.
    const treeSegment = tree[1][parallelRouterKey][0];
    // If segment is an array it's a dynamic route and we want to read the dynamic route value as the segment to get from the cache.
    const currentChildSegmentValue = (0, _getsegmentvalue.getSegmentValue)(treeSegment);
    /**
   * Decides which segments to keep rendering, all segments that are not active will be wrapped in `<Offscreen>`.
   */ // TODO-APP: Add handling of `<Offscreen>` when it's available.
    const preservedSegments = [
        treeSegment
    ];
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
        children: preservedSegments.map((preservedSegment)=>{
            const preservedSegmentValue = (0, _getsegmentvalue.getSegmentValue)(preservedSegment);
            const cacheKey = (0, _createroutercachekey.createRouterCacheKey)(preservedSegment);
            return(/*
            - Error boundary
              - Only renders error boundary if error component is provided.
              - Rendered for each segment to ensure they have their own error state.
            - Loading boundary
              - Only renders suspense boundary if loading components is provided.
              - Rendered for each segment to ensure they have their own loading state.
              - Passed to the router during rendering to ensure it can be immediately rendered when suspending on a Flight fetch.
          */ /*#__PURE__*/ (0, _jsxruntime.jsxs)(_approutercontextsharedruntime.TemplateContext.Provider, {
                value: /*#__PURE__*/ (0, _jsxruntime.jsx)(ScrollAndFocusHandler, {
                    segmentPath: segmentPath,
                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_errorboundary.ErrorBoundary, {
                        errorComponent: error,
                        errorStyles: errorStyles,
                        errorScripts: errorScripts,
                        children: /*#__PURE__*/ (0, _jsxruntime.jsx)(LoadingBoundary, {
                            loading: loading,
                            children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_errorboundary1.HTTPAccessFallbackBoundary, {
                                notFound: notFound,
                                forbidden: forbidden,
                                unauthorized: unauthorized,
                                children: /*#__PURE__*/ (0, _jsxruntime.jsx)(_redirectboundary.RedirectBoundary, {
                                    children: /*#__PURE__*/ (0, _jsxruntime.jsx)(InnerLayoutRouter, {
                                        parallelRouterKey: parallelRouterKey,
                                        url: url,
                                        tree: tree,
                                        childNodes: childNodesForParallelRouter,
                                        segmentPath: segmentPath,
                                        cacheKey: cacheKey,
                                        isActive: currentChildSegmentValue === preservedSegmentValue
                                    })
                                })
                            })
                        })
                    })
                }),
                children: [
                    templateStyles,
                    templateScripts,
                    template
                ]
            }, (0, _createroutercachekey.createRouterCacheKey)(preservedSegment, true)));
        })
    });
}
if ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {
    Object.defineProperty(exports.default, '__esModule', {
        value: true
    });
    Object.assign(exports.default, exports);
    module.exports = exports.default;
} //# sourceMappingURL=layout-router.js.map
}}),
"[project]/node_modules/next/dist/client/components/render-from-template-context.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function() {
        return RenderFromTemplateContext;
    }
});
const _interop_require_wildcard = __turbopack_require__("[project]/node_modules/@swc/helpers/cjs/_interop_require_wildcard.cjs [app-client] (ecmascript)");
const _jsxruntime = __turbopack_require__("[project]/node_modules/next/dist/compiled/react/jsx-runtime.js [app-client] (ecmascript)");
const _react = /*#__PURE__*/ _interop_require_wildcard._(__turbopack_require__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)"));
const _approutercontextsharedruntime = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/app-router-context.shared-runtime.js [app-client] (ecmascript)");
function RenderFromTemplateContext() {
    const children = (0, _react.useContext)(_approutercontextsharedruntime.TemplateContext);
    return /*#__PURE__*/ (0, _jsxruntime.jsx)(_jsxruntime.Fragment, {
        children: children
    });
}
if ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {
    Object.defineProperty(exports.default, '__esModule', {
        value: true
    });
    Object.assign(exports.default, exports);
    module.exports = exports.default;
} //# sourceMappingURL=render-from-template-context.js.map
}}),
"[project]/node_modules/next/dist/shared/lib/invariant-error.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "InvariantError", {
    enumerable: true,
    get: function() {
        return InvariantError;
    }
});
class InvariantError extends Error {
    constructor(message, options){
        super("Invariant: " + (message.endsWith('.') ? message : message + '.') + " This is a bug in Next.js.", options);
        this.name = 'InvariantError';
    }
} //# sourceMappingURL=invariant-error.js.map
}}),
"[project]/node_modules/next/dist/server/web/spec-extension/adapters/reflect.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ReflectAdapter", {
    enumerable: true,
    get: function() {
        return ReflectAdapter;
    }
});
class ReflectAdapter {
    static get(target, prop, receiver) {
        const value = Reflect.get(target, prop, receiver);
        if (typeof value === 'function') {
            return value.bind(target);
        }
        return value;
    }
    static set(target, prop, value, receiver) {
        return Reflect.set(target, prop, value, receiver);
    }
    static has(target, prop) {
        return Reflect.has(target, prop);
    }
    static deleteProperty(target, prop) {
        return Reflect.deleteProperty(target, prop);
    }
} //# sourceMappingURL=reflect.js.map
}}),
"[project]/node_modules/next/dist/server/app-render/after-task-async-storage-instance.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "afterTaskAsyncStorageInstance", {
    enumerable: true,
    get: function() {
        return afterTaskAsyncStorageInstance;
    }
});
const _asynclocalstorage = __turbopack_require__("[project]/node_modules/next/dist/server/app-render/async-local-storage.js [app-client] (ecmascript)");
const afterTaskAsyncStorageInstance = (0, _asynclocalstorage.createAsyncLocalStorage)(); //# sourceMappingURL=after-task-async-storage-instance.js.map
}}),
"[project]/node_modules/next/dist/server/app-render/after-task-async-storage.external.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "afterTaskAsyncStorage", {
    enumerable: true,
    get: function() {
        return _aftertaskasyncstorageinstance.afterTaskAsyncStorageInstance;
    }
});
const _aftertaskasyncstorageinstance = __turbopack_require__("[project]/node_modules/next/dist/server/app-render/after-task-async-storage-instance.js [app-client] (ecmascript)"); //# sourceMappingURL=after-task-async-storage.external.js.map
}}),
"[project]/node_modules/next/dist/server/request/utils.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    describeHasCheckingStringProperty: null,
    describeStringPropertyAccess: null,
    isRequestAPICallableInsideAfter: null,
    throwWithStaticGenerationBailoutError: null,
    throwWithStaticGenerationBailoutErrorWithDynamicError: null,
    wellKnownProperties: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    describeHasCheckingStringProperty: function() {
        return describeHasCheckingStringProperty;
    },
    describeStringPropertyAccess: function() {
        return describeStringPropertyAccess;
    },
    isRequestAPICallableInsideAfter: function() {
        return isRequestAPICallableInsideAfter;
    },
    throwWithStaticGenerationBailoutError: function() {
        return throwWithStaticGenerationBailoutError;
    },
    throwWithStaticGenerationBailoutErrorWithDynamicError: function() {
        return throwWithStaticGenerationBailoutErrorWithDynamicError;
    },
    wellKnownProperties: function() {
        return wellKnownProperties;
    }
});
const _staticgenerationbailout = __turbopack_require__("[project]/node_modules/next/dist/client/components/static-generation-bailout.js [app-client] (ecmascript)");
const _aftertaskasyncstorageexternal = __turbopack_require__("[project]/node_modules/next/dist/server/app-render/after-task-async-storage.external.js [app-client] (ecmascript)");
// This regex will have fast negatives meaning valid identifiers may not pass
// this test. However this is only used during static generation to provide hints
// about why a page bailed out of some or all prerendering and we can use bracket notation
// for example while `ಠ_ಠ` is a valid identifier it's ok to print `searchParams['ಠ_ಠ']`
// even if this would have been fine too `searchParams.ಠ_ಠ`
const isDefinitelyAValidIdentifier = /^[A-Za-z_$][A-Za-z0-9_$]*$/;
function describeStringPropertyAccess(target, prop) {
    if (isDefinitelyAValidIdentifier.test(prop)) {
        return `\`${target}.${prop}\``;
    }
    return `\`${target}[${JSON.stringify(prop)}]\``;
}
function describeHasCheckingStringProperty(target, prop) {
    const stringifiedProp = JSON.stringify(prop);
    return `\`Reflect.has(${target}, ${stringifiedProp})\`, \`${stringifiedProp} in ${target}\`, or similar`;
}
function throwWithStaticGenerationBailoutError(route, expression) {
    throw new _staticgenerationbailout.StaticGenBailoutError(`Route ${route} couldn't be rendered statically because it used ${expression}. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`);
}
function throwWithStaticGenerationBailoutErrorWithDynamicError(route, expression) {
    throw new _staticgenerationbailout.StaticGenBailoutError(`Route ${route} with \`dynamic = "error"\` couldn't be rendered statically because it used ${expression}. See more info here: https://nextjs.org/docs/app/building-your-application/rendering/static-and-dynamic#dynamic-rendering`);
}
function isRequestAPICallableInsideAfter() {
    const afterTaskStore = _aftertaskasyncstorageexternal.afterTaskAsyncStorage.getStore();
    return (afterTaskStore == null ? void 0 : afterTaskStore.rootTaskSpawnPhase) === 'action';
}
const wellKnownProperties = new Set([
    'hasOwnProperty',
    'isPrototypeOf',
    'propertyIsEnumerable',
    'toString',
    'valueOf',
    'toLocaleString',
    // Promise prototype
    // fallthrough
    'then',
    'catch',
    'finally',
    // React Promise extension
    // fallthrough
    'status',
    // React introspection
    'displayName',
    // Common tested properties
    // fallthrough
    'toJSON',
    '$$typeof',
    '__esModule'
]); //# sourceMappingURL=utils.js.map
}}),
"[project]/node_modules/next/dist/server/request/search-params.browser.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "createRenderSearchParamsFromClient", {
    enumerable: true,
    get: function() {
        return createRenderSearchParamsFromClient;
    }
});
const _reflect = __turbopack_require__("[project]/node_modules/next/dist/server/web/spec-extension/adapters/reflect.js [app-client] (ecmascript)");
const _utils = __turbopack_require__("[project]/node_modules/next/dist/server/request/utils.js [app-client] (ecmascript)");
function createRenderSearchParamsFromClient(underlyingSearchParams) {
    if ("TURBOPACK compile-time truthy", 1) {
        return makeUntrackedExoticSearchParamsWithDevWarnings(underlyingSearchParams);
    } else {
        "TURBOPACK unreachable";
    }
}
const CachedSearchParams = new WeakMap();
function makeUntrackedExoticSearchParamsWithDevWarnings(underlyingSearchParams) {
    const cachedSearchParams = CachedSearchParams.get(underlyingSearchParams);
    if (cachedSearchParams) {
        return cachedSearchParams;
    }
    const proxiedProperties = new Set();
    const unproxiedProperties = [];
    const promise = Promise.resolve(underlyingSearchParams);
    Object.keys(underlyingSearchParams).forEach((prop)=>{
        if (_utils.wellKnownProperties.has(prop)) {
            // These properties cannot be shadowed because they need to be the
            // true underlying value for Promises to work correctly at runtime
            unproxiedProperties.push(prop);
        } else {
            proxiedProperties.add(prop);
            promise[prop] = underlyingSearchParams[prop];
        }
    });
    const proxiedPromise = new Proxy(promise, {
        get (target, prop, receiver) {
            if (typeof prop === 'string') {
                if (!_utils.wellKnownProperties.has(prop) && (proxiedProperties.has(prop) || // We are accessing a property that doesn't exist on the promise nor
                // the underlying searchParams.
                Reflect.has(target, prop) === false)) {
                    const expression = (0, _utils.describeStringPropertyAccess)('searchParams', prop);
                    warnForSyncAccess(expression);
                }
            }
            return _reflect.ReflectAdapter.get(target, prop, receiver);
        },
        set (target, prop, value, receiver) {
            if (typeof prop === 'string') {
                proxiedProperties.delete(prop);
            }
            return Reflect.set(target, prop, value, receiver);
        },
        has (target, prop) {
            if (typeof prop === 'string') {
                if (!_utils.wellKnownProperties.has(prop) && (proxiedProperties.has(prop) || // We are accessing a property that doesn't exist on the promise nor
                // the underlying searchParams.
                Reflect.has(target, prop) === false)) {
                    const expression = (0, _utils.describeHasCheckingStringProperty)('searchParams', prop);
                    warnForSyncAccess(expression);
                }
            }
            return Reflect.has(target, prop);
        },
        ownKeys (target) {
            warnForSyncSpread();
            return Reflect.ownKeys(target);
        }
    });
    CachedSearchParams.set(underlyingSearchParams, proxiedPromise);
    return proxiedPromise;
}
function makeUntrackedExoticSearchParams(underlyingSearchParams) {
    const cachedSearchParams = CachedSearchParams.get(underlyingSearchParams);
    if (cachedSearchParams) {
        return cachedSearchParams;
    }
    // We don't use makeResolvedReactPromise here because searchParams
    // supports copying with spread and we don't want to unnecessarily
    // instrument the promise with spreadable properties of ReactPromise.
    const promise = Promise.resolve(underlyingSearchParams);
    CachedSearchParams.set(underlyingSearchParams, promise);
    Object.keys(underlyingSearchParams).forEach((prop)=>{
        if (_utils.wellKnownProperties.has(prop)) {
        // These properties cannot be shadowed because they need to be the
        // true underlying value for Promises to work correctly at runtime
        } else {
            ;
            promise[prop] = underlyingSearchParams[prop];
        }
    });
    return promise;
}
const noop = ()=>{};
const warnForSyncAccess = ("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : function warnForSyncAccess(expression) {
    if ("TURBOPACK compile-time falsy", 0) {
        "TURBOPACK unreachable";
    }
    console.error(`A searchParam property was accessed directly with ${expression}. ` + `\`searchParams\` should be unwrapped with \`React.use()\` before accessing its properties. ` + `Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis`);
};
const warnForSyncSpread = ("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : function warnForSyncSpread() {
    if ("TURBOPACK compile-time falsy", 0) {
        "TURBOPACK unreachable";
    }
    console.error(`The keys of \`searchParams\` were accessed directly. ` + `\`searchParams\` should be unwrapped with \`React.use()\` before accessing its properties. ` + `Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis`);
}; //# sourceMappingURL=search-params.browser.js.map
}}),
"[project]/node_modules/next/dist/server/request/params.browser.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "createRenderParamsFromClient", {
    enumerable: true,
    get: function() {
        return createRenderParamsFromClient;
    }
});
const _reflect = __turbopack_require__("[project]/node_modules/next/dist/server/web/spec-extension/adapters/reflect.js [app-client] (ecmascript)");
const _invarianterror = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/invariant-error.js [app-client] (ecmascript)");
const _utils = __turbopack_require__("[project]/node_modules/next/dist/server/request/utils.js [app-client] (ecmascript)");
function createRenderParamsFromClient(underlyingParams) {
    if ("TURBOPACK compile-time truthy", 1) {
        return makeDynamicallyTrackedExoticParamsWithDevWarnings(underlyingParams);
    } else {
        "TURBOPACK unreachable";
    }
}
const CachedParams = new WeakMap();
function makeUntrackedExoticParams(underlyingParams) {
    const cachedParams = CachedParams.get(underlyingParams);
    if (cachedParams) {
        return cachedParams;
    }
    const promise = Promise.resolve(underlyingParams);
    CachedParams.set(underlyingParams, promise);
    Object.keys(underlyingParams).forEach((prop)=>{
        if (_utils.wellKnownProperties.has(prop)) {
        // These properties cannot be shadowed because they need to be the
        // true underlying value for Promises to work correctly at runtime
        } else {
            ;
            promise[prop] = underlyingParams[prop];
        }
    });
    return promise;
}
function makeDynamicallyTrackedExoticParamsWithDevWarnings(underlyingParams) {
    const cachedParams = CachedParams.get(underlyingParams);
    if (cachedParams) {
        return cachedParams;
    }
    // We don't use makeResolvedReactPromise here because params
    // supports copying with spread and we don't want to unnecessarily
    // instrument the promise with spreadable properties of ReactPromise.
    const promise = Promise.resolve(underlyingParams);
    const proxiedProperties = new Set();
    const unproxiedProperties = [];
    Object.keys(underlyingParams).forEach((prop)=>{
        if (_utils.wellKnownProperties.has(prop)) {
        // These properties cannot be shadowed because they need to be the
        // true underlying value for Promises to work correctly at runtime
        } else {
            proxiedProperties.add(prop);
            promise[prop] = underlyingParams[prop];
        }
    });
    const proxiedPromise = new Proxy(promise, {
        get (target, prop, receiver) {
            if (typeof prop === 'string') {
                if (proxiedProperties.has(prop)) {
                    const expression = (0, _utils.describeStringPropertyAccess)('params', prop);
                    warnForSyncAccess(expression);
                }
            }
            return _reflect.ReflectAdapter.get(target, prop, receiver);
        },
        set (target, prop, value, receiver) {
            if (typeof prop === 'string') {
                proxiedProperties.delete(prop);
            }
            return _reflect.ReflectAdapter.set(target, prop, value, receiver);
        },
        ownKeys (target) {
            warnForEnumeration(unproxiedProperties);
            return Reflect.ownKeys(target);
        }
    });
    CachedParams.set(underlyingParams, proxiedPromise);
    return proxiedPromise;
}
const noop = ()=>{};
const warnForSyncAccess = ("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : function warnForSyncAccess(expression) {
    if ("TURBOPACK compile-time falsy", 0) {
        "TURBOPACK unreachable";
    }
    console.error(`A param property was accessed directly with ${expression}. \`params\` is now a Promise and should be unwrapped with \`React.use()\` before accessing properties of the underlying params object. In this version of Next.js direct access to param properties is still supported to facilitate migration but in a future version you will be required to unwrap \`params\` with \`React.use()\`.`);
};
const warnForEnumeration = ("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : function warnForEnumeration(missingProperties) {
    if ("TURBOPACK compile-time falsy", 0) {
        "TURBOPACK unreachable";
    }
    if (missingProperties.length) {
        const describedMissingProperties = describeListOfPropertyNames(missingProperties);
        console.error(`params are being enumerated incompletely missing these properties: ${describedMissingProperties}. ` + `\`params\` should be unwrapped with \`React.use()\` before using its value. ` + `Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis`);
    } else {
        console.error(`params are being enumerated. ` + `\`params\` should be unwrapped with \`React.use()\` before using its value. ` + `Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis`);
    }
};
function describeListOfPropertyNames(properties) {
    switch(properties.length){
        case 0:
            throw new _invarianterror.InvariantError('Expected describeListOfPropertyNames to be called with a non-empty list of strings.');
        case 1:
            return `\`${properties[0]}\``;
        case 2:
            return `\`${properties[0]}\` and \`${properties[1]}\``;
        default:
            {
                let description = '';
                for(let i = 0; i < properties.length - 1; i++){
                    description += `\`${properties[i]}\`, `;
                }
                description += `, and \`${properties[properties.length - 1]}\``;
                return description;
            }
    }
} //# sourceMappingURL=params.browser.js.map
}}),
"[project]/node_modules/next/dist/server/create-deduped-by-callsite-server-error-logger.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "createDedupedByCallsiteServerErrorLoggerDev", {
    enumerable: true,
    get: function() {
        return createDedupedByCallsiteServerErrorLoggerDev;
    }
});
const _react = /*#__PURE__*/ _interop_require_wildcard(__turbopack_require__("[project]/node_modules/next/dist/compiled/react/index.js [app-client] (ecmascript)"));
function _getRequireWildcardCache(nodeInterop) {
    if (typeof WeakMap !== "function") return null;
    var cacheBabelInterop = new WeakMap();
    var cacheNodeInterop = new WeakMap();
    return (_getRequireWildcardCache = function(nodeInterop) {
        return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
    })(nodeInterop);
}
function _interop_require_wildcard(obj, nodeInterop) {
    if (!nodeInterop && obj && obj.__esModule) {
        return obj;
    }
    if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
        return {
            default: obj
        };
    }
    var cache = _getRequireWildcardCache(nodeInterop);
    if (cache && cache.has(obj)) {
        return cache.get(obj);
    }
    var newObj = {
        __proto__: null
    };
    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
    for(var key in obj){
        if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
            if (desc && (desc.get || desc.set)) {
                Object.defineProperty(newObj, key, desc);
            } else {
                newObj[key] = obj[key];
            }
        }
    }
    newObj.default = obj;
    if (cache) {
        cache.set(obj, newObj);
    }
    return newObj;
}
const errorRef = {
    current: null
};
// React.cache is currently only available in canary/experimental React channels.
const cache = typeof _react.cache === 'function' ? _react.cache : (fn)=>fn;
// When Dynamic IO is enabled, we record these as errors so that they
// are captured by the dev overlay as it's more critical to fix these
// when enabled.
const logErrorOrWarn = ("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : console.warn;
// We don't want to dedupe across requests.
// The developer might've just attempted to fix the warning so we should warn again if it still happens.
const flushCurrentErrorIfNew = cache((key)=>{
    try {
        logErrorOrWarn(errorRef.current);
    } finally{
        errorRef.current = null;
    }
});
function createDedupedByCallsiteServerErrorLoggerDev(getMessage) {
    return function logDedupedError(...args) {
        const message = getMessage(...args);
        if ("TURBOPACK compile-time truthy", 1) {
            var _stack;
            const callStackFrames = (_stack = new Error().stack) == null ? void 0 : _stack.split('\n');
            if (callStackFrames === undefined || callStackFrames.length < 4) {
                logErrorOrWarn(message);
            } else {
                // Error:
                //   logDedupedError
                //   asyncApiBeingAccessedSynchronously
                //   <userland callsite>
                // TODO: This breaks if sourcemaps with ignore lists are enabled.
                const key = callStackFrames[4];
                errorRef.current = message;
                flushCurrentErrorIfNew(key);
            }
        } else {
            "TURBOPACK unreachable";
        }
    };
} //# sourceMappingURL=create-deduped-by-callsite-server-error-logger.js.map
}}),
"[project]/node_modules/next/dist/lib/scheduler.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    atLeastOneTask: null,
    scheduleImmediate: null,
    scheduleOnNextTick: null,
    waitAtLeastOneReactRenderTask: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    atLeastOneTask: function() {
        return atLeastOneTask;
    },
    scheduleImmediate: function() {
        return scheduleImmediate;
    },
    scheduleOnNextTick: function() {
        return scheduleOnNextTick;
    },
    waitAtLeastOneReactRenderTask: function() {
        return waitAtLeastOneReactRenderTask;
    }
});
const scheduleOnNextTick = (cb)=>{
    // We use Promise.resolve().then() here so that the operation is scheduled at
    // the end of the promise job queue, we then add it to the next process tick
    // to ensure it's evaluated afterwards.
    //
    // This was inspired by the implementation of the DataLoader interface: https://github.com/graphql/dataloader/blob/d336bd15282664e0be4b4a657cb796f09bafbc6b/src/index.js#L213-L255
    //
    Promise.resolve().then(()=>{
        if ("TURBOPACK compile-time falsy", 0) {
            "TURBOPACK unreachable";
        } else {
            __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__["default"].nextTick(cb);
        }
    });
};
const scheduleImmediate = (cb)=>{
    if ("TURBOPACK compile-time falsy", 0) {
        "TURBOPACK unreachable";
    } else {
        setImmediate(cb);
    }
};
function atLeastOneTask() {
    return new Promise((resolve)=>scheduleImmediate(resolve));
}
function waitAtLeastOneReactRenderTask() {
    if ("TURBOPACK compile-time falsy", 0) {
        "TURBOPACK unreachable";
    } else {
        return new Promise((r)=>setImmediate(r));
    }
} //# sourceMappingURL=scheduler.js.map
}}),
"[project]/node_modules/next/dist/server/request/search-params.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    createPrerenderSearchParamsForClientPage: null,
    createSearchParamsFromClient: null,
    createServerSearchParamsForMetadata: null,
    createServerSearchParamsForServerPage: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createPrerenderSearchParamsForClientPage: function() {
        return createPrerenderSearchParamsForClientPage;
    },
    createSearchParamsFromClient: function() {
        return createSearchParamsFromClient;
    },
    createServerSearchParamsForMetadata: function() {
        return createServerSearchParamsForMetadata;
    },
    createServerSearchParamsForServerPage: function() {
        return createServerSearchParamsForServerPage;
    }
});
const _reflect = __turbopack_require__("[project]/node_modules/next/dist/server/web/spec-extension/adapters/reflect.js [app-client] (ecmascript)");
const _dynamicrendering = __turbopack_require__("[project]/node_modules/next/dist/server/app-render/dynamic-rendering.js [app-client] (ecmascript)");
const _workunitasyncstorageexternal = __turbopack_require__("[project]/node_modules/next/dist/server/app-render/work-unit-async-storage.external.js [app-client] (ecmascript)");
const _invarianterror = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/invariant-error.js [app-client] (ecmascript)");
const _dynamicrenderingutils = __turbopack_require__("[project]/node_modules/next/dist/server/dynamic-rendering-utils.js [app-client] (ecmascript)");
const _creatededupedbycallsiteservererrorlogger = __turbopack_require__("[project]/node_modules/next/dist/server/create-deduped-by-callsite-server-error-logger.js [app-client] (ecmascript)");
const _utils = __turbopack_require__("[project]/node_modules/next/dist/server/request/utils.js [app-client] (ecmascript)");
const _scheduler = __turbopack_require__("[project]/node_modules/next/dist/lib/scheduler.js [app-client] (ecmascript)");
function createSearchParamsFromClient(underlyingSearchParams, workStore) {
    const workUnitStore = _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();
    if (workUnitStore) {
        switch(workUnitStore.type){
            case 'prerender':
            case 'prerender-ppr':
            case 'prerender-legacy':
                return createPrerenderSearchParams(workStore, workUnitStore);
            default:
        }
    }
    return createRenderSearchParams(underlyingSearchParams, workStore);
}
const createServerSearchParamsForMetadata = createServerSearchParamsForServerPage;
function createServerSearchParamsForServerPage(underlyingSearchParams, workStore) {
    const workUnitStore = _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();
    if (workUnitStore) {
        switch(workUnitStore.type){
            case 'prerender':
            case 'prerender-ppr':
            case 'prerender-legacy':
                return createPrerenderSearchParams(workStore, workUnitStore);
            default:
        }
    }
    return createRenderSearchParams(underlyingSearchParams, workStore);
}
function createPrerenderSearchParamsForClientPage(workStore) {
    if (workStore.forceStatic) {
        // When using forceStatic we override all other logic and always just return an empty
        // dictionary object.
        return Promise.resolve({});
    }
    const prerenderStore = _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();
    if (prerenderStore && prerenderStore.type === 'prerender') {
        // dynamicIO Prerender
        // We're prerendering in a mode that aborts (dynamicIO) and should stall
        // the promise to ensure the RSC side is considered dynamic
        return (0, _dynamicrenderingutils.makeHangingPromise)(prerenderStore.renderSignal, '`searchParams`');
    }
    // We're prerendering in a mode that does not aborts. We resolve the promise without
    // any tracking because we're just transporting a value from server to client where the tracking
    // will be applied.
    return Promise.resolve({});
}
function createPrerenderSearchParams(workStore, prerenderStore) {
    if (workStore.forceStatic) {
        // When using forceStatic we override all other logic and always just return an empty
        // dictionary object.
        return Promise.resolve({});
    }
    if (prerenderStore.type === 'prerender') {
        // We are in a dynamicIO (PPR or otherwise) prerender
        return makeAbortingExoticSearchParams(workStore.route, prerenderStore);
    }
    // The remaining cases are prerender-ppr and prerender-legacy
    // We are in a legacy static generation and need to interrupt the prerender
    // when search params are accessed.
    return makeErroringExoticSearchParams(workStore, prerenderStore);
}
function createRenderSearchParams(underlyingSearchParams, workStore) {
    if (workStore.forceStatic) {
        // When using forceStatic we override all other logic and always just return an empty
        // dictionary object.
        return Promise.resolve({});
    } else {
        if (("TURBOPACK compile-time value", "development") === 'development' && !workStore.isPrefetchRequest) {
            return makeDynamicallyTrackedExoticSearchParamsWithDevWarnings(underlyingSearchParams, workStore);
        } else {
            return makeUntrackedExoticSearchParams(underlyingSearchParams, workStore);
        }
    }
}
const CachedSearchParams = new WeakMap();
function makeAbortingExoticSearchParams(route, prerenderStore) {
    const cachedSearchParams = CachedSearchParams.get(prerenderStore);
    if (cachedSearchParams) {
        return cachedSearchParams;
    }
    const promise = (0, _dynamicrenderingutils.makeHangingPromise)(prerenderStore.renderSignal, '`searchParams`');
    const proxiedPromise = new Proxy(promise, {
        get (target, prop, receiver) {
            if (Object.hasOwn(promise, prop)) {
                // The promise has this property directly. we must return it.
                // We know it isn't a dynamic access because it can only be something
                // that was previously written to the promise and thus not an underlying searchParam value
                return _reflect.ReflectAdapter.get(target, prop, receiver);
            }
            switch(prop){
                case 'then':
                    {
                        const expression = '`await searchParams`, `searchParams.then`, or similar';
                        (0, _dynamicrendering.annotateDynamicAccess)(expression, prerenderStore);
                        return _reflect.ReflectAdapter.get(target, prop, receiver);
                    }
                case 'status':
                    {
                        const expression = '`use(searchParams)`, `searchParams.status`, or similar';
                        (0, _dynamicrendering.annotateDynamicAccess)(expression, prerenderStore);
                        return _reflect.ReflectAdapter.get(target, prop, receiver);
                    }
                // Object prototype
                case 'hasOwnProperty':
                case 'isPrototypeOf':
                case 'propertyIsEnumerable':
                case 'toString':
                case 'valueOf':
                case 'toLocaleString':
                // Promise prototype
                // fallthrough
                case 'catch':
                case 'finally':
                // Common tested properties
                // fallthrough
                case 'toJSON':
                case '$$typeof':
                case '__esModule':
                    {
                        // These properties cannot be shadowed because they need to be the
                        // true underlying value for Promises to work correctly at runtime
                        return _reflect.ReflectAdapter.get(target, prop, receiver);
                    }
                default:
                    {
                        if (typeof prop === 'string') {
                            const expression = (0, _utils.describeStringPropertyAccess)('searchParams', prop);
                            const error = createSearchAccessError(route, expression);
                            (0, _dynamicrendering.abortAndThrowOnSynchronousRequestDataAccess)(route, expression, error, prerenderStore);
                        }
                        return _reflect.ReflectAdapter.get(target, prop, receiver);
                    }
            }
        },
        has (target, prop) {
            // We don't expect key checking to be used except for testing the existence of
            // searchParams so we make all has tests trigger dynamic. this means that `promise.then`
            // can resolve to the then function on the Promise prototype but 'then' in promise will assume
            // you are testing whether the searchParams has a 'then' property.
            if (typeof prop === 'string') {
                const expression = (0, _utils.describeHasCheckingStringProperty)('searchParams', prop);
                const error = createSearchAccessError(route, expression);
                (0, _dynamicrendering.abortAndThrowOnSynchronousRequestDataAccess)(route, expression, error, prerenderStore);
            }
            return _reflect.ReflectAdapter.has(target, prop);
        },
        ownKeys () {
            const expression = '`{...searchParams}`, `Object.keys(searchParams)`, or similar';
            const error = createSearchAccessError(route, expression);
            (0, _dynamicrendering.abortAndThrowOnSynchronousRequestDataAccess)(route, expression, error, prerenderStore);
        }
    });
    CachedSearchParams.set(prerenderStore, proxiedPromise);
    return proxiedPromise;
}
function makeErroringExoticSearchParams(workStore, prerenderStore) {
    const cachedSearchParams = CachedSearchParams.get(workStore);
    if (cachedSearchParams) {
        return cachedSearchParams;
    }
    const underlyingSearchParams = {};
    // For search params we don't construct a ReactPromise because we want to interrupt
    // rendering on any property access that was not set from outside and so we only want
    // to have properties like value and status if React sets them.
    const promise = Promise.resolve(underlyingSearchParams);
    const proxiedPromise = new Proxy(promise, {
        get (target, prop, receiver) {
            if (Object.hasOwn(promise, prop)) {
                // The promise has this property directly. we must return it.
                // We know it isn't a dynamic access because it can only be something
                // that was previously written to the promise and thus not an underlying searchParam value
                return _reflect.ReflectAdapter.get(target, prop, receiver);
            }
            switch(prop){
                // Object prototype
                case 'hasOwnProperty':
                case 'isPrototypeOf':
                case 'propertyIsEnumerable':
                case 'toString':
                case 'valueOf':
                case 'toLocaleString':
                // Promise prototype
                // fallthrough
                case 'catch':
                case 'finally':
                // Common tested properties
                // fallthrough
                case 'toJSON':
                case '$$typeof':
                case '__esModule':
                    {
                        // These properties cannot be shadowed because they need to be the
                        // true underlying value for Promises to work correctly at runtime
                        return _reflect.ReflectAdapter.get(target, prop, receiver);
                    }
                case 'then':
                    {
                        const expression = '`await searchParams`, `searchParams.then`, or similar';
                        if (workStore.dynamicShouldError) {
                            (0, _utils.throwWithStaticGenerationBailoutErrorWithDynamicError)(workStore.route, expression);
                        } else if (prerenderStore.type === 'prerender-ppr') {
                            // PPR Prerender (no dynamicIO)
                            (0, _dynamicrendering.postponeWithTracking)(workStore.route, expression, prerenderStore.dynamicTracking);
                        } else {
                            // Legacy Prerender
                            (0, _dynamicrendering.throwToInterruptStaticGeneration)(expression, workStore, prerenderStore);
                        }
                        return;
                    }
                case 'status':
                    {
                        const expression = '`use(searchParams)`, `searchParams.status`, or similar';
                        if (workStore.dynamicShouldError) {
                            (0, _utils.throwWithStaticGenerationBailoutErrorWithDynamicError)(workStore.route, expression);
                        } else if (prerenderStore.type === 'prerender-ppr') {
                            // PPR Prerender (no dynamicIO)
                            (0, _dynamicrendering.postponeWithTracking)(workStore.route, expression, prerenderStore.dynamicTracking);
                        } else {
                            // Legacy Prerender
                            (0, _dynamicrendering.throwToInterruptStaticGeneration)(expression, workStore, prerenderStore);
                        }
                        return;
                    }
                default:
                    {
                        if (typeof prop === 'string') {
                            const expression = (0, _utils.describeStringPropertyAccess)('searchParams', prop);
                            if (workStore.dynamicShouldError) {
                                (0, _utils.throwWithStaticGenerationBailoutErrorWithDynamicError)(workStore.route, expression);
                            } else if (prerenderStore.type === 'prerender-ppr') {
                                // PPR Prerender (no dynamicIO)
                                (0, _dynamicrendering.postponeWithTracking)(workStore.route, expression, prerenderStore.dynamicTracking);
                            } else {
                                // Legacy Prerender
                                (0, _dynamicrendering.throwToInterruptStaticGeneration)(expression, workStore, prerenderStore);
                            }
                        }
                        return _reflect.ReflectAdapter.get(target, prop, receiver);
                    }
            }
        },
        has (target, prop) {
            // We don't expect key checking to be used except for testing the existence of
            // searchParams so we make all has tests trigger dynamic. this means that `promise.then`
            // can resolve to the then function on the Promise prototype but 'then' in promise will assume
            // you are testing whether the searchParams has a 'then' property.
            if (typeof prop === 'string') {
                const expression = (0, _utils.describeHasCheckingStringProperty)('searchParams', prop);
                if (workStore.dynamicShouldError) {
                    (0, _utils.throwWithStaticGenerationBailoutErrorWithDynamicError)(workStore.route, expression);
                } else if (prerenderStore.type === 'prerender-ppr') {
                    // PPR Prerender (no dynamicIO)
                    (0, _dynamicrendering.postponeWithTracking)(workStore.route, expression, prerenderStore.dynamicTracking);
                } else {
                    // Legacy Prerender
                    (0, _dynamicrendering.throwToInterruptStaticGeneration)(expression, workStore, prerenderStore);
                }
                return false;
            }
            return _reflect.ReflectAdapter.has(target, prop);
        },
        ownKeys () {
            const expression = '`{...searchParams}`, `Object.keys(searchParams)`, or similar';
            if (workStore.dynamicShouldError) {
                (0, _utils.throwWithStaticGenerationBailoutErrorWithDynamicError)(workStore.route, expression);
            } else if (prerenderStore.type === 'prerender-ppr') {
                // PPR Prerender (no dynamicIO)
                (0, _dynamicrendering.postponeWithTracking)(workStore.route, expression, prerenderStore.dynamicTracking);
            } else {
                // Legacy Prerender
                (0, _dynamicrendering.throwToInterruptStaticGeneration)(expression, workStore, prerenderStore);
            }
        }
    });
    CachedSearchParams.set(workStore, proxiedPromise);
    return proxiedPromise;
}
function makeUntrackedExoticSearchParams(underlyingSearchParams, store) {
    const cachedSearchParams = CachedSearchParams.get(underlyingSearchParams);
    if (cachedSearchParams) {
        return cachedSearchParams;
    }
    // We don't use makeResolvedReactPromise here because searchParams
    // supports copying with spread and we don't want to unnecessarily
    // instrument the promise with spreadable properties of ReactPromise.
    const promise = Promise.resolve(underlyingSearchParams);
    CachedSearchParams.set(underlyingSearchParams, promise);
    Object.keys(underlyingSearchParams).forEach((prop)=>{
        switch(prop){
            // Object prototype
            case 'hasOwnProperty':
            case 'isPrototypeOf':
            case 'propertyIsEnumerable':
            case 'toString':
            case 'valueOf':
            case 'toLocaleString':
            // Promise prototype
            // fallthrough
            case 'then':
            case 'catch':
            case 'finally':
            // React Promise extension
            // fallthrough
            case 'status':
            // Common tested properties
            // fallthrough
            case 'toJSON':
            case '$$typeof':
            case '__esModule':
                {
                    break;
                }
            default:
                {
                    Object.defineProperty(promise, prop, {
                        get () {
                            const workUnitStore = _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();
                            (0, _dynamicrendering.trackDynamicDataInDynamicRender)(store, workUnitStore);
                            return underlyingSearchParams[prop];
                        },
                        set (value) {
                            Object.defineProperty(promise, prop, {
                                value,
                                writable: true,
                                enumerable: true
                            });
                        },
                        enumerable: true,
                        configurable: true
                    });
                }
        }
    });
    return promise;
}
function makeDynamicallyTrackedExoticSearchParamsWithDevWarnings(underlyingSearchParams, store) {
    const cachedSearchParams = CachedSearchParams.get(underlyingSearchParams);
    if (cachedSearchParams) {
        return cachedSearchParams;
    }
    const proxiedProperties = new Set();
    const unproxiedProperties = [];
    // We have an unfortunate sequence of events that requires this initialization logic. We want to instrument the underlying
    // searchParams object to detect if you are accessing values in dev. This is used for warnings and for things like the static prerender
    // indicator. However when we pass this proxy to our Promise.resolve() below the VM checks if the resolved value is a promise by looking
    // at the `.then` property. To our dynamic tracking logic this is indistinguishable from a `then` searchParam and so we would normally trigger
    // dynamic tracking. However we know that this .then is not real dynamic access, it's just how thenables resolve in sequence. So we introduce
    // this initialization concept so we omit the dynamic check until after we've constructed our resolved promise.
    let promiseInitialized = false;
    const proxiedUnderlying = new Proxy(underlyingSearchParams, {
        get (target, prop, receiver) {
            if (typeof prop === 'string' && promiseInitialized) {
                if (store.dynamicShouldError) {
                    const expression = (0, _utils.describeStringPropertyAccess)('searchParams', prop);
                    (0, _utils.throwWithStaticGenerationBailoutErrorWithDynamicError)(store.route, expression);
                }
                const workUnitStore = _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();
                (0, _dynamicrendering.trackDynamicDataInDynamicRender)(store, workUnitStore);
            }
            return _reflect.ReflectAdapter.get(target, prop, receiver);
        },
        has (target, prop) {
            if (typeof prop === 'string') {
                if (store.dynamicShouldError) {
                    const expression = (0, _utils.describeHasCheckingStringProperty)('searchParams', prop);
                    (0, _utils.throwWithStaticGenerationBailoutErrorWithDynamicError)(store.route, expression);
                }
            }
            return Reflect.has(target, prop);
        },
        ownKeys (target) {
            if (store.dynamicShouldError) {
                const expression = '`{...searchParams}`, `Object.keys(searchParams)`, or similar';
                (0, _utils.throwWithStaticGenerationBailoutErrorWithDynamicError)(store.route, expression);
            }
            return Reflect.ownKeys(target);
        }
    });
    // We don't use makeResolvedReactPromise here because searchParams
    // supports copying with spread and we don't want to unnecessarily
    // instrument the promise with spreadable properties of ReactPromise.
    const promise = new Promise((resolve)=>(0, _scheduler.scheduleImmediate)(()=>resolve(underlyingSearchParams)));
    promise.then(()=>{
        promiseInitialized = true;
    });
    Object.keys(underlyingSearchParams).forEach((prop)=>{
        if (_utils.wellKnownProperties.has(prop)) {
            // These properties cannot be shadowed because they need to be the
            // true underlying value for Promises to work correctly at runtime
            unproxiedProperties.push(prop);
        } else {
            proxiedProperties.add(prop);
            Object.defineProperty(promise, prop, {
                get () {
                    return proxiedUnderlying[prop];
                },
                set (newValue) {
                    Object.defineProperty(promise, prop, {
                        value: newValue,
                        writable: true,
                        enumerable: true
                    });
                },
                enumerable: true,
                configurable: true
            });
        }
    });
    const proxiedPromise = new Proxy(promise, {
        get (target, prop, receiver) {
            if (prop === 'then' && store.dynamicShouldError) {
                const expression = '`searchParams.then`';
                (0, _utils.throwWithStaticGenerationBailoutErrorWithDynamicError)(store.route, expression);
            }
            if (typeof prop === 'string') {
                if (!_utils.wellKnownProperties.has(prop) && (proxiedProperties.has(prop) || // We are accessing a property that doesn't exist on the promise nor
                // the underlying searchParams.
                Reflect.has(target, prop) === false)) {
                    const expression = (0, _utils.describeStringPropertyAccess)('searchParams', prop);
                    syncIODev(store.route, expression);
                }
            }
            return _reflect.ReflectAdapter.get(target, prop, receiver);
        },
        set (target, prop, value, receiver) {
            if (typeof prop === 'string') {
                proxiedProperties.delete(prop);
            }
            return Reflect.set(target, prop, value, receiver);
        },
        has (target, prop) {
            if (typeof prop === 'string') {
                if (!_utils.wellKnownProperties.has(prop) && (proxiedProperties.has(prop) || // We are accessing a property that doesn't exist on the promise nor
                // the underlying searchParams.
                Reflect.has(target, prop) === false)) {
                    const expression = (0, _utils.describeHasCheckingStringProperty)('searchParams', prop);
                    syncIODev(store.route, expression);
                }
            }
            return Reflect.has(target, prop);
        },
        ownKeys (target) {
            const expression = '`Object.keys(searchParams)` or similar';
            syncIODev(store.route, expression, unproxiedProperties);
            return Reflect.ownKeys(target);
        }
    });
    CachedSearchParams.set(underlyingSearchParams, proxiedPromise);
    return proxiedPromise;
}
function syncIODev(route, expression, missingProperties) {
    // In all cases we warn normally
    if (missingProperties && missingProperties.length > 0) {
        warnForIncompleteEnumeration(route, expression, missingProperties);
    } else {
        warnForSyncAccess(route, expression);
    }
    const workUnitStore = _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();
    if (workUnitStore && workUnitStore.type === 'request' && workUnitStore.prerenderPhase === true) {
        // When we're rendering dynamically in dev we need to advance out of the
        // Prerender environment when we read Request data synchronously
        const requestStore = workUnitStore;
        (0, _dynamicrendering.trackSynchronousRequestDataAccessInDev)(requestStore);
    }
}
const noop = ()=>{};
const warnForSyncAccess = ("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : (0, _creatededupedbycallsiteservererrorlogger.createDedupedByCallsiteServerErrorLoggerDev)(createSearchAccessError);
const warnForIncompleteEnumeration = ("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : (0, _creatededupedbycallsiteservererrorlogger.createDedupedByCallsiteServerErrorLoggerDev)(createIncompleteEnumerationError);
function createSearchAccessError(route, expression) {
    const prefix = route ? `Route "${route}" ` : 'This route ';
    return new Error(`${prefix}used ${expression}. ` + `\`searchParams\` should be awaited before using its properties. ` + `Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis`);
}
function createIncompleteEnumerationError(route, expression, missingProperties) {
    const prefix = route ? `Route "${route}" ` : 'This route ';
    return new Error(`${prefix}used ${expression}. ` + `\`searchParams\` should be awaited before using its properties. ` + `The following properties were not available through enumeration ` + `because they conflict with builtin or well-known property names: ` + `${describeListOfPropertyNames(missingProperties)}. ` + `Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis`);
}
function describeListOfPropertyNames(properties) {
    switch(properties.length){
        case 0:
            throw new _invarianterror.InvariantError('Expected describeListOfPropertyNames to be called with a non-empty list of strings.');
        case 1:
            return `\`${properties[0]}\``;
        case 2:
            return `\`${properties[0]}\` and \`${properties[1]}\``;
        default:
            {
                let description = '';
                for(let i = 0; i < properties.length - 1; i++){
                    description += `\`${properties[i]}\`, `;
                }
                description += `, and \`${properties[properties.length - 1]}\``;
                return description;
            }
    }
} //# sourceMappingURL=search-params.js.map
}}),
"[project]/node_modules/next/dist/server/request/params.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
var __TURBOPACK__imported__module__$5b$project$5d2f$node_modules$2f$next$2f$dist$2f$build$2f$polyfills$2f$process$2e$js__$5b$app$2d$client$5d$__$28$ecmascript$29$__ = __turbopack_import__("[project]/node_modules/next/dist/build/polyfills/process.js [app-client] (ecmascript)");
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    createParamsFromClient: null,
    createPrerenderParamsForClientSegment: null,
    createServerParamsForMetadata: null,
    createServerParamsForRoute: null,
    createServerParamsForServerSegment: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    createParamsFromClient: function() {
        return createParamsFromClient;
    },
    createPrerenderParamsForClientSegment: function() {
        return createPrerenderParamsForClientSegment;
    },
    createServerParamsForMetadata: function() {
        return createServerParamsForMetadata;
    },
    createServerParamsForRoute: function() {
        return createServerParamsForRoute;
    },
    createServerParamsForServerSegment: function() {
        return createServerParamsForServerSegment;
    }
});
const _reflect = __turbopack_require__("[project]/node_modules/next/dist/server/web/spec-extension/adapters/reflect.js [app-client] (ecmascript)");
const _dynamicrendering = __turbopack_require__("[project]/node_modules/next/dist/server/app-render/dynamic-rendering.js [app-client] (ecmascript)");
const _workunitasyncstorageexternal = __turbopack_require__("[project]/node_modules/next/dist/server/app-render/work-unit-async-storage.external.js [app-client] (ecmascript)");
const _invarianterror = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/invariant-error.js [app-client] (ecmascript)");
const _utils = __turbopack_require__("[project]/node_modules/next/dist/server/request/utils.js [app-client] (ecmascript)");
const _dynamicrenderingutils = __turbopack_require__("[project]/node_modules/next/dist/server/dynamic-rendering-utils.js [app-client] (ecmascript)");
const _creatededupedbycallsiteservererrorlogger = __turbopack_require__("[project]/node_modules/next/dist/server/create-deduped-by-callsite-server-error-logger.js [app-client] (ecmascript)");
const _scheduler = __turbopack_require__("[project]/node_modules/next/dist/lib/scheduler.js [app-client] (ecmascript)");
function createParamsFromClient(underlyingParams, workStore) {
    const workUnitStore = _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();
    if (workUnitStore) {
        switch(workUnitStore.type){
            case 'prerender':
            case 'prerender-ppr':
            case 'prerender-legacy':
                return createPrerenderParams(underlyingParams, workStore, workUnitStore);
            default:
        }
    }
    return createRenderParams(underlyingParams, workStore);
}
const createServerParamsForMetadata = createServerParamsForServerSegment;
function createServerParamsForRoute(underlyingParams, workStore) {
    const workUnitStore = _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();
    if (workUnitStore) {
        switch(workUnitStore.type){
            case 'prerender':
            case 'prerender-ppr':
            case 'prerender-legacy':
                return createPrerenderParams(underlyingParams, workStore, workUnitStore);
            default:
        }
    }
    return createRenderParams(underlyingParams, workStore);
}
function createServerParamsForServerSegment(underlyingParams, workStore) {
    const workUnitStore = _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();
    if (workUnitStore) {
        switch(workUnitStore.type){
            case 'prerender':
            case 'prerender-ppr':
            case 'prerender-legacy':
                return createPrerenderParams(underlyingParams, workStore, workUnitStore);
            default:
        }
    }
    return createRenderParams(underlyingParams, workStore);
}
function createPrerenderParamsForClientSegment(underlyingParams, workStore) {
    const prerenderStore = _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();
    if (prerenderStore && prerenderStore.type === 'prerender') {
        const fallbackParams = workStore.fallbackRouteParams;
        if (fallbackParams) {
            for(let key in underlyingParams){
                if (fallbackParams.has(key)) {
                    // This params object has one of more fallback params so we need to consider
                    // the awaiting of this params object "dynamic". Since we are in dynamicIO mode
                    // we encode this as a promise that never resolves
                    return (0, _dynamicrenderingutils.makeHangingPromise)(prerenderStore.renderSignal, '`params`');
                }
            }
        }
    }
    // We're prerendering in a mode that does not abort. We resolve the promise without
    // any tracking because we're just transporting a value from server to client where the tracking
    // will be applied.
    return Promise.resolve(underlyingParams);
}
function createPrerenderParams(underlyingParams, workStore, prerenderStore) {
    const fallbackParams = workStore.fallbackRouteParams;
    if (fallbackParams) {
        let hasSomeFallbackParams = false;
        for(const key in underlyingParams){
            if (fallbackParams.has(key)) {
                hasSomeFallbackParams = true;
                break;
            }
        }
        if (hasSomeFallbackParams) {
            // params need to be treated as dynamic because we have at least one fallback param
            if (prerenderStore.type === 'prerender') {
                // We are in a dynamicIO (PPR or otherwise) prerender
                return makeAbortingExoticParams(underlyingParams, workStore.route, prerenderStore);
            }
            // remaining cases are prender-ppr and prerender-legacy
            // We aren't in a dynamicIO prerender but we do have fallback params at this
            // level so we need to make an erroring exotic params object which will postpone
            // if you access the fallback params
            return makeErroringExoticParams(underlyingParams, fallbackParams, workStore, prerenderStore);
        }
    }
    // We don't have any fallback params so we have an entirely static safe params object
    return makeUntrackedExoticParams(underlyingParams);
}
function createRenderParams(underlyingParams, workStore) {
    if (("TURBOPACK compile-time value", "development") === 'development' && !workStore.isPrefetchRequest) {
        return makeDynamicallyTrackedExoticParamsWithDevWarnings(underlyingParams, workStore);
    } else {
        return makeUntrackedExoticParams(underlyingParams);
    }
}
const CachedParams = new WeakMap();
function makeAbortingExoticParams(underlyingParams, route, prerenderStore) {
    const cachedParams = CachedParams.get(underlyingParams);
    if (cachedParams) {
        return cachedParams;
    }
    const promise = (0, _dynamicrenderingutils.makeHangingPromise)(prerenderStore.renderSignal, '`params`');
    CachedParams.set(underlyingParams, promise);
    Object.keys(underlyingParams).forEach((prop)=>{
        if (_utils.wellKnownProperties.has(prop)) {
        // These properties cannot be shadowed because they need to be the
        // true underlying value for Promises to work correctly at runtime
        } else {
            Object.defineProperty(promise, prop, {
                get () {
                    const expression = (0, _utils.describeStringPropertyAccess)('params', prop);
                    const error = createParamsAccessError(route, expression);
                    (0, _dynamicrendering.abortAndThrowOnSynchronousRequestDataAccess)(route, expression, error, prerenderStore);
                },
                set (newValue) {
                    Object.defineProperty(promise, prop, {
                        value: newValue,
                        writable: true,
                        enumerable: true
                    });
                },
                enumerable: true,
                configurable: true
            });
        }
    });
    return promise;
}
function makeErroringExoticParams(underlyingParams, fallbackParams, workStore, prerenderStore) {
    const cachedParams = CachedParams.get(underlyingParams);
    if (cachedParams) {
        return cachedParams;
    }
    const augmentedUnderlying = {
        ...underlyingParams
    };
    // We don't use makeResolvedReactPromise here because params
    // supports copying with spread and we don't want to unnecessarily
    // instrument the promise with spreadable properties of ReactPromise.
    const promise = Promise.resolve(augmentedUnderlying);
    CachedParams.set(underlyingParams, promise);
    Object.keys(underlyingParams).forEach((prop)=>{
        if (_utils.wellKnownProperties.has(prop)) {
        // These properties cannot be shadowed because they need to be the
        // true underlying value for Promises to work correctly at runtime
        } else {
            if (fallbackParams.has(prop)) {
                Object.defineProperty(augmentedUnderlying, prop, {
                    get () {
                        const expression = (0, _utils.describeStringPropertyAccess)('params', prop);
                        // In most dynamic APIs we also throw if `dynamic = "error"` however
                        // for params is only dynamic when we're generating a fallback shell
                        // and even when `dynamic = "error"` we still support generating dynamic
                        // fallback shells
                        // TODO remove this comment when dynamicIO is the default since there
                        // will be no `dynamic = "error"`
                        if (prerenderStore.type === 'prerender-ppr') {
                            // PPR Prerender (no dynamicIO)
                            (0, _dynamicrendering.postponeWithTracking)(workStore.route, expression, prerenderStore.dynamicTracking);
                        } else {
                            // Legacy Prerender
                            (0, _dynamicrendering.throwToInterruptStaticGeneration)(expression, workStore, prerenderStore);
                        }
                    },
                    enumerable: true
                });
                Object.defineProperty(promise, prop, {
                    get () {
                        const expression = (0, _utils.describeStringPropertyAccess)('params', prop);
                        // In most dynamic APIs we also throw if `dynamic = "error"` however
                        // for params is only dynamic when we're generating a fallback shell
                        // and even when `dynamic = "error"` we still support generating dynamic
                        // fallback shells
                        // TODO remove this comment when dynamicIO is the default since there
                        // will be no `dynamic = "error"`
                        if (prerenderStore.type === 'prerender-ppr') {
                            // PPR Prerender (no dynamicIO)
                            (0, _dynamicrendering.postponeWithTracking)(workStore.route, expression, prerenderStore.dynamicTracking);
                        } else {
                            // Legacy Prerender
                            (0, _dynamicrendering.throwToInterruptStaticGeneration)(expression, workStore, prerenderStore);
                        }
                    },
                    set (newValue) {
                        Object.defineProperty(promise, prop, {
                            value: newValue,
                            writable: true,
                            enumerable: true
                        });
                    },
                    enumerable: true,
                    configurable: true
                });
            } else {
                ;
                promise[prop] = underlyingParams[prop];
            }
        }
    });
    return promise;
}
function makeUntrackedExoticParams(underlyingParams) {
    const cachedParams = CachedParams.get(underlyingParams);
    if (cachedParams) {
        return cachedParams;
    }
    // We don't use makeResolvedReactPromise here because params
    // supports copying with spread and we don't want to unnecessarily
    // instrument the promise with spreadable properties of ReactPromise.
    const promise = Promise.resolve(underlyingParams);
    CachedParams.set(underlyingParams, promise);
    Object.keys(underlyingParams).forEach((prop)=>{
        if (_utils.wellKnownProperties.has(prop)) {
        // These properties cannot be shadowed because they need to be the
        // true underlying value for Promises to work correctly at runtime
        } else {
            ;
            promise[prop] = underlyingParams[prop];
        }
    });
    return promise;
}
function makeDynamicallyTrackedExoticParamsWithDevWarnings(underlyingParams, store) {
    const cachedParams = CachedParams.get(underlyingParams);
    if (cachedParams) {
        return cachedParams;
    }
    // We don't use makeResolvedReactPromise here because params
    // supports copying with spread and we don't want to unnecessarily
    // instrument the promise with spreadable properties of ReactPromise.
    const promise = new Promise((resolve)=>(0, _scheduler.scheduleImmediate)(()=>resolve(underlyingParams)));
    const proxiedProperties = new Set();
    const unproxiedProperties = [];
    Object.keys(underlyingParams).forEach((prop)=>{
        if (_utils.wellKnownProperties.has(prop)) {
            // These properties cannot be shadowed because they need to be the
            // true underlying value for Promises to work correctly at runtime
            unproxiedProperties.push(prop);
        } else {
            proxiedProperties.add(prop);
            promise[prop] = underlyingParams[prop];
        }
    });
    const proxiedPromise = new Proxy(promise, {
        get (target, prop, receiver) {
            if (typeof prop === 'string') {
                if (proxiedProperties.has(prop)) {
                    const expression = (0, _utils.describeStringPropertyAccess)('params', prop);
                    syncIODev(store.route, expression);
                }
            }
            return _reflect.ReflectAdapter.get(target, prop, receiver);
        },
        set (target, prop, value, receiver) {
            if (typeof prop === 'string') {
                proxiedProperties.delete(prop);
            }
            return _reflect.ReflectAdapter.set(target, prop, value, receiver);
        },
        ownKeys (target) {
            const expression = '`...params` or similar expression';
            syncIODev(store.route, expression, unproxiedProperties);
            return Reflect.ownKeys(target);
        }
    });
    CachedParams.set(underlyingParams, proxiedPromise);
    return proxiedPromise;
}
function syncIODev(route, expression, missingProperties) {
    const workUnitStore = _workunitasyncstorageexternal.workUnitAsyncStorage.getStore();
    if (workUnitStore && workUnitStore.type === 'request' && workUnitStore.prerenderPhase === true) {
        // When we're rendering dynamically in dev we need to advance out of the
        // Prerender environment when we read Request data synchronously
        const requestStore = workUnitStore;
        (0, _dynamicrendering.trackSynchronousRequestDataAccessInDev)(requestStore);
    }
    // In all cases we warn normally
    if (missingProperties && missingProperties.length > 0) {
        warnForIncompleteEnumeration(route, expression, missingProperties);
    } else {
        warnForSyncAccess(route, expression);
    }
}
const noop = ()=>{};
const warnForSyncAccess = ("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : (0, _creatededupedbycallsiteservererrorlogger.createDedupedByCallsiteServerErrorLoggerDev)(createParamsAccessError);
const warnForIncompleteEnumeration = ("TURBOPACK compile-time falsy", 0) ? ("TURBOPACK unreachable", undefined) : (0, _creatededupedbycallsiteservererrorlogger.createDedupedByCallsiteServerErrorLoggerDev)(createIncompleteEnumerationError);
function createParamsAccessError(route, expression) {
    const prefix = route ? `Route "${route}" ` : 'This route ';
    return new Error(`${prefix}used ${expression}. ` + `\`params\` should be awaited before using its properties. ` + `Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis`);
}
function createIncompleteEnumerationError(route, expression, missingProperties) {
    const prefix = route ? `Route "${route}" ` : 'This route ';
    return new Error(`${prefix}used ${expression}. ` + `\`params\` should be awaited before using its properties. ` + `The following properties were not available through enumeration ` + `because they conflict with builtin property names: ` + `${describeListOfPropertyNames(missingProperties)}. ` + `Learn more: https://nextjs.org/docs/messages/sync-dynamic-apis`);
}
function describeListOfPropertyNames(properties) {
    switch(properties.length){
        case 0:
            throw new _invarianterror.InvariantError('Expected describeListOfPropertyNames to be called with a non-empty list of strings.');
        case 1:
            return `\`${properties[0]}\``;
        case 2:
            return `\`${properties[0]}\` and \`${properties[1]}\``;
        default:
            {
                let description = '';
                for(let i = 0; i < properties.length - 1; i++){
                    description += `\`${properties[i]}\`, `;
                }
                description += `, and \`${properties[properties.length - 1]}\``;
                return description;
            }
    }
} //# sourceMappingURL=params.js.map
}}),
"[project]/node_modules/next/dist/client/components/client-page.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ClientPageRoot", {
    enumerable: true,
    get: function() {
        return ClientPageRoot;
    }
});
const _jsxruntime = __turbopack_require__("[project]/node_modules/next/dist/compiled/react/jsx-runtime.js [app-client] (ecmascript)");
const _invarianterror = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/invariant-error.js [app-client] (ecmascript)");
function ClientPageRoot(param) {
    let { Component, searchParams, params, promises } = param;
    if (typeof window === 'undefined') {
        const { workAsyncStorage } = __turbopack_require__("[project]/node_modules/next/dist/server/app-render/work-async-storage.external.js [app-client] (ecmascript)");
        let clientSearchParams;
        let clientParams;
        // We are going to instrument the searchParams prop with tracking for the
        // appropriate context. We wrap differently in prerendering vs rendering
        const store = workAsyncStorage.getStore();
        if (!store) {
            throw new _invarianterror.InvariantError('Expected workStore to exist when handling searchParams in a client Page.');
        }
        const { createSearchParamsFromClient } = __turbopack_require__("[project]/node_modules/next/dist/server/request/search-params.js [app-client] (ecmascript)");
        clientSearchParams = createSearchParamsFromClient(searchParams, store);
        const { createParamsFromClient } = __turbopack_require__("[project]/node_modules/next/dist/server/request/params.js [app-client] (ecmascript)");
        clientParams = createParamsFromClient(params, store);
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(Component, {
            params: clientParams,
            searchParams: clientSearchParams
        });
    } else {
        const { createRenderSearchParamsFromClient } = __turbopack_require__("[project]/node_modules/next/dist/server/request/search-params.browser.js [app-client] (ecmascript)");
        const clientSearchParams = createRenderSearchParamsFromClient(searchParams);
        const { createRenderParamsFromClient } = __turbopack_require__("[project]/node_modules/next/dist/server/request/params.browser.js [app-client] (ecmascript)");
        const clientParams = createRenderParamsFromClient(params);
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(Component, {
            params: clientParams,
            searchParams: clientSearchParams
        });
    }
}
if ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {
    Object.defineProperty(exports.default, '__esModule', {
        value: true
    });
    Object.assign(exports.default, exports);
    module.exports = exports.default;
} //# sourceMappingURL=client-page.js.map
}}),
"[project]/node_modules/next/dist/client/components/client-segment.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
Object.defineProperty(exports, "ClientSegmentRoot", {
    enumerable: true,
    get: function() {
        return ClientSegmentRoot;
    }
});
const _jsxruntime = __turbopack_require__("[project]/node_modules/next/dist/compiled/react/jsx-runtime.js [app-client] (ecmascript)");
const _invarianterror = __turbopack_require__("[project]/node_modules/next/dist/shared/lib/invariant-error.js [app-client] (ecmascript)");
function ClientSegmentRoot(param) {
    let { Component, slots, params, promise } = param;
    if (typeof window === 'undefined') {
        const { workAsyncStorage } = __turbopack_require__("[project]/node_modules/next/dist/server/app-render/work-async-storage.external.js [app-client] (ecmascript)");
        let clientParams;
        // We are going to instrument the searchParams prop with tracking for the
        // appropriate context. We wrap differently in prerendering vs rendering
        const store = workAsyncStorage.getStore();
        if (!store) {
            throw new _invarianterror.InvariantError('Expected workStore to exist when handling params in a client segment such as a Layout or Template.');
        }
        const { createParamsFromClient } = __turbopack_require__("[project]/node_modules/next/dist/server/request/params.js [app-client] (ecmascript)");
        clientParams = createParamsFromClient(params, store);
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(Component, {
            ...slots,
            params: clientParams
        });
    } else {
        const { createRenderParamsFromClient } = __turbopack_require__("[project]/node_modules/next/dist/server/request/params.browser.js [app-client] (ecmascript)");
        const clientParams = createRenderParamsFromClient(params);
        return /*#__PURE__*/ (0, _jsxruntime.jsx)(Component, {
            ...slots,
            params: clientParams
        });
    }
}
if ((typeof exports.default === 'function' || typeof exports.default === 'object' && exports.default !== null) && typeof exports.default.__esModule === 'undefined') {
    Object.defineProperty(exports.default, '__esModule', {
        value: true
    });
    Object.assign(exports.default, exports);
    module.exports = exports.default;
} //# sourceMappingURL=client-segment.js.map
}}),
"[project]/node_modules/next/dist/lib/metadata/metadata-boundary.js [app-client] (ecmascript)": (function(__turbopack_context__) {

var { r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, b: __turbopack_worker_blob_url__, g: global, __dirname, m: module, e: exports, t: __turbopack_require_real__ } = __turbopack_context__;
{
'use client';
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
0 && (module.exports = {
    MetadataBoundary: null,
    OutletBoundary: null,
    ViewportBoundary: null
});
function _export(target, all) {
    for(var name in all)Object.defineProperty(target, name, {
        enumerable: true,
        get: all[name]
    });
}
_export(exports, {
    MetadataBoundary: function() {
        return MetadataBoundary;
    },
    OutletBoundary: function() {
        return OutletBoundary;
    },
    ViewportBoundary: function() {
        return ViewportBoundary;
    }
});
const _metadataconstants = __turbopack_require__("[project]/node_modules/next/dist/lib/metadata/metadata-constants.js [app-client] (ecmascript)");
// We use a namespace object to allow us to recover the name of the function
// at runtime even when production bundling/minification is used.
const NameSpace = {
    [_metadataconstants.METADATA_BOUNDARY_NAME]: function({ children }) {
        return children;
    },
    [_metadataconstants.VIEWPORT_BOUNDARY_NAME]: function({ children }) {
        return children;
    },
    [_metadataconstants.OUTLET_BOUNDARY_NAME]: function({ children }) {
        return children;
    }
};
const MetadataBoundary = // so it retains the name inferred from the namespace object
NameSpace[_metadataconstants.METADATA_BOUNDARY_NAME.slice(0)];
const ViewportBoundary = // so it retains the name inferred from the namespace object
NameSpace[_metadataconstants.VIEWPORT_BOUNDARY_NAME.slice(0)];
const OutletBoundary = // so it retains the name inferred from the namespace object
NameSpace[_metadataconstants.OUTLET_BOUNDARY_NAME.slice(0)]; //# sourceMappingURL=metadata-boundary.js.map
}}),
}]);

//# sourceMappingURL=node_modules_3a4f76._.js.map